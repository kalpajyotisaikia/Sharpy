{"file_contents":{"DEPLOYMENT_GUIDE.md":{"content":"# Sharpy Educational App - Deployment Guide\n\n## GitHub Export & Render.com Deployment\n\n### Step 1: Export to GitHub\n\n1. **Create a new GitHub repository:**\n   - Go to [GitHub.com](https://github.com) and create a new repository\n   - Name it \"sharpy-educational-app\" or similar\n   - Make it public or private (your choice)\n   - Don't initialize with README since we have files\n\n2. **Download project files from Replit:**\n   - In Replit, go to the file explorer\n   - Click the three dots menu and select \"Download as zip\"\n   - Extract the zip file on your computer\n\n3. **Upload to GitHub:**\n   - Clone your new GitHub repository to your computer\n   - Copy all project files to the repository folder\n   - Commit and push to GitHub:\n   ```bash\n   git add .\n   git commit -m \"Initial commit - Sharpy Educational App\"\n   git push origin main\n   ```\n\n### Step 2: Deploy on Render.com\n\n1. **Create Render.com account:**\n   - Go to [Render.com](https://render.com)\n   - Sign up or log in\n\n2. **Create new Web Service:**\n   - Click \"New +\" button\n   - Select \"Web Service\"\n   - Connect your GitHub repository\n\n3. **Configure deployment settings:**\n   ```\n   Name: sharpy-educational-app\n   Environment: Python 3\n   Build Command: pip install -r render_requirements.txt\n   Start Command: streamlit run app.py --server.port=$PORT --server.address=0.0.0.0\n   ```\n\n4. **Set environment variables:**\n   - In Render dashboard, go to your service\n   - Click \"Environment\" tab\n   - Add these variables:\n   ```\n   DATABASE_URL = postgresql://frudent_db_user:AXNmaumb01w93rfozH5oXEPxVxFKgLhm@dpg-d2hmfaemcj7s73br3hmg-a.oregon-postgres.render.com/frudent_db\n   ```\n\n5. **Deploy:**\n   - Click \"Create Web Service\"\n   - Render will automatically build and deploy your app\n   - You'll get a URL like: `https://sharpy-educational-app.onrender.com`\n\n### Step 3: Optional - Custom Domain\n\n1. **In Render dashboard:**\n   - Go to your service settings\n   - Click \"Custom Domains\"\n   - Add your domain name\n   - Follow DNS configuration instructions\n\n### Files Created for Deployment:\n\n- `render_requirements.txt` - Python dependencies for Render\n- `Procfile` - Process configuration for deployment\n- `runtime.txt` - Python version specification\n- `.gitignore` - Files to exclude from Git\n- `DEPLOYMENT_GUIDE.md` - This guide\n\n### Important Notes:\n\n1. **Database:** The app uses your existing Render PostgreSQL database\n2. **Environment Variables:** Database URL is set via environment variables in production\n3. **Port Configuration:** App automatically uses Render's assigned port\n4. **Dependencies:** All required packages are listed in render_requirements.txt\n\n### Troubleshooting:\n\n- **Build fails:** Check render_requirements.txt for correct package versions\n- **App won't start:** Verify the start command in Render settings\n- **Database connection:** Ensure DATABASE_URL environment variable is set correctly\n- **Authentication issues:** Check if database tables are created properly\n\n### Local Development:\n\nTo run locally after GitHub export:\n```bash\npip install -r render_requirements.txt\nstreamlit run app.py\n```\n\nThe app will automatically connect to your Render database or use fallback mode for testing.","size_bytes":3188},"README.md":{"content":"# Sharpy Educational Platform\n\nAn advanced educational management system designed to enhance learning experiences through interactive features, comprehensive course management, and intelligent tracking systems.\n\n## Overview\n\nSharpy Educational Platform is a modern web-based learning management system that combines traditional educational tools with gamification elements to create an engaging learning environment. The platform supports both individual learners and educational institutions with robust features for course delivery, progress tracking, and student engagement.\n\n## Core Features\n\n### User Management & Authentication\n- Secure phone number-based user registration\n- Multi-factor authentication with OTP support\n- Role-based access control (Premium/Standard users)\n- Comprehensive user profile management\n\n### Course Management System\n- Hierarchical course structure organization\n- Multi-class support with specialized content\n- Progress tracking and completion analytics\n- Interactive video lecture integration\n- Chapter-based content delivery\n\n### Learning Analytics & Gamification\n- Real-time progress visualization\n- Achievement-based reward system\n- Coin economy for user engagement\n- Performance analytics dashboard\n- Learning streak tracking\n\n### Communication & Notifications\n- Integrated notification system\n- Live class scheduling and management\n- Automated reminder system\n- User engagement tracking\n\n### Content Delivery\n- Educational video streaming\n- Interactive short-form content\n- Multi-media learning resources\n- Mobile-responsive design\n\n## Technical Architecture\n\n### Backend Infrastructure\n- **Framework:** Python-based web application\n- **Database:** PostgreSQL with optimized queries\n- **Authentication:** SHA-256 encryption with session management\n- **API Integration:** RESTful services architecture\n\n### Frontend Technology\n- **Interface:** Modern web-based user interface\n- **Visualization:** Interactive charts and analytics\n- **Responsive Design:** Cross-platform compatibility\n- **User Experience:** Intuitive navigation and accessibility\n\n### Data Management\n- **User Profiles:** Comprehensive student information\n- **Course Catalog:** Structured learning content\n- **Progress Tracking:** Real-time analytics\n- **Notification System:** Automated communication\n\n## System Requirements\n\n### Dependencies\n- Python 3.11+\n- PostgreSQL database\n- Modern web browser support\n- Optional: SMS service integration\n\n### Installation\n```bash\npip install -r requirements.txt\npython app.py\n```\n\n## Project Architecture\n\n```\nsharpy-educational-platform/\n├── app.py                    # Application entry point\n├── utils/\n│   ├── auth.py              # Authentication management\n│   ├── database.py          # Data layer operations\n│   └── otp_manager.py       # Communication services\n├── pages/\n│   ├── courses.py           # Course management interface\n│   ├── journey.py           # Analytics dashboard\n│   ├── notifications.py    # Communication center\n│   └── content.py           # Media delivery system\n└── requirements.txt         # System dependencies\n```\n\n## Key Capabilities\n\n### Educational Management\n- Course creation and management\n- Student enrollment tracking\n- Performance assessment tools\n- Content organization systems\n\n### Student Engagement\n- Interactive learning pathways\n- Achievement recognition systems\n- Progress visualization tools\n- Personalized learning experiences\n\n### Administrative Features\n- User management dashboard\n- Analytics and reporting\n- Communication tools\n- System configuration\n\n### Integration Support\n- Third-party service connectivity\n- API endpoints for external systems\n- Data export capabilities\n- Scalable architecture design\n\n## Security & Privacy\n\n- Industry-standard encryption protocols\n- Secure user data handling\n- Privacy-compliant design\n- Regular security updates\n\n## Scalability\n\n- Modular architecture for easy expansion\n- Database optimization for high-volume usage\n- Efficient resource management\n- Cloud deployment ready\n\n## Copyright & Development\n\n**© 2025 Sharpy. All rights reserved.**\n\n**Developed by DG Developers**\n\nThis software and all associated intellectual property rights are owned by Sharpy. The platform represents proprietary technology developed specifically for educational institutions and learning management applications.\n\n## Professional Development\n\nBuilt with modern software engineering practices by DG Developers, following industry standards for educational technology platforms. The system is designed for scalability, maintainability, and extensibility to meet evolving educational needs.\n\n## License\n\nThis software is proprietary and protected under copyright law. All rights reserved by Sharpy.","size_bytes":4804},"app.py":{"content":"import streamlit as st\nimport pandas as pd\nimport os\nfrom utils.auth import AuthManager\nfrom utils.database import DatabaseManager\nfrom utils.otp_manager import OTPManager\n\n# Configure page\nst.set_page_config(\n    page_title=\"Sharpy Education\",\n    page_icon=\"📚\",\n    layout=\"wide\",\n    initial_sidebar_state=\"auto\"\n)\n\n# Initialize session state\nif 'authenticated' not in st.session_state:\n    st.session_state.authenticated = False\nif 'user_data' not in st.session_state:\n    st.session_state.user_data = None\nif 'current_page' not in st.session_state:\n    st.session_state.current_page = 'home'\n\n# Initialize managers\nauth_manager = AuthManager()\ndb_manager = DatabaseManager()\notp_manager = OTPManager()\n\n# Custom CSS for better styling\nst.markdown(\"\"\"\n<style>\n    .main-header {\n        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 1rem;\n        border-radius: 10px;\n        margin-bottom: 2rem;\n        text-align: center;\n    }\n    .nav-button {\n        background: #667eea;\n        color: white;\n        border: none;\n        padding: 0.5rem 1rem;\n        margin: 0.2rem;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n    .nav-button:hover {\n        background: #5a67d8;\n    }\n    .course-card {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 10px;\n        padding: 1rem;\n        margin: 1rem 0;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    .coins-display {\n        background: #ffd700;\n        color: #333;\n        padding: 0.5rem 1rem;\n        border-radius: 20px;\n        font-weight: bold;\n        display: inline-block;\n        margin: 0.5rem 0;\n    }\n    .floating-buttons {\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        z-index: 1000;\n    }\n    .floating-btn {\n        background: #25d366;\n        color: white;\n        border: none;\n        border-radius: 50%;\n        width: 60px;\n        height: 60px;\n        margin: 5px;\n        cursor: pointer;\n        font-size: 20px;\n    }\n    .floating-btn.call {\n        background: #007bff;\n    }\n</style>\n\"\"\", unsafe_allow_html=True)\n\ndef show_auth_page():\n    \"\"\"Show authentication page\"\"\"\n    st.markdown('<div class=\"main-header\"><h1>📚 Welcome to Sharpy Education</h1><p>Your Gateway to Academic Excellence</p></div>', unsafe_allow_html=True)\n    \n    tab1, tab2 = st.tabs([\"Login\", \"Register\"])\n    \n    with tab1:\n        st.subheader(\"Login to Your Account\")\n        \n        # Login form\n        with st.form(\"login_form\"):\n            phone = st.text_input(\"Phone Number\", placeholder=\"+91XXXXXXXXXX\")\n            password = st.text_input(\"Password\", type=\"password\")\n            \n            if st.form_submit_button(\"Login\", type=\"primary\"):\n                if auth_manager.login_user(phone, password):\n                    st.session_state.authenticated = True\n                    st.session_state.user_data = auth_manager.get_user_data(phone)\n                    st.success(\"Login successful!\")\n                    st.rerun()\n                else:\n                    st.error(\"Invalid credentials. Please try again.\")\n        \n        st.markdown(\"---\")\n        if st.button(\"Login with OTP\"):\n            st.session_state.show_otp_login = True\n            st.rerun()\n        \n        # OTP Login Section\n        if st.session_state.get('show_otp_login', False):\n            show_otp_login_section()\n    \n    with tab2:\n        st.subheader(\"Create New Account\")\n        \n        # Registration form\n        with st.form(\"register_form\"):\n            st.write(\"**Personal Information**\")\n            name = st.text_input(\"Full Name\")\n            phone = st.text_input(\"Phone Number\", placeholder=\"+91XXXXXXXXXX\")\n            email = st.text_input(\"Email Address\")\n            \n            st.write(\"**Educational Details**\")\n            school = st.text_input(\"School Name\")\n            class_level = st.selectbox(\"Class\", [\n                \"Class 6\", \"Class 7\", \"Class 8\", \"Class 9\", \"Class 10\", \n                \"Class 11\", \"Class 12\", \"Engineering Entrance\", \"Medical Entrance\"\n            ])\n            address = st.text_area(\"Address\")\n            \n            st.write(\"**Account Security**\")\n            password = st.text_input(\"Create Password\", type=\"password\")\n            confirm_password = st.text_input(\"Confirm Password\", type=\"password\")\n            \n            agree_terms = st.checkbox(\"I agree to the Terms and Conditions\")\n            \n            if st.form_submit_button(\"Register\", type=\"primary\"):\n                if password != confirm_password:\n                    st.error(\"Passwords don't match!\")\n                elif not agree_terms:\n                    st.error(\"Please agree to the terms and conditions.\")\n                elif auth_manager.register_user(name, phone, email, school, class_level, address, password):\n                    st.success(\"Registration successful! Please login with your credentials.\")\n                    # Clear registration form\n                    st.session_state.registration_success = True\n                else:\n                    st.error(\"Registration failed. Phone number might already exist.\")\n\ndef show_navigation():\n    \"\"\"Show navigation for authenticated users\"\"\"\n    col1, col2, col3, col4, col5, col6 = st.columns([1,1,1,1,1,1])\n    \n    with col1:\n        if st.button(\"🏠 Home\", key=\"nav_home\"):\n            st.session_state.current_page = 'home'\n            st.rerun()\n    \n    with col2:\n        if st.button(\"📚 Courses\", key=\"nav_courses\"):\n            st.session_state.current_page = 'courses'\n            st.rerun()\n    \n    with col3:\n        if st.button(\"🎯 My Journey\", key=\"nav_journey\"):\n            st.session_state.current_page = 'journey'\n            st.rerun()\n    \n    with col4:\n        if st.button(\"🔔 Notifications\", key=\"nav_notifications\"):\n            st.session_state.current_page = 'notifications'\n            st.rerun()\n    \n    with col5:\n        if st.button(\"🎬 Shorts\", key=\"nav_shorts\"):\n            st.session_state.current_page = 'shorts'\n            st.rerun()\n    \n    with col6:\n        if st.button(\"🚪 Logout\", key=\"logout\"):\n            st.session_state.authenticated = False\n            st.session_state.user_data = None\n            st.session_state.current_page = 'home'\n            st.rerun()\n\ndef show_home_page():\n    \"\"\"Show home page based on user premium status\"\"\"\n    user_data = st.session_state.user_data\n    \n    # Header with user info\n    col1, col2 = st.columns([3, 1])\n    with col1:\n        st.markdown(f'<div class=\"main-header\"><h2>Welcome back, {user_data[\"name\"]}!</h2></div>', unsafe_allow_html=True)\n    \n    with col2:\n        coins = db_manager.get_user_coins(user_data['id'])\n        st.markdown(f'<div class=\"coins-display\">🪙 {coins} Coins</div>', unsafe_allow_html=True)\n    \n    is_premium = db_manager.is_premium_user(user_data['id'])\n    \n    if not is_premium:\n        # Non-premium user home page\n        st.subheader(\"🎯 Unlock Your Potential with Sharpy Premium!\")\n        \n        # Promotional banner\n        st.info(\"Join thousands of successful students who have transformed their academic journey with Sharpy's comprehensive courses!\")\n        \n        # Free test series\n        st.subheader(\"📝 Free Test Series\")\n        if st.button(\"Apply For A Test\", type=\"primary\"):\n            show_test_series_selection()\n        \n        # YouTube videos section\n        st.subheader(\"📹 Featured Video Lessons\")\n        show_video_thumbnails()\n        \n        # Testimonials\n        st.subheader(\"🌟 SHARPY-ত পঢ়া Student-ৰ মনৰ ভাৱ\")\n        show_testimonials()\n        \n    else:\n        # Premium user home page\n        # Scheduled live classes\n        st.subheader(\"🎥 Today's Live Classes\")\n        show_live_classes()\n        \n        # Enrolled courses\n        st.subheader(\"📚 Your Enrolled Courses\")\n        show_enrolled_courses()\n        \n        # YouTube videos section\n        st.subheader(\"📹 Latest Video Lessons\")\n        show_video_thumbnails()\n        \n        # Testimonials\n        st.subheader(\"🌟 SHARPY-ত পঢ়া Student-ৰ মনৰ ভাৱ\")\n        show_testimonials()\n\ndef show_test_series_selection():\n    \"\"\"Show subject-wise test series for the user's class\"\"\"\n    user_data = st.session_state.user_data\n    class_level = user_data['class']\n    \n    st.subheader(f\"📝 Test Series for {class_level}\")\n    \n    # Get subjects based on class\n    subjects = db_manager.get_subjects_by_class(class_level)\n    \n    col1, col2, col3 = st.columns(3)\n    for i, subject in enumerate(subjects):\n        with [col1, col2, col3][i % 3]:\n            with st.container():\n                st.markdown(f'<div class=\"course-card\">', unsafe_allow_html=True)\n                st.write(f\"**{subject['name']}**\")\n                st.write(f\"Duration: {subject.get('duration', '60')} minutes\")\n                st.write(f\"Questions: {subject.get('questions', '50')}\")\n                \n                if st.button(f\"Start {subject['name']} Test\", key=f\"test_{subject['id']}\"):\n                    st.success(f\"Starting {subject['name']} test...\")\n                    # Award coins for test attempt\n                    db_manager.add_user_coins(user_data['id'], 5)\n                    st.info(\"You earned 5 coins for attempting the test!\")\n                \n                st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_video_thumbnails():\n    \"\"\"Show swipeable video thumbnails\"\"\"\n    videos = [\n        {\"title\": \"Mathematics Basics\", \"thumbnail\": \"📊\", \"duration\": \"15:30\"},\n        {\"title\": \"Physics Concepts\", \"thumbnail\": \"🔬\", \"duration\": \"22:45\"},\n        {\"title\": \"Chemistry Formulas\", \"thumbnail\": \"⚗️\", \"duration\": \"18:20\"},\n        {\"title\": \"Biology Systems\", \"thumbnail\": \"🧬\", \"duration\": \"25:10\"},\n    ]\n    \n    cols = st.columns(len(videos))\n    for i, video in enumerate(videos):\n        with cols[i]:\n            st.markdown(f\"\"\"\n            <div class=\"course-card\" style=\"text-align: center;\">\n                <div style=\"font-size: 3rem;\">{video['thumbnail']}</div>\n                <h4>{video['title']}</h4>\n                <p>Duration: {video['duration']}</p>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Watch\", key=f\"video_{i}\"):\n                st.success(f\"Playing: {video['title']}\")\n                # Award coins for watching video\n                db_manager.add_user_coins(st.session_state.user_data['id'], 6)\n                st.info(\"You earned 6 coins for watching this video!\")\n\ndef show_testimonials():\n    \"\"\"Show student testimonials\"\"\"\n    testimonials = [\n        {\"name\": \"Rahul Sharma\", \"class\": \"Class 12\", \"text\": \"Sharpy helped me improve my marks by 40%!\"},\n        {\"name\": \"Priya Das\", \"class\": \"Class 10\", \"text\": \"The live classes are amazing and interactive.\"},\n        {\"name\": \"Amit Singh\", \"class\": \"Engineering\", \"text\": \"Best platform for competitive exam preparation.\"},\n    ]\n    \n    for testimonial in testimonials:\n        st.markdown(f\"\"\"\n        <div class=\"course-card\">\n            <h4>\"{testimonial['text']}\"</h4>\n            <p><strong>- {testimonial['name']}</strong>, {testimonial['class']}</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\ndef show_live_classes():\n    \"\"\"Show scheduled live classes for premium users\"\"\"\n    classes = db_manager.get_today_live_classes(st.session_state.user_data['id'])\n    \n    if not classes:\n        st.info(\"No live classes scheduled for today.\")\n        return\n    \n    for class_info in classes:\n        col1, col2, col3 = st.columns([2, 1, 1])\n        \n        with col1:\n            st.write(f\"**{class_info['subject']} - {class_info['topic']}**\")\n            st.write(f\"Teacher: {class_info['teacher']}\")\n        \n        with col2:\n            st.write(f\"⏰ {class_info['time']}\")\n        \n        with col3:\n            if st.button(\"Join Class\", key=f\"class_{class_info['id']}\"):\n                st.success(\"Joining live class...\")\n\ndef show_enrolled_courses():\n    \"\"\"Show user's enrolled courses\"\"\"\n    courses = db_manager.get_user_courses(st.session_state.user_data['id'])\n    \n    if not courses:\n        st.info(\"You haven't enrolled in any courses yet.\")\n        return\n    \n    cols = st.columns(3)\n    for i, course in enumerate(courses):\n        with cols[i % 3]:\n            st.markdown(f\"\"\"\n            <div class=\"course-card\">\n                <h4>{course['name']}</h4>\n                <p>Progress: {course['progress']}%</p>\n                <div style=\"background: #e2e8f0; border-radius: 10px; height: 10px;\">\n                    <div style=\"background: #667eea; height: 100%; width: {course['progress']}%; border-radius: 10px;\"></div>\n                </div>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Continue Learning\", key=f\"course_{course['id']}\"):\n                st.success(f\"Opening {course['name']}...\")\n\ndef show_floating_buttons():\n    \"\"\"Show floating action buttons for call and WhatsApp\"\"\"\n    st.markdown(\"\"\"\n    <div class=\"floating-buttons\">\n        <button class=\"floating-btn call\" onclick=\"window.open('tel:+919876543210')\" title=\"Call Us\">📞</button>\n        <button class=\"floating-btn\" onclick=\"window.open('https://wa.me/919876543210')\" title=\"WhatsApp\">📱</button>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n\n# Main application logic\ndef main():\n    if not st.session_state.authenticated:\n        show_auth_page()\n    else:\n        show_navigation()\n        \n        if st.session_state.current_page == 'home':\n            show_home_page()\n        elif st.session_state.current_page == 'courses':\n            exec(open('pages/1_Courses.py').read())\n        elif st.session_state.current_page == 'journey':\n            exec(open('pages/2_Journey.py').read())\n        elif st.session_state.current_page == 'notifications':\n            exec(open('pages/3_Notifications.py').read())\n        elif st.session_state.current_page == 'shorts':\n            exec(open('pages/4_Shorts.py').read())\n        \n        show_floating_buttons()\n    \n    # Show footer on all pages\n    show_footer()\n\ndef show_footer():\n    \"\"\"Show footer with copyright and developer information\"\"\"\n    st.markdown(\"<br><br>\", unsafe_allow_html=True)\n    st.markdown(\"---\")\n    st.markdown(\n        \"\"\"\n        <div style='text-align: center; padding: 20px; color: #666; font-size: 14px; margin-top: 50px;'>\n            <p><strong>© 2025 Sharpy. All rights reserved.</strong></p>\n            <p>Developed by <strong>DG Developers</strong></p>\n        </div>\n        \"\"\", \n        unsafe_allow_html=True\n    )\n\ndef show_otp_login_section():\n    \"\"\"Show OTP-based login interface\"\"\"\n    st.subheader(\"🔐 Login with OTP\")\n    \n    # Initialize OTP session states\n    if 'otp_step' not in st.session_state:\n        st.session_state.otp_step = 'phone_input'\n    if 'otp_phone' not in st.session_state:\n        st.session_state.otp_phone = ''\n    \n    if st.session_state.otp_step == 'phone_input':\n        with st.form(\"otp_phone_form\"):\n            phone = st.text_input(\"Enter your registered phone number\", placeholder=\"+91XXXXXXXXXX\")\n            \n            col1, col2 = st.columns([1, 1])\n            with col1:\n                if st.form_submit_button(\"Send OTP\", type=\"primary\"):\n                    # Format and validate phone number\n                    formatted_phone = otp_manager.format_phone_number(phone)\n                    \n                    if not otp_manager.is_valid_phone_number(formatted_phone):\n                        st.error(\"Please enter a valid phone number (e.g., +919876543210)\")\n                    elif not db_manager.user_exists(formatted_phone):\n                        st.error(\"Phone number not registered. Please create an account first.\")\n                    else:\n                        # Generate and send OTP\n                        otp = otp_manager.generate_otp()\n                        if otp_manager.send_otp(formatted_phone, otp):\n                            otp_manager.store_otp(formatted_phone, otp)\n                            st.session_state.otp_phone = formatted_phone\n                            st.session_state.otp_step = 'otp_input'\n                            st.rerun()\n                        else:\n                            st.error(\"Failed to send OTP. Please try again.\")\n            \n            with col2:\n                if st.form_submit_button(\"Back to Login\"):\n                    st.session_state.show_otp_login = False\n                    st.rerun()\n    \n    elif st.session_state.otp_step == 'otp_input':\n        st.info(f\"OTP sent to {st.session_state.otp_phone}\")\n        \n        with st.form(\"otp_verify_form\"):\n            otp_input = st.text_input(\"Enter 6-digit OTP\", max_chars=6)\n            \n            col1, col2, col3 = st.columns([1, 1, 1])\n            \n            with col1:\n                if st.form_submit_button(\"Verify OTP\", type=\"primary\"):\n                    if len(otp_input) != 6 or not otp_input.isdigit():\n                        st.error(\"Please enter a valid 6-digit OTP\")\n                    else:\n                        success, message = otp_manager.verify_otp(st.session_state.otp_phone, otp_input)\n                        if success:\n                            # Login successful\n                            st.session_state.authenticated = True\n                            st.session_state.user_data = auth_manager.get_user_data(st.session_state.otp_phone)\n                            \n                            # Clear OTP session states\n                            st.session_state.otp_step = 'phone_input'\n                            st.session_state.otp_phone = ''\n                            st.session_state.show_otp_login = False\n                            \n                            st.success(\"Login successful!\")\n                            st.rerun()\n                        else:\n                            st.error(message)\n            \n            with col2:\n                if st.form_submit_button(\"Resend OTP\"):\n                    success, message = otp_manager.resend_otp(st.session_state.otp_phone)\n                    if success:\n                        st.success(message)\n                    else:\n                        st.error(message)\n            \n            with col3:\n                if st.form_submit_button(\"Change Number\"):\n                    st.session_state.otp_step = 'phone_input'\n                    st.session_state.otp_phone = ''\n                    st.rerun()\n\nif __name__ == \"__main__\":\n    main()","size_bytes":18677},"deploy_to_github.sh":{"content":"#!/bin/bash\n\n# Sharpy Educational App - GitHub Deployment Script\necho \"🚀 Preparing Sharpy Educational App for GitHub deployment...\"\n\n# Create deployment package\necho \"📦 Creating deployment package...\"\nmkdir -p deploy_package\ncp -r app.py utils/ pages/ deploy_package/\ncp render_requirements.txt deploy_package/\ncp Procfile deploy_package/\ncp runtime.txt deploy_package/\ncp .gitignore deploy_package/\ncp README.md deploy_package/\ncp DEPLOYMENT_GUIDE.md deploy_package/\n\necho \"✅ Deployment package created in 'deploy_package' folder\"\necho \"\"\necho \"📋 Next steps:\"\necho \"1. Create a new GitHub repository\"\necho \"2. Upload the contents of 'deploy_package' folder\"\necho \"3. Follow DEPLOYMENT_GUIDE.md for Render.com deployment\"\necho \"\"\necho \"🔗 Your database is already configured for production!\"\necho \"Database URL: postgresql://frudent_db_user:***@dpg-d2hmfaemcj7s73br3hmg-a.oregon-postgres.render.com/frudent_db\"","size_bytes":923},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"matplotlib>=3.10.3\",\n    \"numpy>=2.3.1\",\n    \"openai>=1.97.0\",\n    \"pandas>=2.3.1\",\n    \"plotly>=6.2.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"requests>=2.32.4\",\n    \"scipy>=1.16.0\",\n    \"seaborn>=0.13.2\",\n    \"sqlalchemy>=2.0.41\",\n    \"streamlit>=1.47.0\",\n    \"twilio>=9.6.5\",\n]\n","size_bytes":425},"replit.md":{"content":"# Sharpy Educational App\n\n## Overview\n\nSharpy Educational App is a comprehensive educational platform built with Streamlit that provides mobile authentication via OTP, course management, student journey tracking with coins/rewards, video streaming capabilities, test series functionality, and live classes with notifications. The application serves both premium and non-premium users with differentiated experiences.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nCopyright notice: All content should include copyright to Sharpy and development credit to DG Developers.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Streamlit web application with multi-page architecture\n- **Layout**: Wide layout with responsive design and custom CSS styling\n- **Navigation**: Button-based navigation with session state management\n- **State Management**: Session state for user authentication and data persistence\n- **UI Components**: Custom styled cards, progress bars, floating action buttons\n\n### Backend Architecture\n- **Database**: PostgreSQL with comprehensive user management and course data\n- **Authentication**: Password hashing with SHA-256 and OTP support (Twilio integration ready)\n- **User Management**: Role-based access with premium/non-premium differentiation\n- **Rewards System**: Coin-based gamification for student engagement\n\n### Key Design Patterns\n- **Authentication-First**: User authentication required for main features\n- **Gamification**: Coins and achievements system for user engagement\n- **Premium Differentiation**: Different experiences for premium vs non-premium users\n- **Modular Database Operations**: Centralized database management with utility classes\n\n## Key Components\n\n### 1. Main Application (app.py)\n- **Authentication System**: Login/registration with password and OTP support\n- **Home Dashboard**: Different experiences for premium/non-premium users\n- **Navigation System**: Button-based page navigation\n- **User Interface**: Custom CSS styling with responsive design\n- **Session Management**: User authentication and data persistence\n\n### 2. Authentication Module (utils/auth.py)\n- **User Registration**: Comprehensive signup with educational details\n- **Password Security**: SHA-256 password hashing\n- **OTP Integration**: Ready for Twilio SMS authentication\n- **User Validation**: Phone number uniqueness and credential verification\n\n### 3. Database Management (utils/database.py)\n- **PostgreSQL Integration**: Complete database schema and operations\n- **User Management**: Registration, authentication, and profile data\n- **Course System**: Course enrollment and progress tracking\n- **Rewards System**: Coins, achievements, and activity tracking\n- **Live Classes**: Scheduling and enrollment management\n- **Notifications**: User notification system\n\n### 4. Courses Page (pages/1_Courses.py)\n- **Course Catalog**: Class-specific and cross-class course browsing\n- **Enrollment System**: Course registration and progress tracking\n- **Content Structure**: Chapter-based learning with video lectures\n- **Premium Features**: Differentiated access for premium users\n\n### 5. Journey Tracking (pages/2_Journey.py)\n- **Analytics Dashboard**: Learning progress visualization with Plotly\n- **Achievement System**: Badge-based gamification\n- **Progress Tracking**: Course completion and performance metrics\n- **Goal Setting**: Personal learning objectives and tracking\n\n## Data Flow\n\n### 1. Data Ingestion\n1. User uploads file or connects to data source\n2. DataLoader validates and processes data\n3. Data stored in session state for persistence\n4. Basic statistics calculated and displayed\n\n### 2. AI Analysis Pipeline\n1. Data summary prepared for AI consumption\n2. OpenAI API called with structured prompts\n3. AI responses parsed and formatted\n4. Results stored in session state\n5. Insights displayed with actionable recommendations\n\n### 3. Visualization Workflow\n1. User selects chart type or requests AI suggestions\n2. VisualizationEngine creates Plotly figures\n3. Charts rendered with interactive capabilities\n4. Visualizations saved to session state gallery\n5. Export options provided for sharing\n\n### 4. Code Generation Process\n1. User selects components to include\n2. CodeGenerator creates reproducible Python code\n3. Jupyter notebooks generated with markdown documentation\n4. SQL queries created for database operations\n5. Complete packages exported as ZIP files\n\n## External Dependencies\n\n### Core Libraries\n- **Streamlit**: Web application framework and UI components\n- **Pandas**: Data manipulation and analysis\n- **NumPy**: Numerical computing and array operations\n- **Plotly**: Interactive visualization library\n\n### AI Integration\n- **OpenAI**: GPT-4o model for intelligent analysis and suggestions\n- **JSON**: Data serialization for AI prompt formatting\n\n### Database Support\n- **SQLAlchemy**: Database abstraction layer for multiple database types\n- **Requests**: HTTP client for API data import\n\n### File Processing\n- **IO**: File handling and streaming\n- **ZipFile**: Archive creation for export packages\n- **Base64**: Encoding for file downloads\n\n## Deployment Strategy\n\n### Environment Configuration\n- **API Keys**: OpenAI API key via environment variables\n- **Database**: Optional database connections via environment variables\n- **Debug Mode**: Streamlit development server for local testing\n\n### Production Considerations\n- **Security**: API key validation and secure handling\n- **Performance**: Session state optimization for large datasets\n- **Scalability**: Modular architecture allows for easy feature expansion\n- **Error Handling**: Comprehensive error messages and graceful degradation\n\n### Replit-Specific Setup\n- Environment variables for API keys\n- File upload handling for temporary storage\n- Session state persistence across page navigation\n- Responsive layout for various screen sizes\n\n## Development Notes\n\nThe application follows a modular architecture with clear separation of concerns. Each utility module handles specific functionality, making the codebase maintainable and extensible. The AI integration is designed to be optional, allowing the application to function with limited features when API keys are not available.\n\nThe session state management ensures data persistence across page navigation, providing a seamless user experience. The code generation features make the tool valuable for both exploratory analysis and production workflows.","size_bytes":6463},"run_app.sh":{"content":"#!/bin/bash\n\necho \"Installing dependencies...\"\npip install -r package_requirements.txt\n\necho \"Starting Sharpy Educational App...\"\nstreamlit run app.py --server.port 5000","size_bytes":169},"setup.py":{"content":"\"\"\"\nSetup script for Sharpy Educational App\n\"\"\"\nfrom setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"sharpy-educational-app\",\n    version=\"1.0.0\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    description=\"A comprehensive educational platform with mobile authentication and gamification\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/yourusername/sharpy-educational-app\",\n    packages=find_packages(),\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Education\",\n        \"Topic :: Education :: Computer Aided Instruction (CAI)\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n    python_requires=\">=3.11\",\n    install_requires=[\n        \"streamlit>=1.28.0\",\n        \"psycopg2-binary>=2.9.7\",\n        \"twilio>=8.2.0\",\n        \"plotly>=5.15.0\",\n        \"pandas>=2.0.0\",\n        \"python-dotenv>=1.0.0\",\n    ],\n    extras_require={\n        \"dev\": [\n            \"pytest>=7.0.0\",\n            \"black>=22.0.0\",\n            \"flake8>=5.0.0\",\n        ],\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"sharpy-app=app:main\",\n        ],\n    },\n    include_package_data=True,\n    package_data={\n        \"\": [\"*.toml\", \"*.md\"],\n    },\n)","size_bytes":1483},"deploy_package/DEPLOYMENT_GUIDE.md":{"content":"# Sharpy Educational App - Deployment Guide\n\n## GitHub Export & Render.com Deployment\n\n### Step 1: Export to GitHub\n\n1. **Create a new GitHub repository:**\n   - Go to [GitHub.com](https://github.com) and create a new repository\n   - Name it \"sharpy-educational-app\" or similar\n   - Make it public or private (your choice)\n   - Don't initialize with README since we have files\n\n2. **Download project files from Replit:**\n   - In Replit, go to the file explorer\n   - Click the three dots menu and select \"Download as zip\"\n   - Extract the zip file on your computer\n\n3. **Upload to GitHub:**\n   - Clone your new GitHub repository to your computer\n   - Copy all project files to the repository folder\n   - Commit and push to GitHub:\n   ```bash\n   git add .\n   git commit -m \"Initial commit - Sharpy Educational App\"\n   git push origin main\n   ```\n\n### Step 2: Deploy on Render.com\n\n1. **Create Render.com account:**\n   - Go to [Render.com](https://render.com)\n   - Sign up or log in\n\n2. **Create new Web Service:**\n   - Click \"New +\" button\n   - Select \"Web Service\"\n   - Connect your GitHub repository\n\n3. **Configure deployment settings:**\n   ```\n   Name: sharpy-educational-app\n   Environment: Python 3\n   Build Command: pip install -r render_requirements.txt\n   Start Command: streamlit run app.py --server.port=$PORT --server.address=0.0.0.0\n   ```\n\n4. **Set environment variables:**\n   - In Render dashboard, go to your service\n   - Click \"Environment\" tab\n   - Add these variables:\n   ```\n   DATABASE_URL = postgresql://frudent_db_user:AXNmaumb01w93rfozH5oXEPxVxFKgLhm@dpg-d2hmfaemcj7s73br3hmg-a.oregon-postgres.render.com/frudent_db\n   ```\n\n5. **Deploy:**\n   - Click \"Create Web Service\"\n   - Render will automatically build and deploy your app\n   - You'll get a URL like: `https://sharpy-educational-app.onrender.com`\n\n### Step 3: Optional - Custom Domain\n\n1. **In Render dashboard:**\n   - Go to your service settings\n   - Click \"Custom Domains\"\n   - Add your domain name\n   - Follow DNS configuration instructions\n\n### Files Created for Deployment:\n\n- `render_requirements.txt` - Python dependencies for Render\n- `Procfile` - Process configuration for deployment\n- `runtime.txt` - Python version specification\n- `.gitignore` - Files to exclude from Git\n- `DEPLOYMENT_GUIDE.md` - This guide\n\n### Important Notes:\n\n1. **Database:** The app uses your existing Render PostgreSQL database\n2. **Environment Variables:** Database URL is set via environment variables in production\n3. **Port Configuration:** App automatically uses Render's assigned port\n4. **Dependencies:** All required packages are listed in render_requirements.txt\n\n### Troubleshooting:\n\n- **Build fails:** Check render_requirements.txt for correct package versions\n- **App won't start:** Verify the start command in Render settings\n- **Database connection:** Ensure DATABASE_URL environment variable is set correctly\n- **Authentication issues:** Check if database tables are created properly\n\n### Local Development:\n\nTo run locally after GitHub export:\n```bash\npip install -r render_requirements.txt\nstreamlit run app.py\n```\n\nThe app will automatically connect to your Render database or use fallback mode for testing.","size_bytes":3188},"deploy_package/README.md":{"content":"# Sharpy Educational App\n\nA comprehensive educational platform built with Streamlit featuring mobile authentication, course management, student journey tracking with rewards, and live classes.\n\n## Features\n\n### 🔐 Authentication System\n- Phone number-based registration\n- Password authentication with secure hashing\n- OTP support (Twilio integration ready)\n- Premium/Non-premium user differentiation\n\n### 📚 Course Management\n- Class-specific course catalog\n- Course enrollment and progress tracking\n- Video lecture support\n- Chapter-based learning structure\n\n### 🎯 Student Journey Tracking\n- Interactive progress dashboard with analytics\n- Coin-based reward system\n- Achievement badges and gamification\n- Learning goal setting and tracking\n\n### 📺 Video Content\n- Educational shorts and reels\n- Video streaming capabilities\n- Interactive content browsing\n\n### 🔔 Notifications & Communication\n- Real-time notification system\n- Live class scheduling and reminders\n- User engagement tracking\n\n### 📊 Analytics & Insights\n- Learning progress visualization\n- Performance tracking with Plotly charts\n- Educational analytics dashboard\n\n## Tech Stack\n\n- **Frontend:** Streamlit web application\n- **Database:** PostgreSQL with psycopg2\n- **Authentication:** SHA-256 password hashing\n- **Visualization:** Plotly for interactive charts\n- **SMS Integration:** Twilio (optional)\n- **Deployment:** Render.com ready\n\n## Quick Start\n\n### Local Development\n```bash\n# Install dependencies\npip install -r render_requirements.txt\n\n# Run the application\nstreamlit run app.py\n```\n\n### Database Setup\nThe app automatically creates required database tables on first run:\n- users\n- courses\n- subjects\n- user_enrollments\n- live_classes\n- notifications\n\n### Environment Variables\n```bash\nDATABASE_URL=postgresql://username:password@host:port/database\nTWILIO_ACCOUNT_SID=your_account_sid (optional)\nTWILIO_AUTH_TOKEN=your_auth_token (optional)\nTWILIO_PHONE_NUMBER=your_phone_number (optional)\n```\n\n## Deployment\n\nSee [DEPLOYMENT_GUIDE.md](DEPLOYMENT_GUIDE.md) for detailed instructions on deploying to Render.com.\n\n## Project Structure\n\n```\nsharpy-educational-app/\n├── app.py                 # Main Streamlit application\n├── utils/\n│   ├── auth.py           # Authentication utilities\n│   ├── database.py       # Database operations\n│   └── otp_manager.py    # OTP management (Twilio)\n├── pages/\n│   ├── 1_Courses.py      # Course catalog and management\n│   ├── 2_Journey.py      # Student progress tracking\n│   ├── 3_Notifications.py # Notification center\n│   └── 4_Shorts.py       # Educational video content\n├── render_requirements.txt # Python dependencies\n├── Procfile              # Render.com process configuration\n├── runtime.txt           # Python version\n└── README.md             # This file\n```\n\n## Key Features Details\n\n### Authentication Flow\n1. User registration with phone number validation\n2. Secure password hashing with SHA-256\n3. Optional OTP verification via Twilio\n4. Session management with Streamlit\n\n### Course System\n- Hierarchical course structure (Class → Subject → Course → Chapters)\n- Progress tracking with percentage completion\n- Premium content access control\n- Enrollment management\n\n### Gamification\n- Coin-based reward system for engagement\n- Achievement badges for milestones\n- Progress visualization with charts\n- Learning streak tracking\n\n### Database Schema\nThe app uses a comprehensive PostgreSQL schema with proper relationships:\n- User management with profile data\n- Course catalog with enrollment tracking\n- Notification system for engagement\n- Live class scheduling\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## License\n\nThis project is open source and available under the MIT License.\n\n## Support\n\nFor issues and questions, please create an issue in the GitHub repository.","size_bytes":4000},"deploy_package/app.py":{"content":"import streamlit as st\nimport pandas as pd\nimport os\nfrom utils.auth import AuthManager\nfrom utils.database import DatabaseManager\nfrom utils.otp_manager import OTPManager\n\n# Configure page\nst.set_page_config(\n    page_title=\"Sharpy Education\",\n    page_icon=\"📚\",\n    layout=\"wide\",\n    initial_sidebar_state=\"auto\"\n)\n\n# Initialize session state\nif 'authenticated' not in st.session_state:\n    st.session_state.authenticated = False\nif 'user_data' not in st.session_state:\n    st.session_state.user_data = None\nif 'current_page' not in st.session_state:\n    st.session_state.current_page = 'home'\n\n# Initialize managers\nauth_manager = AuthManager()\ndb_manager = DatabaseManager()\notp_manager = OTPManager()\n\n# Custom CSS for better styling\nst.markdown(\"\"\"\n<style>\n    .main-header {\n        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 1rem;\n        border-radius: 10px;\n        margin-bottom: 2rem;\n        text-align: center;\n    }\n    .nav-button {\n        background: #667eea;\n        color: white;\n        border: none;\n        padding: 0.5rem 1rem;\n        margin: 0.2rem;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n    .nav-button:hover {\n        background: #5a67d8;\n    }\n    .course-card {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 10px;\n        padding: 1rem;\n        margin: 1rem 0;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    .coins-display {\n        background: #ffd700;\n        color: #333;\n        padding: 0.5rem 1rem;\n        border-radius: 20px;\n        font-weight: bold;\n        display: inline-block;\n        margin: 0.5rem 0;\n    }\n    .floating-buttons {\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        z-index: 1000;\n    }\n    .floating-btn {\n        background: #25d366;\n        color: white;\n        border: none;\n        border-radius: 50%;\n        width: 60px;\n        height: 60px;\n        margin: 5px;\n        cursor: pointer;\n        font-size: 20px;\n    }\n    .floating-btn.call {\n        background: #007bff;\n    }\n</style>\n\"\"\", unsafe_allow_html=True)\n\ndef show_auth_page():\n    \"\"\"Show authentication page\"\"\"\n    st.markdown('<div class=\"main-header\"><h1>📚 Welcome to Sharpy Education</h1><p>Your Gateway to Academic Excellence</p></div>', unsafe_allow_html=True)\n    \n    tab1, tab2 = st.tabs([\"Login\", \"Register\"])\n    \n    with tab1:\n        st.subheader(\"Login to Your Account\")\n        \n        # Login form\n        with st.form(\"login_form\"):\n            phone = st.text_input(\"Phone Number\", placeholder=\"+91XXXXXXXXXX\")\n            password = st.text_input(\"Password\", type=\"password\")\n            \n            if st.form_submit_button(\"Login\", type=\"primary\"):\n                if auth_manager.login_user(phone, password):\n                    st.session_state.authenticated = True\n                    st.session_state.user_data = auth_manager.get_user_data(phone)\n                    st.success(\"Login successful!\")\n                    st.rerun()\n                else:\n                    st.error(\"Invalid credentials. Please try again.\")\n        \n        st.markdown(\"---\")\n        if st.button(\"Login with OTP\"):\n            st.session_state.show_otp_login = True\n            st.rerun()\n        \n        # OTP Login Section\n        if st.session_state.get('show_otp_login', False):\n            show_otp_login_section()\n    \n    with tab2:\n        st.subheader(\"Create New Account\")\n        \n        # Registration form\n        with st.form(\"register_form\"):\n            st.write(\"**Personal Information**\")\n            name = st.text_input(\"Full Name\")\n            phone = st.text_input(\"Phone Number\", placeholder=\"+91XXXXXXXXXX\")\n            email = st.text_input(\"Email Address\")\n            \n            st.write(\"**Educational Details**\")\n            school = st.text_input(\"School Name\")\n            class_level = st.selectbox(\"Class\", [\n                \"Class 6\", \"Class 7\", \"Class 8\", \"Class 9\", \"Class 10\", \n                \"Class 11\", \"Class 12\", \"Engineering Entrance\", \"Medical Entrance\"\n            ])\n            address = st.text_area(\"Address\")\n            \n            st.write(\"**Account Security**\")\n            password = st.text_input(\"Create Password\", type=\"password\")\n            confirm_password = st.text_input(\"Confirm Password\", type=\"password\")\n            \n            agree_terms = st.checkbox(\"I agree to the Terms and Conditions\")\n            \n            if st.form_submit_button(\"Register\", type=\"primary\"):\n                if password != confirm_password:\n                    st.error(\"Passwords don't match!\")\n                elif not agree_terms:\n                    st.error(\"Please agree to the terms and conditions.\")\n                elif auth_manager.register_user(name, phone, email, school, class_level, address, password):\n                    st.success(\"Registration successful! Please login with your credentials.\")\n                    # Clear registration form\n                    st.session_state.registration_success = True\n                else:\n                    st.error(\"Registration failed. Phone number might already exist.\")\n\ndef show_navigation():\n    \"\"\"Show navigation for authenticated users\"\"\"\n    col1, col2, col3, col4, col5, col6 = st.columns([1,1,1,1,1,1])\n    \n    with col1:\n        if st.button(\"🏠 Home\", key=\"nav_home\"):\n            st.session_state.current_page = 'home'\n            st.rerun()\n    \n    with col2:\n        if st.button(\"📚 Courses\", key=\"nav_courses\"):\n            st.session_state.current_page = 'courses'\n            st.rerun()\n    \n    with col3:\n        if st.button(\"🎯 My Journey\", key=\"nav_journey\"):\n            st.session_state.current_page = 'journey'\n            st.rerun()\n    \n    with col4:\n        if st.button(\"🔔 Notifications\", key=\"nav_notifications\"):\n            st.session_state.current_page = 'notifications'\n            st.rerun()\n    \n    with col5:\n        if st.button(\"🎬 Shorts\", key=\"nav_shorts\"):\n            st.session_state.current_page = 'shorts'\n            st.rerun()\n    \n    with col6:\n        if st.button(\"🚪 Logout\", key=\"logout\"):\n            st.session_state.authenticated = False\n            st.session_state.user_data = None\n            st.session_state.current_page = 'home'\n            st.rerun()\n\ndef show_home_page():\n    \"\"\"Show home page based on user premium status\"\"\"\n    user_data = st.session_state.user_data\n    \n    # Header with user info\n    col1, col2 = st.columns([3, 1])\n    with col1:\n        st.markdown(f'<div class=\"main-header\"><h2>Welcome back, {user_data[\"name\"]}!</h2></div>', unsafe_allow_html=True)\n    \n    with col2:\n        coins = db_manager.get_user_coins(user_data['id'])\n        st.markdown(f'<div class=\"coins-display\">🪙 {coins} Coins</div>', unsafe_allow_html=True)\n    \n    is_premium = db_manager.is_premium_user(user_data['id'])\n    \n    if not is_premium:\n        # Non-premium user home page\n        st.subheader(\"🎯 Unlock Your Potential with Sharpy Premium!\")\n        \n        # Promotional banner\n        st.info(\"Join thousands of successful students who have transformed their academic journey with Sharpy's comprehensive courses!\")\n        \n        # Free test series\n        st.subheader(\"📝 Free Test Series\")\n        if st.button(\"Apply For A Test\", type=\"primary\"):\n            show_test_series_selection()\n        \n        # YouTube videos section\n        st.subheader(\"📹 Featured Video Lessons\")\n        show_video_thumbnails()\n        \n        # Testimonials\n        st.subheader(\"🌟 SHARPY-ত পঢ়া Student-ৰ মনৰ ভাৱ\")\n        show_testimonials()\n        \n    else:\n        # Premium user home page\n        # Scheduled live classes\n        st.subheader(\"🎥 Today's Live Classes\")\n        show_live_classes()\n        \n        # Enrolled courses\n        st.subheader(\"📚 Your Enrolled Courses\")\n        show_enrolled_courses()\n        \n        # YouTube videos section\n        st.subheader(\"📹 Latest Video Lessons\")\n        show_video_thumbnails()\n        \n        # Testimonials\n        st.subheader(\"🌟 SHARPY-ত পঢ়া Student-ৰ মনৰ ভাৱ\")\n        show_testimonials()\n\ndef show_test_series_selection():\n    \"\"\"Show subject-wise test series for the user's class\"\"\"\n    user_data = st.session_state.user_data\n    class_level = user_data['class']\n    \n    st.subheader(f\"📝 Test Series for {class_level}\")\n    \n    # Get subjects based on class\n    subjects = db_manager.get_subjects_by_class(class_level)\n    \n    col1, col2, col3 = st.columns(3)\n    for i, subject in enumerate(subjects):\n        with [col1, col2, col3][i % 3]:\n            with st.container():\n                st.markdown(f'<div class=\"course-card\">', unsafe_allow_html=True)\n                st.write(f\"**{subject['name']}**\")\n                st.write(f\"Duration: {subject.get('duration', '60')} minutes\")\n                st.write(f\"Questions: {subject.get('questions', '50')}\")\n                \n                if st.button(f\"Start {subject['name']} Test\", key=f\"test_{subject['id']}\"):\n                    st.success(f\"Starting {subject['name']} test...\")\n                    # Award coins for test attempt\n                    db_manager.add_user_coins(user_data['id'], 5)\n                    st.info(\"You earned 5 coins for attempting the test!\")\n                \n                st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_video_thumbnails():\n    \"\"\"Show swipeable video thumbnails\"\"\"\n    videos = [\n        {\"title\": \"Mathematics Basics\", \"thumbnail\": \"📊\", \"duration\": \"15:30\"},\n        {\"title\": \"Physics Concepts\", \"thumbnail\": \"🔬\", \"duration\": \"22:45\"},\n        {\"title\": \"Chemistry Formulas\", \"thumbnail\": \"⚗️\", \"duration\": \"18:20\"},\n        {\"title\": \"Biology Systems\", \"thumbnail\": \"🧬\", \"duration\": \"25:10\"},\n    ]\n    \n    cols = st.columns(len(videos))\n    for i, video in enumerate(videos):\n        with cols[i]:\n            st.markdown(f\"\"\"\n            <div class=\"course-card\" style=\"text-align: center;\">\n                <div style=\"font-size: 3rem;\">{video['thumbnail']}</div>\n                <h4>{video['title']}</h4>\n                <p>Duration: {video['duration']}</p>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Watch\", key=f\"video_{i}\"):\n                st.success(f\"Playing: {video['title']}\")\n                # Award coins for watching video\n                db_manager.add_user_coins(st.session_state.user_data['id'], 6)\n                st.info(\"You earned 6 coins for watching this video!\")\n\ndef show_testimonials():\n    \"\"\"Show student testimonials\"\"\"\n    testimonials = [\n        {\"name\": \"Rahul Sharma\", \"class\": \"Class 12\", \"text\": \"Sharpy helped me improve my marks by 40%!\"},\n        {\"name\": \"Priya Das\", \"class\": \"Class 10\", \"text\": \"The live classes are amazing and interactive.\"},\n        {\"name\": \"Amit Singh\", \"class\": \"Engineering\", \"text\": \"Best platform for competitive exam preparation.\"},\n    ]\n    \n    for testimonial in testimonials:\n        st.markdown(f\"\"\"\n        <div class=\"course-card\">\n            <h4>\"{testimonial['text']}\"</h4>\n            <p><strong>- {testimonial['name']}</strong>, {testimonial['class']}</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\ndef show_live_classes():\n    \"\"\"Show scheduled live classes for premium users\"\"\"\n    classes = db_manager.get_today_live_classes(st.session_state.user_data['id'])\n    \n    if not classes:\n        st.info(\"No live classes scheduled for today.\")\n        return\n    \n    for class_info in classes:\n        col1, col2, col3 = st.columns([2, 1, 1])\n        \n        with col1:\n            st.write(f\"**{class_info['subject']} - {class_info['topic']}**\")\n            st.write(f\"Teacher: {class_info['teacher']}\")\n        \n        with col2:\n            st.write(f\"⏰ {class_info['time']}\")\n        \n        with col3:\n            if st.button(\"Join Class\", key=f\"class_{class_info['id']}\"):\n                st.success(\"Joining live class...\")\n\ndef show_enrolled_courses():\n    \"\"\"Show user's enrolled courses\"\"\"\n    courses = db_manager.get_user_courses(st.session_state.user_data['id'])\n    \n    if not courses:\n        st.info(\"You haven't enrolled in any courses yet.\")\n        return\n    \n    cols = st.columns(3)\n    for i, course in enumerate(courses):\n        with cols[i % 3]:\n            st.markdown(f\"\"\"\n            <div class=\"course-card\">\n                <h4>{course['name']}</h4>\n                <p>Progress: {course['progress']}%</p>\n                <div style=\"background: #e2e8f0; border-radius: 10px; height: 10px;\">\n                    <div style=\"background: #667eea; height: 100%; width: {course['progress']}%; border-radius: 10px;\"></div>\n                </div>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Continue Learning\", key=f\"course_{course['id']}\"):\n                st.success(f\"Opening {course['name']}...\")\n\ndef show_floating_buttons():\n    \"\"\"Show floating action buttons for call and WhatsApp\"\"\"\n    st.markdown(\"\"\"\n    <div class=\"floating-buttons\">\n        <button class=\"floating-btn call\" onclick=\"window.open('tel:+919876543210')\" title=\"Call Us\">📞</button>\n        <button class=\"floating-btn\" onclick=\"window.open('https://wa.me/919876543210')\" title=\"WhatsApp\">📱</button>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n\n# Main application logic\ndef main():\n    if not st.session_state.authenticated:\n        show_auth_page()\n    else:\n        show_navigation()\n        \n        if st.session_state.current_page == 'home':\n            show_home_page()\n        elif st.session_state.current_page == 'courses':\n            exec(open('pages/1_Courses.py').read())\n        elif st.session_state.current_page == 'journey':\n            exec(open('pages/2_Journey.py').read())\n        elif st.session_state.current_page == 'notifications':\n            exec(open('pages/3_Notifications.py').read())\n        elif st.session_state.current_page == 'shorts':\n            exec(open('pages/4_Shorts.py').read())\n        \n        show_floating_buttons()\n\ndef show_otp_login_section():\n    \"\"\"Show OTP-based login interface\"\"\"\n    st.subheader(\"🔐 Login with OTP\")\n    \n    # Initialize OTP session states\n    if 'otp_step' not in st.session_state:\n        st.session_state.otp_step = 'phone_input'\n    if 'otp_phone' not in st.session_state:\n        st.session_state.otp_phone = ''\n    \n    if st.session_state.otp_step == 'phone_input':\n        with st.form(\"otp_phone_form\"):\n            phone = st.text_input(\"Enter your registered phone number\", placeholder=\"+91XXXXXXXXXX\")\n            \n            col1, col2 = st.columns([1, 1])\n            with col1:\n                if st.form_submit_button(\"Send OTP\", type=\"primary\"):\n                    # Format and validate phone number\n                    formatted_phone = otp_manager.format_phone_number(phone)\n                    \n                    if not otp_manager.is_valid_phone_number(formatted_phone):\n                        st.error(\"Please enter a valid phone number (e.g., +919876543210)\")\n                    elif not db_manager.user_exists(formatted_phone):\n                        st.error(\"Phone number not registered. Please create an account first.\")\n                    else:\n                        # Generate and send OTP\n                        otp = otp_manager.generate_otp()\n                        if otp_manager.send_otp(formatted_phone, otp):\n                            otp_manager.store_otp(formatted_phone, otp)\n                            st.session_state.otp_phone = formatted_phone\n                            st.session_state.otp_step = 'otp_input'\n                            st.rerun()\n                        else:\n                            st.error(\"Failed to send OTP. Please try again.\")\n            \n            with col2:\n                if st.form_submit_button(\"Back to Login\"):\n                    st.session_state.show_otp_login = False\n                    st.rerun()\n    \n    elif st.session_state.otp_step == 'otp_input':\n        st.info(f\"OTP sent to {st.session_state.otp_phone}\")\n        \n        with st.form(\"otp_verify_form\"):\n            otp_input = st.text_input(\"Enter 6-digit OTP\", max_chars=6)\n            \n            col1, col2, col3 = st.columns([1, 1, 1])\n            \n            with col1:\n                if st.form_submit_button(\"Verify OTP\", type=\"primary\"):\n                    if len(otp_input) != 6 or not otp_input.isdigit():\n                        st.error(\"Please enter a valid 6-digit OTP\")\n                    else:\n                        success, message = otp_manager.verify_otp(st.session_state.otp_phone, otp_input)\n                        if success:\n                            # Login successful\n                            st.session_state.authenticated = True\n                            st.session_state.user_data = auth_manager.get_user_data(st.session_state.otp_phone)\n                            \n                            # Clear OTP session states\n                            st.session_state.otp_step = 'phone_input'\n                            st.session_state.otp_phone = ''\n                            st.session_state.show_otp_login = False\n                            \n                            st.success(\"Login successful!\")\n                            st.rerun()\n                        else:\n                            st.error(message)\n            \n            with col2:\n                if st.form_submit_button(\"Resend OTP\"):\n                    success, message = otp_manager.resend_otp(st.session_state.otp_phone)\n                    if success:\n                        st.success(message)\n                    else:\n                        st.error(message)\n            \n            with col3:\n                if st.form_submit_button(\"Change Number\"):\n                    st.session_state.otp_step = 'phone_input'\n                    st.session_state.otp_phone = ''\n                    st.rerun()\n\nif __name__ == \"__main__\":\n    main()","size_bytes":18129},"pages/1_Courses.py":{"content":"import streamlit as st\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Courses\", page_icon=\"📚\", layout=\"wide\")\n\ndef show_courses_page():\n    \"\"\"Show courses page with class-specific and other classes courses\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to access courses.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"📚 Courses\")\n    st.markdown(\"Explore our comprehensive course offerings\")\n    \n    # Tabs for current class and other classes\n    tab1, tab2, tab3 = st.tabs([\"My Class Courses\", \"Other Classes\", \"Enrolled Courses\"])\n    \n    with tab1:\n        st.subheader(f\"Courses for {user_data['class']}\")\n        show_class_courses(user_data['class'], db_manager, user_data['id'])\n    \n    with tab2:\n        st.subheader(\"Explore Other Classes\")\n        \n        # Class selector\n        all_classes = [\n            \"Class 6\", \"Class 7\", \"Class 8\", \"Class 9\", \"Class 10\", \n            \"Class 11\", \"Class 12\", \"Engineering Entrance\", \"Medical Entrance\"\n        ]\n        \n        other_classes = [cls for cls in all_classes if cls != user_data['class']]\n        selected_class = st.selectbox(\"Select Class:\", other_classes)\n        \n        if selected_class:\n            show_class_courses(selected_class, db_manager, user_data['id'])\n    \n    with tab3:\n        st.subheader(\"Your Enrolled Courses\")\n        show_enrolled_courses(db_manager, user_data['id'])\n\ndef show_class_courses(class_level: str, db_manager: DatabaseManager, user_id: int):\n    \"\"\"Display courses for a specific class\"\"\"\n    try:\n        conn = db_manager.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            SELECT c.*, \n                   CASE WHEN ue.user_id IS NOT NULL THEN TRUE ELSE FALSE END as is_enrolled\n            FROM courses c\n            LEFT JOIN user_enrollments ue ON c.id = ue.course_id AND ue.user_id = %s\n            WHERE c.class = %s\n            ORDER BY c.name\n        \"\"\", (user_id, class_level))\n        \n        courses = cursor.fetchall()\n        cursor.close()\n        conn.close()\n        \n        if not courses:\n            st.info(f\"No courses available for {class_level} yet.\")\n            return\n        \n        # Display courses in grid\n        cols = st.columns(2)\n        for i, course in enumerate(courses):\n            with cols[i % 2]:\n                with st.container():\n                    st.markdown(\"\"\"\n                    <div style=\"border: 1px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 10px 0; background: white;\">\n                    \"\"\", unsafe_allow_html=True)\n                    \n                    st.subheader(course[1])  # course name\n                    st.write(course[2])  # description\n                    \n                    col1, col2 = st.columns([1, 1])\n                    with col1:\n                        st.write(f\"**Class:** {course[3]}\")\n                        st.write(f\"**Price:** ₹{course[4]:,.2f}\")\n                    \n                    with col2:\n                        if course[5]:  # is_premium\n                            st.markdown(\"🌟 **Premium Course**\")\n                        else:\n                            st.markdown(\"🆓 **Free Course**\")\n                    \n                    # Enrollment button\n                    if course[7]:  # is_enrolled\n                        st.success(\"✅ Already Enrolled\")\n                        if st.button(\"Continue Learning\", key=f\"continue_{course[0]}\"):\n                            st.success(f\"Opening {course[1]}...\")\n                    else:\n                        if st.button(f\"Enroll Now\", key=f\"enroll_{course[0]}\", type=\"primary\"):\n                            if enroll_user_in_course(db_manager, user_id, course[0]):\n                                st.success(\"Successfully enrolled! Refreshing page...\")\n                                st.rerun()\n                            else:\n                                st.error(\"Enrollment failed. Please try again.\")\n                    \n                    st.markdown(\"</div>\", unsafe_allow_html=True)\n                    \n    except Exception as e:\n        st.error(f\"Error loading courses: {e}\")\n\ndef show_enrolled_courses(db_manager: DatabaseManager, user_id: int):\n    \"\"\"Display user's enrolled courses with progress\"\"\"\n    courses = db_manager.get_user_courses(user_id)\n    \n    if not courses:\n        st.info(\"You haven't enrolled in any courses yet. Check out our course offerings!\")\n        return\n    \n    for course in courses:\n        with st.container():\n            st.markdown(\"\"\"\n            <div style=\"border: 1px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 10px 0; background: white;\">\n            \"\"\", unsafe_allow_html=True)\n            \n            col1, col2, col3 = st.columns([2, 1, 1])\n            \n            with col1:\n                st.subheader(course['name'])\n                st.write(course['description'])\n            \n            with col2:\n                st.write(f\"**Progress: {course['progress']}%**\")\n                # Progress bar\n                progress_html = f\"\"\"\n                <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%;\">\n                    <div style=\"background: #4CAF50; height: 100%; width: {course['progress']}%; border-radius: 10px;\"></div>\n                </div>\n                \"\"\"\n                st.markdown(progress_html, unsafe_allow_html=True)\n            \n            with col3:\n                if st.button(\"Continue\", key=f\"continue_enrolled_{course['id']}\"):\n                    show_course_content(course)\n            \n            st.markdown(\"</div>\", unsafe_allow_html=True)\n\ndef enroll_user_in_course(db_manager: DatabaseManager, user_id: int, course_id: int) -> bool:\n    \"\"\"Enroll user in a course\"\"\"\n    try:\n        conn = db_manager.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            INSERT INTO user_enrollments (user_id, course_id, progress)\n            VALUES (%s, %s, 0)\n        \"\"\", (user_id, course_id))\n        conn.commit()\n        cursor.close()\n        conn.close()\n        \n        # Add notification\n        db_manager.add_notification(\n            user_id, \n            \"Course Enrollment\", \n            \"Successfully enrolled in new course!\", \n            \"success\"\n        )\n        \n        return True\n    except Exception as e:\n        print(f\"Enrollment error: {e}\")\n        return False\n\ndef show_course_content(course: dict):\n    \"\"\"Show course content structure\"\"\"\n    st.subheader(f\"📖 {course['name']}\")\n    \n    # Sample course structure\n    chapters = [\n        {\n            \"name\": \"Introduction to Concepts\",\n            \"lectures\": [\n                {\"name\": \"Getting Started\", \"duration\": \"15:30\", \"completed\": True},\n                {\"name\": \"Basic Principles\", \"duration\": \"22:45\", \"completed\": True},\n                {\"name\": \"Practice Problems\", \"duration\": \"18:20\", \"completed\": False},\n            ]\n        },\n        {\n            \"name\": \"Advanced Topics\",\n            \"lectures\": [\n                {\"name\": \"Complex Theories\", \"duration\": \"25:10\", \"completed\": False},\n                {\"name\": \"Real-world Applications\", \"duration\": \"20:35\", \"completed\": False},\n                {\"name\": \"Case Studies\", \"duration\": \"30:15\", \"completed\": False},\n            ]\n        },\n        {\n            \"name\": \"Assessment and Practice\",\n            \"lectures\": [\n                {\"name\": \"Practice Test 1\", \"duration\": \"60:00\", \"completed\": False},\n                {\"name\": \"Mock Exam\", \"duration\": \"120:00\", \"completed\": False},\n            ]\n        }\n    ]\n    \n    for chapter in chapters:\n        with st.expander(f\"📚 {chapter['name']}\"):\n            for lecture in chapter['lectures']:\n                col1, col2, col3 = st.columns([3, 1, 1])\n                \n                with col1:\n                    if lecture['completed']:\n                        st.write(f\"✅ {lecture['name']}\")\n                    else:\n                        st.write(f\"📹 {lecture['name']}\")\n                \n                with col2:\n                    st.write(f\"⏱️ {lecture['duration']}\")\n                \n                with col3:\n                    if lecture['completed']:\n                        if st.button(\"Review\", key=f\"review_{lecture['name']}\"):\n                            st.success(f\"Reviewing: {lecture['name']}\")\n                    else:\n                        if st.button(\"Start\", key=f\"start_{lecture['name']}\", type=\"primary\"):\n                            st.success(f\"Starting: {lecture['name']}\")\n                            # Award coins for watching\n                            db_manager = DatabaseManager()\n                            db_manager.add_user_coins(st.session_state.user_data['id'], 6)\n\nif __name__ == \"__main__\":\n    show_courses_page()","size_bytes":8962},"pages/2_Journey.py":{"content":"import streamlit as st\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime, timedelta\nimport pandas as pd\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"My Journey\", page_icon=\"🎯\", layout=\"wide\")\n\ndef show_journey_page():\n    \"\"\"Show user's learning journey and analytics\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to view your learning journey.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🎯 My Learning Journey\")\n    st.markdown(f\"Track your progress and achievements, {user_data['name']}!\")\n    \n    # User stats overview\n    col1, col2, col3, col4 = st.columns(4)\n    \n    with col1:\n        coins = db_manager.get_user_coins(user_data['id'])\n        st.metric(\"Total Coins Earned\", f\"🪙 {coins}\")\n    \n    with col2:\n        # Mock data for videos watched\n        videos_watched = 45  # In real app, this would come from database\n        st.metric(\"Videos Watched\", f\"📹 {videos_watched}\")\n    \n    with col3:\n        # Mock data for tests taken\n        tests_taken = 12  # In real app, this would come from database\n        st.metric(\"Tests Completed\", f\"📝 {tests_taken}\")\n    \n    with col4:\n        # Mock data for study time\n        study_hours = 78  # In real app, this would come from database\n        st.metric(\"Study Hours\", f\"⏰ {study_hours}h\")\n    \n    st.markdown(\"---\")\n    \n    # Journey sections\n    tab1, tab2, tab3, tab4 = st.tabs([\"📊 Analytics\", \"🏆 Achievements\", \"📈 Progress\", \"🎯 Goals\"])\n    \n    with tab1:\n        show_analytics_section(user_data, db_manager)\n    \n    with tab2:\n        show_achievements_section(user_data, db_manager)\n    \n    with tab3:\n        show_progress_section(user_data, db_manager)\n    \n    with tab4:\n        show_goals_section(user_data, db_manager)\n\ndef show_analytics_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show detailed analytics\"\"\"\n    st.subheader(\"📊 Your Learning Analytics\")\n    \n    # Daily activity chart\n    st.write(\"### Daily Activity (Last 30 Days)\")\n    \n    # Generate mock daily activity data\n    dates = pd.date_range(end=datetime.now(), periods=30, freq='D')\n    activity_data = {\n        'Date': dates,\n        'Videos Watched': [max(0, int(5 * (0.5 + 0.5 * abs(hash(str(date)) % 100) / 100))) for date in dates],\n        'Tests Taken': [max(0, int(2 * (0.3 + 0.7 * abs(hash(str(date) + 'test') % 100) / 100))) for date in dates],\n        'Study Hours': [max(0, int(8 * (0.4 + 0.6 * abs(hash(str(date) + 'hours') % 100) / 100))) for date in dates]\n    }\n    \n    df_activity = pd.DataFrame(activity_data)\n    \n    # Activity line chart\n    fig_activity = go.Figure()\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Videos Watched'],\n        mode='lines+markers',\n        name='Videos Watched',\n        line=dict(color='#FF6B6B')\n    ))\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Tests Taken'],\n        mode='lines+markers',\n        name='Tests Taken',\n        line=dict(color='#4ECDC4')\n    ))\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Study Hours'],\n        mode='lines+markers',\n        name='Study Hours',\n        line=dict(color='#45B7D1')\n    ))\n    \n    fig_activity.update_layout(\n        title=\"Daily Learning Activity\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Count\",\n        hovermode='x unified'\n    )\n    \n    st.plotly_chart(fig_activity, use_container_width=True)\n    \n    # Subject performance\n    st.write(\"### Subject-wise Performance\")\n    \n    subjects_data = {\n        'Subject': ['Mathematics', 'Physics', 'Chemistry', 'Biology'],\n        'Average Score': [78, 82, 75, 85],\n        'Tests Taken': [4, 3, 2, 3]\n    }\n    \n    df_subjects = pd.DataFrame(subjects_data)\n    \n    fig_subjects = px.bar(\n        df_subjects, \n        x='Subject', \n        y='Average Score',\n        color='Average Score',\n        title=\"Average Scores by Subject\",\n        color_continuous_scale='Blues'\n    )\n    \n    st.plotly_chart(fig_subjects, use_container_width=True)\n    \n    # Weekly pattern\n    st.write(\"### Weekly Study Pattern\")\n    \n    weekly_data = {\n        'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n        'Study Hours': [6, 5, 7, 6, 4, 8, 5]\n    }\n    \n    fig_weekly = px.bar(\n        x=weekly_data['Day'],\n        y=weekly_data['Study Hours'],\n        title=\"Study Hours by Day of Week\",\n        color=weekly_data['Study Hours'],\n        color_continuous_scale='Greens'\n    )\n    \n    st.plotly_chart(fig_weekly, use_container_width=True)\n\ndef show_achievements_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show user achievements and badges\"\"\"\n    st.subheader(\"🏆 Your Achievements\")\n    \n    # Achievement badges\n    achievements = [\n        {\n            \"title\": \"First Steps\",\n            \"description\": \"Completed your first video lesson\",\n            \"icon\": \"🌟\",\n            \"earned\": True,\n            \"date\": \"2024-01-15\"\n        },\n        {\n            \"title\": \"Test Taker\",\n            \"description\": \"Completed your first test\",\n            \"icon\": \"📝\",\n            \"earned\": True,\n            \"date\": \"2024-01-18\"\n        },\n        {\n            \"title\": \"Consistent Learner\",\n            \"description\": \"Studied for 7 consecutive days\",\n            \"icon\": \"🔥\",\n            \"earned\": True,\n            \"date\": \"2024-01-25\"\n        },\n        {\n            \"title\": \"High Scorer\",\n            \"description\": \"Scored above 90% in a test\",\n            \"icon\": \"🎯\",\n            \"earned\": False,\n            \"date\": None\n        },\n        {\n            \"title\": \"Video Master\",\n            \"description\": \"Watched 50 video lessons\",\n            \"icon\": \"📺\",\n            \"earned\": True,\n            \"date\": \"2024-02-10\"\n        },\n        {\n            \"title\": \"Coin Collector\",\n            \"description\": \"Earned 100 coins\",\n            \"icon\": \"🪙\",\n            \"earned\": True,\n            \"date\": \"2024-02-05\"\n        }\n    ]\n    \n    # Display achievements in grid\n    cols = st.columns(3)\n    for i, achievement in enumerate(achievements):\n        with cols[i % 3]:\n            if achievement['earned']:\n                st.markdown(f\"\"\"\n                <div style=\"\n                    border: 2px solid #4CAF50;\n                    border-radius: 15px;\n                    padding: 20px;\n                    margin: 10px 0;\n                    background: linear-gradient(135deg, #e8f5e8 0%, #ffffff 100%);\n                    text-align: center;\n                \">\n                    <div style=\"font-size: 3rem;\">{achievement['icon']}</div>\n                    <h4 style=\"color: #4CAF50;\">{achievement['title']}</h4>\n                    <p>{achievement['description']}</p>\n                    <small style=\"color: #666;\">Earned on {achievement['date']}</small>\n                </div>\n                \"\"\", unsafe_allow_html=True)\n            else:\n                st.markdown(f\"\"\"\n                <div style=\"\n                    border: 2px solid #ddd;\n                    border-radius: 15px;\n                    padding: 20px;\n                    margin: 10px 0;\n                    background: #f9f9f9;\n                    text-align: center;\n                    opacity: 0.6;\n                \">\n                    <div style=\"font-size: 3rem; filter: grayscale(100%);\">{achievement['icon']}</div>\n                    <h4 style=\"color: #999;\">{achievement['title']}</h4>\n                    <p>{achievement['description']}</p>\n                    <small style=\"color: #999;\">Not earned yet</small>\n                </div>\n                \"\"\", unsafe_allow_html=True)\n    \n    # Achievement progress\n    earned_count = sum(1 for a in achievements if a['earned'])\n    total_count = len(achievements)\n    \n    st.markdown(f\"\"\"\n    <div style=\"text-align: center; margin: 30px 0;\">\n        <h3>Achievement Progress: {earned_count}/{total_count}</h3>\n        <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%; margin: 10px 0;\">\n            <div style=\"background: #4CAF50; height: 100%; width: {(earned_count/total_count)*100}%; border-radius: 10px;\"></div>\n        </div>\n        <p>You've earned {earned_count} out of {total_count} achievements!</p>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n\ndef show_progress_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show learning progress\"\"\"\n    st.subheader(\"📈 Learning Progress\")\n    \n    # Course progress\n    courses = db_manager.get_user_courses(user_data['id'])\n    \n    if courses:\n        st.write(\"### Course Progress\")\n        for course in courses:\n            st.write(f\"**{course['name']}**\")\n            progress = course['progress']\n            \n            # Progress bar with animation effect\n            progress_html = f\"\"\"\n            <div style=\"background: #e0e0e0; border-radius: 10px; height: 25px; width: 100%; margin: 10px 0; position: relative;\">\n                <div style=\"\n                    background: linear-gradient(90deg, #4CAF50 0%, #45a049 100%);\n                    height: 100%;\n                    width: {progress}%;\n                    border-radius: 10px;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    color: white;\n                    font-weight: bold;\n                    transition: width 1s ease-in-out;\n                \">\n                    {progress}%\n                </div>\n            </div>\n            \"\"\"\n            st.markdown(progress_html, unsafe_allow_html=True)\n    \n    # Test performance over time\n    st.write(\"### Test Performance Over Time\")\n    \n    test_dates = pd.date_range(end=datetime.now(), periods=10, freq='W')\n    test_scores = [65, 72, 78, 75, 82, 85, 88, 84, 90, 87]\n    \n    fig_progress = go.Figure()\n    \n    fig_progress.add_trace(go.Scatter(\n        x=test_dates,\n        y=test_scores,\n        mode='lines+markers+text',\n        text=test_scores,\n        textposition=\"top center\",\n        line=dict(color='#FF6B6B', width=3),\n        marker=dict(size=8, color='#FF6B6B'),\n        name='Test Scores'\n    ))\n    \n    fig_progress.update_layout(\n        title=\"Test Score Improvement\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Score (%)\",\n        yaxis=dict(range=[0, 100]),\n        showlegend=False\n    )\n    \n    st.plotly_chart(fig_progress, use_container_width=True)\n    \n    # Study streak\n    st.write(\"### Study Streak\")\n    current_streak = 15  # Mock data\n    best_streak = 23  # Mock data\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        st.metric(\"Current Streak\", f\"🔥 {current_streak} days\")\n    with col2:\n        st.metric(\"Best Streak\", f\"🏆 {best_streak} days\")\n\ndef show_goals_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show and manage learning goals\"\"\"\n    st.subheader(\"🎯 Learning Goals\")\n    \n    # Current goals\n    goals = [\n        {\n            \"title\": \"Study 2 hours daily\",\n            \"current\": 1.5,\n            \"target\": 2.0,\n            \"unit\": \"hours\"\n        },\n        {\n            \"title\": \"Complete 3 tests per week\",\n            \"current\": 2,\n            \"target\": 3,\n            \"unit\": \"tests\"\n        },\n        {\n            \"title\": \"Maintain 85% average score\",\n            \"current\": 82,\n            \"target\": 85,\n            \"unit\": \"%\"\n        }\n    ]\n    \n    for goal in goals:\n        progress = min(100, (goal['current'] / goal['target']) * 100)\n        \n        st.write(f\"**{goal['title']}**\")\n        st.write(f\"Progress: {goal['current']}{goal['unit']} / {goal['target']}{goal['unit']}\")\n        \n        color = \"#4CAF50\" if progress >= 100 else \"#FF9800\" if progress >= 75 else \"#FF6B6B\"\n        \n        progress_html = f\"\"\"\n        <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%; margin: 10px 0;\">\n            <div style=\"background: {color}; height: 100%; width: {progress}%; border-radius: 10px;\"></div>\n        </div>\n        \"\"\"\n        st.markdown(progress_html, unsafe_allow_html=True)\n        st.markdown(\"---\")\n    \n    # Add new goal\n    st.write(\"### Set New Goal\")\n    with st.form(\"new_goal\"):\n        goal_title = st.text_input(\"Goal Description\")\n        target_value = st.number_input(\"Target Value\", min_value=1)\n        goal_unit = st.selectbox(\"Unit\", [\"hours\", \"tests\", \"videos\", \"days\", \"%\"])\n        \n        if st.form_submit_button(\"Add Goal\", type=\"primary\"):\n            st.success(f\"Goal added: {goal_title}\")\n            st.info(\"Goal tracking will be implemented in future updates.\")\n    \n    # Motivational message for non-premium users\n    if not db_manager.is_premium_user(user_data['id']):\n        st.markdown(\"\"\"\n        <div style=\"\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 30px;\n            border-radius: 15px;\n            text-align: center;\n            margin: 30px 0;\n        \">\n            <h3>🚀 It's time for you to study with Sharpy & Excel in your Life!</h3>\n            <p>Unlock premium features to accelerate your learning journey</p>\n            <button style=\"\n                background: white;\n                color: #667eea;\n                border: none;\n                padding: 10px 20px;\n                border-radius: 5px;\n                font-weight: bold;\n                cursor: pointer;\n            \">Upgrade to Premium</button>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\nif __name__ == \"__main__\":\n    show_journey_page()","size_bytes":13788},"pages/3_Notifications.py":{"content":"import streamlit as st\nfrom datetime import datetime\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Notifications\", page_icon=\"🔔\", layout=\"wide\")\n\ndef show_notifications_page():\n    \"\"\"Show user notifications and messaging\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to view notifications.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🔔 Notifications\")\n    \n    # Notification tabs\n    tab1, tab2, tab3 = st.tabs([\"📬 All Notifications\", \"🎥 Live Classes\", \"📢 Announcements\"])\n    \n    with tab1:\n        show_all_notifications(user_data, db_manager)\n    \n    with tab2:\n        show_live_class_notifications(user_data, db_manager)\n    \n    with tab3:\n        show_announcements(user_data, db_manager)\n\ndef show_all_notifications(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show all user notifications\"\"\"\n    st.subheader(\"📬 Your Notifications\")\n    \n    notifications = db_manager.get_user_notifications(user_data['id'])\n    \n    if not notifications:\n        st.info(\"No notifications yet. We'll notify you about important updates!\")\n        return\n    \n    # Mark all as read button\n    col1, col2 = st.columns([1, 4])\n    with col1:\n        if st.button(\"Mark All Read\", type=\"secondary\"):\n            st.success(\"All notifications marked as read!\")\n    \n    # Display notifications\n    for notification in notifications:\n        # Notification card styling based on type and read status\n        card_style = get_notification_card_style(notification['type'], notification['is_read'])\n        \n        st.markdown(f\"\"\"\n        <div style=\"{card_style}\">\n            <div style=\"display: flex; justify-content: space-between; align-items: flex-start;\">\n                <div style=\"flex: 1;\">\n                    <h4 style=\"margin: 0 0 10px 0; color: #333;\">{get_notification_icon(notification['type'])} {notification['title']}</h4>\n                    <p style=\"margin: 0 0 10px 0; color: #666;\">{notification['message']}</p>\n                    <small style=\"color: #999;\">{format_notification_time(notification['created_at'])}</small>\n                </div>\n                <div>\n                    {get_notification_badge(notification['type'])}\n                </div>\n            </div>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\ndef show_live_class_notifications(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show live class notifications and reminders\"\"\"\n    st.subheader(\"🎥 Live Class Updates\")\n    \n    # Today's live classes\n    live_classes = db_manager.get_today_live_classes(user_data['id'])\n    \n    if live_classes:\n        st.write(\"### Today's Schedule\")\n        for class_info in live_classes:\n            st.markdown(f\"\"\"\n            <div style=\"\n                border-left: 4px solid #FF6B6B;\n                background: #fff5f5;\n                padding: 15px;\n                margin: 10px 0;\n                border-radius: 5px;\n            \">\n                <h4 style=\"margin: 0; color: #FF6B6B;\">🎥 {class_info['subject']} - {class_info['topic']}</h4>\n                <p style=\"margin: 5px 0;\">👨‍🏫 Teacher: {class_info['teacher']}</p>\n                <p style=\"margin: 5px 0;\">⏰ Time: {class_info['time']}</p>\n                <p style=\"margin: 5px 0;\">📚 Duration: {class_info['duration']} minutes</p>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            col1, col2 = st.columns([1, 3])\n            with col1:\n                if st.button(f\"Join Now\", key=f\"join_{class_info['id']}\", type=\"primary\"):\n                    st.success(\"Joining live class...\")\n                    # Award coins for attending live class\n                    db_manager.add_user_coins(user_data['id'], 10)\n                    st.info(\"You earned 10 coins for attending the live class!\")\n    else:\n        st.info(\"No live classes scheduled for today.\")\n    \n    # Notification preferences\n    st.markdown(\"---\")\n    st.write(\"### Notification Preferences\")\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        live_class_reminder = st.checkbox(\"Live Class Reminders\", value=True)\n        new_content_alert = st.checkbox(\"New Content Alerts\", value=True)\n    \n    with col2:\n        test_reminder = st.checkbox(\"Test Reminders\", value=True)\n        achievement_notification = st.checkbox(\"Achievement Notifications\", value=True)\n    \n    if st.button(\"Save Preferences\"):\n        st.success(\"Notification preferences saved!\")\n\ndef show_announcements(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show important announcements\"\"\"\n    st.subheader(\"📢 Important Announcements\")\n    \n    # Sample announcements\n    announcements = [\n        {\n            \"title\": \"New Course Launch: Advanced Mathematics\",\n            \"content\": \"We're excited to announce the launch of our Advanced Mathematics course for Class 12 students. Enroll now to get early bird discount!\",\n            \"date\": \"2024-07-20\",\n            \"type\": \"course\",\n            \"priority\": \"high\"\n        },\n        {\n            \"title\": \"System Maintenance Scheduled\",\n            \"content\": \"Scheduled maintenance on July 25th from 2:00 AM to 4:00 AM IST. The platform will be temporarily unavailable.\",\n            \"date\": \"2024-07-18\",\n            \"type\": \"system\",\n            \"priority\": \"medium\"\n        },\n        {\n            \"title\": \"New Achievement Badges Available\",\n            \"content\": \"Check out the new achievement badges in your journey section. Complete challenges to earn exclusive rewards!\",\n            \"date\": \"2024-07-15\",\n            \"type\": \"feature\",\n            \"priority\": \"low\"\n        },\n        {\n            \"title\": \"Live Doubt Clearing Session\",\n            \"content\": \"Join our special doubt clearing session this weekend. Get your questions answered by expert teachers.\",\n            \"date\": \"2024-07-22\",\n            \"type\": \"event\",\n            \"priority\": \"high\"\n        }\n    ]\n    \n    for announcement in announcements:\n        priority_color = {\n            \"high\": \"#FF6B6B\",\n            \"medium\": \"#FFB366\", \n            \"low\": \"#4ECDC4\"\n        }\n        \n        st.markdown(f\"\"\"\n        <div style=\"\n            border: 1px solid {priority_color[announcement['priority']]};\n            border-left: 5px solid {priority_color[announcement['priority']]};\n            background: white;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        \">\n            <div style=\"display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;\">\n                <h4 style=\"margin: 0; color: {priority_color[announcement['priority']]};\">\n                    {get_announcement_icon(announcement['type'])} {announcement['title']}\n                </h4>\n                <span style=\"\n                    background: {priority_color[announcement['priority']]};\n                    color: white;\n                    padding: 2px 8px;\n                    border-radius: 12px;\n                    font-size: 12px;\n                    font-weight: bold;\n                \">\n                    {announcement['priority'].upper()}\n                </span>\n            </div>\n            <p style=\"color: #666; margin: 10px 0;\">{announcement['content']}</p>\n            <small style=\"color: #999;\">📅 {announcement['date']}</small>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    # Subscribe to announcements\n    st.markdown(\"---\")\n    st.write(\"### Stay Updated\")\n    \n    col1, col2 = st.columns([2, 1])\n    with col1:\n        email_notifications = st.checkbox(\"Email Notifications\", value=True)\n        sms_notifications = st.checkbox(\"SMS Notifications\", value=False)\n    \n    with col2:\n        if st.button(\"Update Subscription\", type=\"primary\"):\n            st.success(\"Subscription preferences updated!\")\n\ndef get_notification_card_style(notification_type: str, is_read: bool) -> str:\n    \"\"\"Get CSS style for notification card\"\"\"\n    opacity = \"0.7\" if is_read else \"1.0\"\n    border_color = {\n        \"info\": \"#4ECDC4\",\n        \"success\": \"#4CAF50\",\n        \"warning\": \"#FFB366\",\n        \"error\": \"#FF6B6B\"\n    }.get(notification_type, \"#ddd\")\n    \n    return f\"\"\"\n        border: 1px solid {border_color};\n        border-left: 4px solid {border_color};\n        background: white;\n        padding: 15px;\n        margin: 10px 0;\n        border-radius: 5px;\n        opacity: {opacity};\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    \"\"\"\n\ndef get_notification_icon(notification_type: str) -> str:\n    \"\"\"Get icon for notification type\"\"\"\n    icons = {\n        \"info\": \"ℹ️\",\n        \"success\": \"✅\",\n        \"warning\": \"⚠️\",\n        \"error\": \"❌\",\n        \"course\": \"📚\",\n        \"test\": \"📝\",\n        \"achievement\": \"🏆\"\n    }\n    return icons.get(notification_type, \"📢\")\n\ndef get_notification_badge(notification_type: str) -> str:\n    \"\"\"Get badge for notification type\"\"\"\n    colors = {\n        \"info\": \"#4ECDC4\",\n        \"success\": \"#4CAF50\",\n        \"warning\": \"#FFB366\",\n        \"error\": \"#FF6B6B\"\n    }\n    \n    color = colors.get(notification_type, \"#ddd\")\n    return f\"\"\"\n    <span style=\"\n        background: {color};\n        color: white;\n        padding: 2px 6px;\n        border-radius: 10px;\n        font-size: 10px;\n        font-weight: bold;\n    \">\n        {notification_type.upper()}\n    </span>\n    \"\"\"\n\ndef get_announcement_icon(announcement_type: str) -> str:\n    \"\"\"Get icon for announcement type\"\"\"\n    icons = {\n        \"course\": \"📚\",\n        \"system\": \"⚙️\",\n        \"feature\": \"✨\",\n        \"event\": \"🎯\"\n    }\n    return icons.get(announcement_type, \"📢\")\n\ndef format_notification_time(timestamp) -> str:\n    \"\"\"Format notification timestamp\"\"\"\n    # In a real app, this would properly parse the timestamp\n    return \"2 hours ago\"  # Placeholder\n\nif __name__ == \"__main__\":\n    show_notifications_page()","size_bytes":10034},"pages/4_Shorts.py":{"content":"import streamlit as st\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Educational Shorts\", page_icon=\"🎬\", layout=\"wide\")\n\ndef show_shorts_page():\n    \"\"\"Show educational shorts/videos page\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to access educational shorts.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🎬 Educational Shorts\")\n    st.markdown(\"Quick learning videos to boost your knowledge!\")\n    \n    # Filter options\n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        subject_filter = st.selectbox(\"Subject\", \n            [\"All\", \"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\", \"English\"])\n    \n    with col2:\n        duration_filter = st.selectbox(\"Duration\", \n            [\"All\", \"Under 2 min\", \"2-5 min\", \"5-10 min\"])\n    \n    with col3:\n        difficulty_filter = st.selectbox(\"Difficulty\", \n            [\"All\", \"Beginner\", \"Intermediate\", \"Advanced\"])\n    \n    st.markdown(\"---\")\n    \n    # Educational shorts content\n    show_shorts_grid(user_data, db_manager, subject_filter, duration_filter, difficulty_filter)\n\ndef show_shorts_grid(user_data: dict, db_manager: DatabaseManager, subject: str, duration: str, difficulty: str):\n    \"\"\"Display shorts in a grid format\"\"\"\n    \n    # Sample educational shorts data\n    shorts = [\n        {\n            \"id\": 1,\n            \"title\": \"Quadratic Formula in 60 Seconds\",\n            \"subject\": \"Mathematics\",\n            \"duration\": \"1:00\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"📊\",\n            \"views\": \"12.5K\",\n            \"likes\": \"1.2K\",\n            \"description\": \"Master the quadratic formula quickly with this short explanation!\",\n            \"coins_reward\": 8\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Newton's Laws Explained\",\n            \"subject\": \"Physics\",\n            \"duration\": \"2:30\",\n            \"difficulty\": \"Beginner\",\n            \"thumbnail\": \"🔬\",\n            \"views\": \"25.3K\",\n            \"likes\": \"2.8K\",\n            \"description\": \"Understanding Newton's three laws of motion in simple terms.\",\n            \"coins_reward\": 10\n        },\n        {\n            \"id\": 3,\n            \"title\": \"Periodic Table Tricks\",\n            \"subject\": \"Chemistry\",\n            \"duration\": \"1:45\",\n            \"difficulty\": \"Beginner\",\n            \"thumbnail\": \"⚗️\",\n            \"views\": \"18.7K\",\n            \"likes\": \"1.9K\",\n            \"description\": \"Memory tricks to remember the periodic table easily!\",\n            \"coins_reward\": 9\n        },\n        {\n            \"id\": 4,\n            \"title\": \"DNA Structure Quick Review\",\n            \"subject\": \"Biology\",\n            \"duration\": \"2:15\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"🧬\",\n            \"views\": \"15.2K\",\n            \"likes\": \"1.5K\",\n            \"description\": \"Quick overview of DNA structure and its components.\",\n            \"coins_reward\": 11\n        },\n        {\n            \"id\": 5,\n            \"title\": \"Calculus Limits Simplified\",\n            \"subject\": \"Mathematics\",\n            \"duration\": \"3:20\",\n            \"difficulty\": \"Advanced\",\n            \"thumbnail\": \"📈\",\n            \"views\": \"8.9K\",\n            \"likes\": \"934\",\n            \"description\": \"Understanding limits in calculus with simple examples.\",\n            \"coins_reward\": 15\n        },\n        {\n            \"id\": 6,\n            \"title\": \"Electromagnetic Waves Basics\",\n            \"subject\": \"Physics\",\n            \"duration\": \"2:45\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"📡\",\n            \"views\": \"11.4K\",\n            \"likes\": \"1.1K\",\n            \"description\": \"Introduction to electromagnetic spectrum and properties.\",\n            \"coins_reward\": 12\n        }\n    ]\n    \n    # Filter shorts based on selection\n    filtered_shorts = filter_shorts(shorts, subject, duration, difficulty)\n    \n    if not filtered_shorts:\n        st.info(\"No shorts match your current filters. Try adjusting your selection!\")\n        return\n    \n    # Display shorts in responsive grid\n    cols_per_row = 2\n    rows = len(filtered_shorts) // cols_per_row + (1 if len(filtered_shorts) % cols_per_row else 0)\n    \n    for row in range(rows):\n        cols = st.columns(cols_per_row)\n        for col_idx in range(cols_per_row):\n            short_idx = row * cols_per_row + col_idx\n            if short_idx < len(filtered_shorts):\n                short = filtered_shorts[short_idx]\n                with cols[col_idx]:\n                    show_short_card(short, user_data, db_manager)\n\ndef show_short_card(short: dict, user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Display individual short card\"\"\"\n    \n    # Short card with custom styling\n    st.markdown(f\"\"\"\n    <div style=\"\n        border: 1px solid #e0e0e0;\n        border-radius: 15px;\n        padding: 0;\n        margin: 15px 0;\n        background: white;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        overflow: hidden;\n        transition: transform 0.2s;\n    \">\n        <!-- Video thumbnail area -->\n        <div style=\"\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            height: 200px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            position: relative;\n        \">\n            <div style=\"font-size: 4rem; color: white;\">{short['thumbnail']}</div>\n            <div style=\"\n                position: absolute;\n                top: 10px;\n                right: 10px;\n                background: rgba(0,0,0,0.7);\n                color: white;\n                padding: 5px 10px;\n                border-radius: 15px;\n                font-size: 12px;\n                font-weight: bold;\n            \">\n                {short['duration']}\n            </div>\n            <div style=\"\n                position: absolute;\n                bottom: 10px;\n                right: 10px;\n                background: #FFD700;\n                color: #333;\n                padding: 3px 8px;\n                border-radius: 12px;\n                font-size: 11px;\n                font-weight: bold;\n            \">\n                +{short['coins_reward']} coins\n            </div>\n        </div>\n        \n        <!-- Content area -->\n        <div style=\"padding: 15px;\">\n            <h4 style=\"margin: 0 0 10px 0; color: #333; font-size: 16px;\">{short['title']}</h4>\n            <p style=\"margin: 0 0 10px 0; color: #666; font-size: 13px; line-height: 1.4;\">\n                {short['description']}\n            </p>\n            \n            <!-- Stats -->\n            <div style=\"display: flex; justify-content: space-between; margin: 10px 0; font-size: 12px; color: #999;\">\n                <span>👀 {short['views']} views</span>\n                <span>👍 {short['likes']} likes</span>\n                <span>📚 {short['subject']}</span>\n            </div>\n            \n            <!-- Difficulty badge -->\n            <div style=\"margin: 10px 0;\">\n                <span style=\"\n                    background: {get_difficulty_color(short['difficulty'])};\n                    color: white;\n                    padding: 2px 8px;\n                    border-radius: 12px;\n                    font-size: 11px;\n                    font-weight: bold;\n                \">\n                    {short['difficulty']}\n                </span>\n            </div>\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Watch button\n    if st.button(f\"▶️ Watch Now\", key=f\"watch_{short['id']}\", type=\"primary\"):\n        show_video_player(short, user_data, db_manager)\n\ndef show_video_player(short: dict, user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show video player interface\"\"\"\n    \n    st.markdown(\"---\")\n    \n    # Video player area\n    st.subheader(f\"🎬 {short['title']}\")\n    \n    # Mock video player\n    st.markdown(f\"\"\"\n    <div style=\"\n        background: #000;\n        height: 400px;\n        border-radius: 10px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin: 20px 0;\n        position: relative;\n    \">\n        <div style=\"text-align: center; color: white;\">\n            <div style=\"font-size: 6rem;\">{short['thumbnail']}</div>\n            <h3>Now Playing: {short['title']}</h3>\n            <p>Duration: {short['duration']} • Subject: {short['subject']}</p>\n        </div>\n        \n        <!-- Play controls -->\n        <div style=\"\n            position: absolute;\n            bottom: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: rgba(255,255,255,0.2);\n            padding: 10px 20px;\n            border-radius: 30px;\n            backdrop-filter: blur(10px);\n        \">\n            <span style=\"color: white; font-size: 14px;\">▶️ Playing • 🔊 Audio On • ⚡ {short['coins_reward']} coins to earn</span>\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Video completion actions\n    col1, col2, col3 = st.columns([1, 1, 1])\n    \n    with col1:\n        if st.button(\"👍 Like\", key=f\"like_{short['id']}\"):\n            st.success(\"Liked!\")\n    \n    with col2:\n        if st.button(\"💾 Save\", key=f\"save_{short['id']}\"):\n            st.success(\"Saved to your collection!\")\n    \n    with col3:\n        if st.button(\"✅ Mark Complete\", key=f\"complete_{short['id']}\", type=\"primary\"):\n            # Award coins for completing video\n            db_manager.add_user_coins(user_data['id'], short['coins_reward'])\n            st.success(f\"Great! You earned {short['coins_reward']} coins! 🪙\")\n            \n            # Add achievement notification\n            db_manager.add_notification(\n                user_data['id'],\n                \"Video Completed!\",\n                f\"You completed '{short['title']}' and earned {short['coins_reward']} coins!\",\n                \"success\"\n            )\n    \n    # Related shorts\n    st.markdown(\"---\")\n    st.subheader(\"📚 Related Shorts\")\n    \n    related_subjects = [\"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\"]\n    related_subject = short['subject']\n    \n    col1, col2, col3 = st.columns(3)\n    cols = [col1, col2, col3]\n    \n    for i in range(3):\n        with cols[i]:\n            st.markdown(f\"\"\"\n            <div style=\"\n                border: 1px solid #e0e0e0;\n                border-radius: 10px;\n                padding: 10px;\n                text-align: center;\n                background: white;\n            \">\n                <div style=\"font-size: 2rem;\">🎬</div>\n                <h5>Related {related_subject} Short {i+1}</h5>\n                <small>Duration: 2:{15+i*10}</small>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Watch\", key=f\"related_{i}\"):\n                st.info(f\"Loading related video {i+1}...\")\n\ndef filter_shorts(shorts: list, subject: str, duration: str, difficulty: str) -> list:\n    \"\"\"Filter shorts based on user selection\"\"\"\n    filtered = shorts.copy()\n    \n    if subject != \"All\":\n        filtered = [s for s in filtered if s['subject'] == subject]\n    \n    if duration != \"All\":\n        # In a real app, you'd properly parse duration and filter\n        pass\n    \n    if difficulty != \"All\":\n        filtered = [s for s in filtered if s['difficulty'] == difficulty]\n    \n    return filtered\n\ndef get_difficulty_color(difficulty: str) -> str:\n    \"\"\"Get color for difficulty level\"\"\"\n    colors = {\n        \"Beginner\": \"#4CAF50\",\n        \"Intermediate\": \"#FF9800\",\n        \"Advanced\": \"#F44336\"\n    }\n    return colors.get(difficulty, \"#666\")\n\nif __name__ == \"__main__\":\n    show_shorts_page()","size_bytes":11723},"sharpy-educational-app-download/README.md":{"content":"# Sharpy Educational App\n\nA comprehensive educational platform with mobile authentication, course management, student journey tracking, and gamification features.\n\n## Features\n\n- 📱 **Mobile Authentication**: OTP-based login with Twilio integration\n- 📚 **Course Management**: Class-specific courses with enrollment tracking\n- 🎯 **Student Journey**: Analytics, achievements, and progress tracking\n- 🔔 **Notifications**: Live class alerts and announcements\n- 🎬 **Educational Shorts**: Quick learning videos with rewards\n- 🪙 **Gamification**: Coin-based reward system\n\n## Tech Stack\n\n- **Frontend**: Streamlit (Python web framework)\n- **Backend**: Python with PostgreSQL database\n- **Authentication**: Password hashing + OTP via Twilio\n- **Visualizations**: Plotly for analytics charts\n- **Database**: PostgreSQL with comprehensive schema\n\n## Setup Instructions\n\n### Prerequisites\n\n- Python 3.11+\n- PostgreSQL database\n- Twilio account (optional, works in demo mode)\n\n### Installation\n\n1. **Clone the repository**\n```bash\ngit clone <repository-url>\ncd sharpy-educational-app\n```\n\n2. **Install dependencies**\n```bash\npip install streamlit psycopg2-binary twilio plotly pandas\n```\n\n3. **Set up environment variables**\nCreate a `.env` file:\n```\nDATABASE_URL=postgresql://username:password@localhost:5432/sharpy_db\nTWILIO_ACCOUNT_SID=your_twilio_sid (optional)\nTWILIO_AUTH_TOKEN=your_twilio_token (optional)\nTWILIO_PHONE_NUMBER=your_twilio_phone (optional)\n```\n\n4. **Run the application**\n```bash\nstreamlit run app.py --server.port 5000\n```\n\n## Project Structure\n\n```\nsharpy-educational-app/\n├── app.py                 # Main application file\n├── utils/\n│   ├── auth.py           # Authentication management\n│   ├── database.py       # Database operations\n│   └── otp_manager.py    # OTP handling with Twilio\n├── pages/\n│   ├── 1_Courses.py      # Course management\n│   ├── 2_Journey.py      # Student analytics\n│   ├── 3_Notifications.py # Notification system\n│   └── 4_Shorts.py       # Educational videos\n├── .streamlit/\n│   └── config.toml       # Streamlit configuration\n└── README.md\n```\n\n## Database Schema\n\nThe app automatically creates these tables:\n- `users` - User profiles and authentication\n- `courses` - Course catalog and details\n- `subjects` - Test subjects by class\n- `user_enrollments` - Course enrollment tracking\n- `live_classes` - Scheduled live sessions\n- `user_activities` - Activity and coin tracking\n- `test_results` - Test scores and results\n- `notifications` - User notifications\n\n## Features Overview\n\n### Authentication System\n- Username/password login\n- OTP-based mobile authentication\n- Secure password hashing\n- Demo mode when Twilio not configured\n\n### Course Management\n- Class-specific course catalogs\n- Cross-class course exploration\n- Enrollment tracking with progress\n- Chapter-based content structure\n\n### Student Journey\n- Learning analytics with charts\n- Achievement badge system\n- Progress tracking across courses\n- Personal goal setting\n\n### Gamification\n- Coin rewards for activities:\n  - Watching videos: 6 coins\n  - Taking tests: 5 coins\n  - Attending live classes: 10 coins\n  - Completing shorts: 8-15 coins\n\n## Usage\n\n1. **Registration**: Create account with educational details\n2. **Login**: Use password or OTP authentication\n3. **Explore Courses**: Browse class-specific or other courses\n4. **Track Progress**: View analytics in Journey section\n5. **Earn Rewards**: Complete activities to earn coins\n6. **Stay Updated**: Check notifications for announcements\n\n## Development\n\n### Running in Development Mode\n```bash\nstreamlit run app.py --server.port 5000 --server.headless false\n```\n\n### Database Reset\nThe app automatically initializes the database with sample data on first run.\n\n## Mobile App Version\n\nFor Android Studio development, see the `mobile-app/` directory for React Native or Flutter implementation.\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## License\n\nMIT License - see LICENSE file for details.","size_bytes":4158},"sharpy-educational-app-download/app.py":{"content":"import streamlit as st\nimport pandas as pd\nimport os\nfrom utils.auth import AuthManager\nfrom utils.database import DatabaseManager\nfrom utils.otp_manager import OTPManager\n\n# Configure page\nst.set_page_config(\n    page_title=\"Sharpy Education\",\n    page_icon=\"📚\",\n    layout=\"wide\",\n    initial_sidebar_state=\"auto\"\n)\n\n# Initialize session state\nif 'authenticated' not in st.session_state:\n    st.session_state.authenticated = False\nif 'user_data' not in st.session_state:\n    st.session_state.user_data = None\nif 'current_page' not in st.session_state:\n    st.session_state.current_page = 'home'\n\n# Initialize managers\nauth_manager = AuthManager()\ndb_manager = DatabaseManager()\notp_manager = OTPManager()\n\n# Custom CSS for better styling\nst.markdown(\"\"\"\n<style>\n    .main-header {\n        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 1rem;\n        border-radius: 10px;\n        margin-bottom: 2rem;\n        text-align: center;\n    }\n    .nav-button {\n        background: #667eea;\n        color: white;\n        border: none;\n        padding: 0.5rem 1rem;\n        margin: 0.2rem;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n    .nav-button:hover {\n        background: #5a67d8;\n    }\n    .course-card {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 10px;\n        padding: 1rem;\n        margin: 1rem 0;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    .coins-display {\n        background: #ffd700;\n        color: #333;\n        padding: 0.5rem 1rem;\n        border-radius: 20px;\n        font-weight: bold;\n        display: inline-block;\n        margin: 0.5rem 0;\n    }\n    .floating-buttons {\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        z-index: 1000;\n    }\n    .floating-btn {\n        background: #25d366;\n        color: white;\n        border: none;\n        border-radius: 50%;\n        width: 60px;\n        height: 60px;\n        margin: 5px;\n        cursor: pointer;\n        font-size: 20px;\n    }\n    .floating-btn.call {\n        background: #007bff;\n    }\n</style>\n\"\"\", unsafe_allow_html=True)\n\ndef show_auth_page():\n    \"\"\"Show authentication page\"\"\"\n    st.markdown('<div class=\"main-header\"><h1>📚 Welcome to Sharpy Education</h1><p>Your Gateway to Academic Excellence</p></div>', unsafe_allow_html=True)\n    \n    tab1, tab2 = st.tabs([\"Login\", \"Register\"])\n    \n    with tab1:\n        st.subheader(\"Login to Your Account\")\n        \n        # Login form\n        with st.form(\"login_form\"):\n            phone = st.text_input(\"Phone Number\", placeholder=\"+91XXXXXXXXXX\")\n            password = st.text_input(\"Password\", type=\"password\")\n            \n            if st.form_submit_button(\"Login\", type=\"primary\"):\n                if auth_manager.login_user(phone, password):\n                    st.session_state.authenticated = True\n                    st.session_state.user_data = auth_manager.get_user_data(phone)\n                    st.success(\"Login successful!\")\n                    st.rerun()\n                else:\n                    st.error(\"Invalid credentials. Please try again.\")\n        \n        st.markdown(\"---\")\n        if st.button(\"Login with OTP\"):\n            st.session_state.show_otp_login = True\n            st.rerun()\n        \n        # OTP Login Section\n        if st.session_state.get('show_otp_login', False):\n            show_otp_login_section()\n    \n    with tab2:\n        st.subheader(\"Create New Account\")\n        \n        # Registration form\n        with st.form(\"register_form\"):\n            st.write(\"**Personal Information**\")\n            name = st.text_input(\"Full Name\")\n            phone = st.text_input(\"Phone Number\", placeholder=\"+91XXXXXXXXXX\")\n            email = st.text_input(\"Email Address\")\n            \n            st.write(\"**Educational Details**\")\n            school = st.text_input(\"School Name\")\n            class_level = st.selectbox(\"Class\", [\n                \"Class 6\", \"Class 7\", \"Class 8\", \"Class 9\", \"Class 10\", \n                \"Class 11\", \"Class 12\", \"Engineering Entrance\", \"Medical Entrance\"\n            ])\n            address = st.text_area(\"Address\")\n            \n            st.write(\"**Account Security**\")\n            password = st.text_input(\"Create Password\", type=\"password\")\n            confirm_password = st.text_input(\"Confirm Password\", type=\"password\")\n            \n            agree_terms = st.checkbox(\"I agree to the Terms and Conditions\")\n            \n            if st.form_submit_button(\"Register\", type=\"primary\"):\n                if password != confirm_password:\n                    st.error(\"Passwords don't match!\")\n                elif not agree_terms:\n                    st.error(\"Please agree to the terms and conditions.\")\n                elif auth_manager.register_user(name, phone, email, school, class_level, address, password):\n                    st.success(\"Registration successful! Please login with your credentials.\")\n                    # Clear registration form\n                    st.session_state.registration_success = True\n                else:\n                    st.error(\"Registration failed. Phone number might already exist.\")\n\ndef show_navigation():\n    \"\"\"Show navigation for authenticated users\"\"\"\n    col1, col2, col3, col4, col5, col6 = st.columns([1,1,1,1,1,1])\n    \n    with col1:\n        if st.button(\"🏠 Home\", key=\"nav_home\"):\n            st.session_state.current_page = 'home'\n            st.rerun()\n    \n    with col2:\n        if st.button(\"📚 Courses\", key=\"nav_courses\"):\n            st.session_state.current_page = 'courses'\n            st.rerun()\n    \n    with col3:\n        if st.button(\"🎯 My Journey\", key=\"nav_journey\"):\n            st.session_state.current_page = 'journey'\n            st.rerun()\n    \n    with col4:\n        if st.button(\"🔔 Notifications\", key=\"nav_notifications\"):\n            st.session_state.current_page = 'notifications'\n            st.rerun()\n    \n    with col5:\n        if st.button(\"🎬 Shorts\", key=\"nav_shorts\"):\n            st.session_state.current_page = 'shorts'\n            st.rerun()\n    \n    with col6:\n        if st.button(\"🚪 Logout\", key=\"logout\"):\n            st.session_state.authenticated = False\n            st.session_state.user_data = None\n            st.session_state.current_page = 'home'\n            st.rerun()\n\ndef show_home_page():\n    \"\"\"Show home page based on user premium status\"\"\"\n    user_data = st.session_state.user_data\n    \n    # Header with user info\n    col1, col2 = st.columns([3, 1])\n    with col1:\n        st.markdown(f'<div class=\"main-header\"><h2>Welcome back, {user_data[\"name\"]}!</h2></div>', unsafe_allow_html=True)\n    \n    with col2:\n        coins = db_manager.get_user_coins(user_data['id'])\n        st.markdown(f'<div class=\"coins-display\">🪙 {coins} Coins</div>', unsafe_allow_html=True)\n    \n    is_premium = db_manager.is_premium_user(user_data['id'])\n    \n    if not is_premium:\n        # Non-premium user home page\n        st.subheader(\"🎯 Unlock Your Potential with Sharpy Premium!\")\n        \n        # Promotional banner\n        st.info(\"Join thousands of successful students who have transformed their academic journey with Sharpy's comprehensive courses!\")\n        \n        # Free test series\n        st.subheader(\"📝 Free Test Series\")\n        if st.button(\"Apply For A Test\", type=\"primary\"):\n            show_test_series_selection()\n        \n        # YouTube videos section\n        st.subheader(\"📹 Featured Video Lessons\")\n        show_video_thumbnails()\n        \n        # Testimonials\n        st.subheader(\"🌟 SHARPY-ত পঢ়া Student-ৰ মনৰ ভাৱ\")\n        show_testimonials()\n        \n    else:\n        # Premium user home page\n        # Scheduled live classes\n        st.subheader(\"🎥 Today's Live Classes\")\n        show_live_classes()\n        \n        # Enrolled courses\n        st.subheader(\"📚 Your Enrolled Courses\")\n        show_enrolled_courses()\n        \n        # YouTube videos section\n        st.subheader(\"📹 Latest Video Lessons\")\n        show_video_thumbnails()\n        \n        # Testimonials\n        st.subheader(\"🌟 SHARPY-ত পঢ়া Student-ৰ মনৰ ভাৱ\")\n        show_testimonials()\n\ndef show_test_series_selection():\n    \"\"\"Show subject-wise test series for the user's class\"\"\"\n    user_data = st.session_state.user_data\n    class_level = user_data['class']\n    \n    st.subheader(f\"📝 Test Series for {class_level}\")\n    \n    # Get subjects based on class\n    subjects = db_manager.get_subjects_by_class(class_level)\n    \n    col1, col2, col3 = st.columns(3)\n    for i, subject in enumerate(subjects):\n        with [col1, col2, col3][i % 3]:\n            with st.container():\n                st.markdown(f'<div class=\"course-card\">', unsafe_allow_html=True)\n                st.write(f\"**{subject['name']}**\")\n                st.write(f\"Duration: {subject.get('duration', '60')} minutes\")\n                st.write(f\"Questions: {subject.get('questions', '50')}\")\n                \n                if st.button(f\"Start {subject['name']} Test\", key=f\"test_{subject['id']}\"):\n                    st.success(f\"Starting {subject['name']} test...\")\n                    # Award coins for test attempt\n                    db_manager.add_user_coins(user_data['id'], 5)\n                    st.info(\"You earned 5 coins for attempting the test!\")\n                \n                st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_video_thumbnails():\n    \"\"\"Show swipeable video thumbnails\"\"\"\n    videos = [\n        {\"title\": \"Mathematics Basics\", \"thumbnail\": \"📊\", \"duration\": \"15:30\"},\n        {\"title\": \"Physics Concepts\", \"thumbnail\": \"🔬\", \"duration\": \"22:45\"},\n        {\"title\": \"Chemistry Formulas\", \"thumbnail\": \"⚗️\", \"duration\": \"18:20\"},\n        {\"title\": \"Biology Systems\", \"thumbnail\": \"🧬\", \"duration\": \"25:10\"},\n    ]\n    \n    cols = st.columns(len(videos))\n    for i, video in enumerate(videos):\n        with cols[i]:\n            st.markdown(f\"\"\"\n            <div class=\"course-card\" style=\"text-align: center;\">\n                <div style=\"font-size: 3rem;\">{video['thumbnail']}</div>\n                <h4>{video['title']}</h4>\n                <p>Duration: {video['duration']}</p>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Watch\", key=f\"video_{i}\"):\n                st.success(f\"Playing: {video['title']}\")\n                # Award coins for watching video\n                db_manager.add_user_coins(st.session_state.user_data['id'], 6)\n                st.info(\"You earned 6 coins for watching this video!\")\n\ndef show_testimonials():\n    \"\"\"Show student testimonials\"\"\"\n    testimonials = [\n        {\"name\": \"Rahul Sharma\", \"class\": \"Class 12\", \"text\": \"Sharpy helped me improve my marks by 40%!\"},\n        {\"name\": \"Priya Das\", \"class\": \"Class 10\", \"text\": \"The live classes are amazing and interactive.\"},\n        {\"name\": \"Amit Singh\", \"class\": \"Engineering\", \"text\": \"Best platform for competitive exam preparation.\"},\n    ]\n    \n    for testimonial in testimonials:\n        st.markdown(f\"\"\"\n        <div class=\"course-card\">\n            <h4>\"{testimonial['text']}\"</h4>\n            <p><strong>- {testimonial['name']}</strong>, {testimonial['class']}</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\ndef show_live_classes():\n    \"\"\"Show scheduled live classes for premium users\"\"\"\n    classes = db_manager.get_today_live_classes(st.session_state.user_data['id'])\n    \n    if not classes:\n        st.info(\"No live classes scheduled for today.\")\n        return\n    \n    for class_info in classes:\n        col1, col2, col3 = st.columns([2, 1, 1])\n        \n        with col1:\n            st.write(f\"**{class_info['subject']} - {class_info['topic']}**\")\n            st.write(f\"Teacher: {class_info['teacher']}\")\n        \n        with col2:\n            st.write(f\"⏰ {class_info['time']}\")\n        \n        with col3:\n            if st.button(\"Join Class\", key=f\"class_{class_info['id']}\"):\n                st.success(\"Joining live class...\")\n\ndef show_enrolled_courses():\n    \"\"\"Show user's enrolled courses\"\"\"\n    courses = db_manager.get_user_courses(st.session_state.user_data['id'])\n    \n    if not courses:\n        st.info(\"You haven't enrolled in any courses yet.\")\n        return\n    \n    cols = st.columns(3)\n    for i, course in enumerate(courses):\n        with cols[i % 3]:\n            st.markdown(f\"\"\"\n            <div class=\"course-card\">\n                <h4>{course['name']}</h4>\n                <p>Progress: {course['progress']}%</p>\n                <div style=\"background: #e2e8f0; border-radius: 10px; height: 10px;\">\n                    <div style=\"background: #667eea; height: 100%; width: {course['progress']}%; border-radius: 10px;\"></div>\n                </div>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Continue Learning\", key=f\"course_{course['id']}\"):\n                st.success(f\"Opening {course['name']}...\")\n\ndef show_floating_buttons():\n    \"\"\"Show floating action buttons for call and WhatsApp\"\"\"\n    st.markdown(\"\"\"\n    <div class=\"floating-buttons\">\n        <button class=\"floating-btn call\" onclick=\"window.open('tel:+919876543210')\" title=\"Call Us\">📞</button>\n        <button class=\"floating-btn\" onclick=\"window.open('https://wa.me/919876543210')\" title=\"WhatsApp\">📱</button>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n\n# Main application logic\ndef main():\n    if not st.session_state.authenticated:\n        show_auth_page()\n    else:\n        show_navigation()\n        \n        if st.session_state.current_page == 'home':\n            show_home_page()\n        elif st.session_state.current_page == 'courses':\n            exec(open('pages/1_Courses.py').read())\n        elif st.session_state.current_page == 'journey':\n            exec(open('pages/2_Journey.py').read())\n        elif st.session_state.current_page == 'notifications':\n            exec(open('pages/3_Notifications.py').read())\n        elif st.session_state.current_page == 'shorts':\n            exec(open('pages/4_Shorts.py').read())\n        \n        show_floating_buttons()\n\ndef show_otp_login_section():\n    \"\"\"Show OTP-based login interface\"\"\"\n    st.subheader(\"🔐 Login with OTP\")\n    \n    # Initialize OTP session states\n    if 'otp_step' not in st.session_state:\n        st.session_state.otp_step = 'phone_input'\n    if 'otp_phone' not in st.session_state:\n        st.session_state.otp_phone = ''\n    \n    if st.session_state.otp_step == 'phone_input':\n        with st.form(\"otp_phone_form\"):\n            phone = st.text_input(\"Enter your registered phone number\", placeholder=\"+91XXXXXXXXXX\")\n            \n            col1, col2 = st.columns([1, 1])\n            with col1:\n                if st.form_submit_button(\"Send OTP\", type=\"primary\"):\n                    # Format and validate phone number\n                    formatted_phone = otp_manager.format_phone_number(phone)\n                    \n                    if not otp_manager.is_valid_phone_number(formatted_phone):\n                        st.error(\"Please enter a valid phone number (e.g., +919876543210)\")\n                    elif not db_manager.user_exists(formatted_phone):\n                        st.error(\"Phone number not registered. Please create an account first.\")\n                    else:\n                        # Generate and send OTP\n                        otp = otp_manager.generate_otp()\n                        if otp_manager.send_otp(formatted_phone, otp):\n                            otp_manager.store_otp(formatted_phone, otp)\n                            st.session_state.otp_phone = formatted_phone\n                            st.session_state.otp_step = 'otp_input'\n                            st.rerun()\n                        else:\n                            st.error(\"Failed to send OTP. Please try again.\")\n            \n            with col2:\n                if st.form_submit_button(\"Back to Login\"):\n                    st.session_state.show_otp_login = False\n                    st.rerun()\n    \n    elif st.session_state.otp_step == 'otp_input':\n        st.info(f\"OTP sent to {st.session_state.otp_phone}\")\n        \n        with st.form(\"otp_verify_form\"):\n            otp_input = st.text_input(\"Enter 6-digit OTP\", max_chars=6)\n            \n            col1, col2, col3 = st.columns([1, 1, 1])\n            \n            with col1:\n                if st.form_submit_button(\"Verify OTP\", type=\"primary\"):\n                    if len(otp_input) != 6 or not otp_input.isdigit():\n                        st.error(\"Please enter a valid 6-digit OTP\")\n                    else:\n                        success, message = otp_manager.verify_otp(st.session_state.otp_phone, otp_input)\n                        if success:\n                            # Login successful\n                            st.session_state.authenticated = True\n                            st.session_state.user_data = auth_manager.get_user_data(st.session_state.otp_phone)\n                            \n                            # Clear OTP session states\n                            st.session_state.otp_step = 'phone_input'\n                            st.session_state.otp_phone = ''\n                            st.session_state.show_otp_login = False\n                            \n                            st.success(\"Login successful!\")\n                            st.rerun()\n                        else:\n                            st.error(message)\n            \n            with col2:\n                if st.form_submit_button(\"Resend OTP\"):\n                    success, message = otp_manager.resend_otp(st.session_state.otp_phone)\n                    if success:\n                        st.success(message)\n                    else:\n                        st.error(message)\n            \n            with col3:\n                if st.form_submit_button(\"Change Number\"):\n                    st.session_state.otp_step = 'phone_input'\n                    st.session_state.otp_phone = ''\n                    st.rerun()\n\nif __name__ == \"__main__\":\n    main()","size_bytes":18129},"sharpy-educational-app-download/run_app.sh":{"content":"#!/bin/bash\n\necho \"Installing dependencies...\"\npip install -r package_requirements.txt\n\necho \"Starting Sharpy Educational App...\"\nstreamlit run app.py --server.port 5000","size_bytes":169},"sharpy-educational-app-download/setup.py":{"content":"\"\"\"\nSetup script for Sharpy Educational App\n\"\"\"\nfrom setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"sharpy-educational-app\",\n    version=\"1.0.0\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    description=\"A comprehensive educational platform with mobile authentication and gamification\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/yourusername/sharpy-educational-app\",\n    packages=find_packages(),\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Education\",\n        \"Topic :: Education :: Computer Aided Instruction (CAI)\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n    python_requires=\">=3.11\",\n    install_requires=[\n        \"streamlit>=1.28.0\",\n        \"psycopg2-binary>=2.9.7\",\n        \"twilio>=8.2.0\",\n        \"plotly>=5.15.0\",\n        \"pandas>=2.0.0\",\n        \"python-dotenv>=1.0.0\",\n    ],\n    extras_require={\n        \"dev\": [\n            \"pytest>=7.0.0\",\n            \"black>=22.0.0\",\n            \"flake8>=5.0.0\",\n        ],\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"sharpy-app=app:main\",\n        ],\n    },\n    include_package_data=True,\n    package_data={\n        \"\": [\"*.toml\", \"*.md\"],\n    },\n)","size_bytes":1483},"utils/auth.py":{"content":"import hashlib\nimport os\nfrom utils.database import DatabaseManager\n\nclass AuthManager:\n    \"\"\"Handle user authentication and registration\"\"\"\n    \n    def __init__(self):\n        self.db = DatabaseManager()\n    \n    def hash_password(self, password: str) -> str:\n        \"\"\"Hash password using SHA-256\"\"\"\n        return hashlib.sha256(password.encode()).hexdigest()\n    \n    def register_user(self, name: str, phone: str, email: str, school: str, class_level: str, address: str, password: str) -> bool:\n        \"\"\"Register a new user\"\"\"\n        try:\n            # Check if phone number already exists\n            if self.db.user_exists(phone):\n                return False\n            \n            hashed_password = self.hash_password(password)\n            \n            # Insert user into database\n            user_data = {\n                'name': name,\n                'phone': phone,\n                'email': email,\n                'school': school,\n                'class': class_level,\n                'address': address,\n                'password': hashed_password,\n                'is_premium': False,\n                'coins': 0,\n                'max_devices': 2  # Default maximum login devices\n            }\n            \n            return self.db.create_user(user_data)\n            \n        except Exception as e:\n            print(f\"Registration error: {e}\")\n            return False\n    \n    def login_user(self, phone: str, password: str) -> bool:\n        \"\"\"Authenticate user login\"\"\"\n        try:\n            user = self.db.get_user_by_phone(phone)\n            if not user:\n                return False\n            \n            hashed_password = self.hash_password(password)\n            return user['password'] == hashed_password\n            \n        except Exception as e:\n            print(f\"Login error: {e}\")\n            return False\n    \n    def get_user_data(self, phone: str) -> dict:\n        \"\"\"Get user data by phone number\"\"\"\n        return self.db.get_user_by_phone(phone)\n    \n    def send_otp(self, phone: str) -> bool:\n        \"\"\"Send OTP to phone number (placeholder for Twilio integration)\"\"\"\n        # This would integrate with Twilio API\n        # For now, return True as placeholder\n        return True\n    \n    def verify_otp(self, phone: str, otp: str) -> bool:\n        \"\"\"Verify OTP (placeholder for Twilio integration)\"\"\"\n        # This would integrate with Twilio API\n        # For now, return True as placeholder\n        return True","size_bytes":2471},"utils/database.py":{"content":"import os\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\nfrom datetime import datetime, date\nimport json\n\nclass DatabaseManager:\n    \"\"\"Manage database operations for the Sharpy Education app\"\"\"\n    \n    def __init__(self):\n        # Always use the Render database URL directly\n        self.connection_string = \"postgresql://frudent_db_user:AXNmaumb01w93rfozH5oXEPxVxFKgLhm@dpg-d2hmfaemcj7s73br3hmg-a.oregon-postgres.render.com/frudent_db\"\n        self.fallback_mode = False\n        self.users_data = {}  # Fallback storage for when database is unavailable\n        self.init_database()\n    \n    def get_connection(self):\n        \"\"\"Get database connection\"\"\"\n        try:\n            if self.connection_string:\n                return psycopg2.connect(self.connection_string)\n            else:\n                return None\n        except Exception as e:\n            print(f\"Database connection error: {e}\")\n            self.fallback_mode = True\n            return None\n    \n    def init_database(self):\n        \"\"\"Initialize database tables\"\"\"\n        try:\n            conn = self.get_connection()\n            if not conn:\n                print(\"Database connection failed. Using fallback mode.\")\n                self.fallback_mode = True\n                self._init_fallback_data()\n                return\n            \n            cursor = conn.cursor()\n            \n            # Users table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    phone VARCHAR(20) UNIQUE NOT NULL,\n                    email VARCHAR(255),\n                    school VARCHAR(255),\n                    class VARCHAR(50),\n                    address TEXT,\n                    password VARCHAR(255) NOT NULL,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    coins INTEGER DEFAULT 0,\n                    max_devices INTEGER DEFAULT 2,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Courses table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS courses (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    description TEXT,\n                    class VARCHAR(50) NOT NULL,\n                    price DECIMAL(10,2) DEFAULT 0,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    thumbnail_url TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Subjects table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS subjects (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    class VARCHAR(50) NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    questions INTEGER DEFAULT 50,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # User enrollments table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS user_enrollments (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    course_id INTEGER REFERENCES courses(id),\n                    progress INTEGER DEFAULT 0,\n                    enrolled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Live classes table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS live_classes (\n                    id SERIAL PRIMARY KEY,\n                    subject VARCHAR(255) NOT NULL,\n                    topic VARCHAR(255) NOT NULL,\n                    teacher VARCHAR(255) NOT NULL,\n                    class_date DATE NOT NULL,\n                    class_time TIME NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    class VARCHAR(50) NOT NULL,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Notifications table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS notifications (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    title VARCHAR(255) NOT NULL,\n                    message TEXT NOT NULL,\n                    type VARCHAR(50) DEFAULT 'info',\n                    is_read BOOLEAN DEFAULT FALSE,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n            # Insert sample data\n            self.insert_sample_data()\n            \n        except Exception as e:\n            print(f\"Database initialization error: {e}\")\n            self.fallback_mode = True\n            self._init_fallback_data()\n    \n    def _init_fallback_data(self):\n        \"\"\"Initialize fallback data when database is not available\"\"\"\n        self.users_data = {}\n        self.subjects_data = [\n            {'id': 1, 'name': 'Mathematics', 'class': 'Class 10', 'duration': 90, 'questions': 60},\n            {'id': 2, 'name': 'Physics', 'class': 'Class 10', 'duration': 90, 'questions': 60},\n            {'id': 3, 'name': 'Chemistry', 'class': 'Class 10', 'duration': 90, 'questions': 60},\n            {'id': 4, 'name': 'Biology', 'class': 'Class 10', 'duration': 90, 'questions': 60},\n        ]\n        self.courses_data = [\n            {'id': 1, 'name': 'Complete Mathematics Course', 'class': 'Class 10', 'price': 5000.00, 'is_premium': True},\n            {'id': 2, 'name': 'Physics Mastery', 'class': 'Class 10', 'price': 4500.00, 'is_premium': True},\n        ]\n    \n    def insert_sample_data(self):\n        \"\"\"Insert sample data for testing\"\"\"\n        if self.fallback_mode:\n            return\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return\n                \n            cursor = conn.cursor()\n            \n            # Sample subjects\n            sample_subjects = [\n                ('Mathematics', 'Class 10', 90, 60),\n                ('Physics', 'Class 10', 90, 60),\n                ('Chemistry', 'Class 10', 90, 60),\n                ('Biology', 'Class 10', 90, 60),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM subjects\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO subjects (name, class, duration, questions) VALUES (%s, %s, %s, %s)\",\n                    sample_subjects\n                )\n            \n            # Sample courses\n            sample_courses = [\n                ('Complete Mathematics Course', 'Comprehensive math course for Class 10', 'Class 10', 5000.00, True),\n                ('Physics Mastery', 'Master physics concepts for Class 10', 'Class 10', 4500.00, True),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM courses\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO courses (name, description, class, price, is_premium) VALUES (%s, %s, %s, %s, %s)\",\n                    sample_courses\n                )\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n        except Exception as e:\n            print(f\"Sample data insertion error: {e}\")\n    \n    def user_exists(self, phone: str) -> bool:\n        \"\"\"Check if user exists by phone number\"\"\"\n        # Normalize phone number (remove +91 prefix if present)\n        normalized_phone = phone.replace('+91', '') if phone.startswith('+91') else phone\n        \n        # Always check fallback first for recently registered users\n        if normalized_phone in self.users_data:\n            print(f\"User found in fallback storage: {normalized_phone}\")\n            return True\n        \n        if self.fallback_mode:\n            return False\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return False\n                \n            cursor = conn.cursor()\n            # Check both normalized and original format\n            cursor.execute(\"SELECT id FROM users WHERE phone = %s OR phone = %s\", (phone, normalized_phone))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            exists = result is not None\n            print(f\"User exists in database: {phone} (normalized: {normalized_phone}) -> {exists}\")\n            return exists\n        except Exception as e:\n            print(f\"User exists check error: {e}\")\n            return False\n    \n    def create_user(self, user_data: dict) -> bool:\n        \"\"\"Create a new user\"\"\"\n        if self.fallback_mode:\n            # Store in fallback with proper structure\n            user_id = len(self.users_data) + 1\n            user_data['id'] = user_id\n            self.users_data[user_data['phone']] = user_data\n            print(f\"User created in fallback mode: {user_data['phone']}\")\n            return True\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                # Fallback to local storage\n                self.fallback_mode = True\n                return self.create_user(user_data)\n                \n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO users (name, phone, email, school, class, address, password, is_premium, coins, max_devices)\n                VALUES (%(name)s, %(phone)s, %(email)s, %(school)s, %(class)s, %(address)s, %(password)s, %(is_premium)s, %(coins)s, %(max_devices)s)\n            \"\"\", user_data)\n            conn.commit()\n            cursor.close()\n            conn.close()\n            print(f\"User created in database: {user_data['phone']}\")\n            return True\n        except Exception as e:\n            print(f\"Create user error: {e}\")\n            # Fallback to local storage\n            self.fallback_mode = True\n            return self.create_user(user_data)\n    \n    def get_user_by_phone(self, phone: str) -> dict:\n        \"\"\"Get user data by phone number\"\"\"\n        # Normalize phone number (remove +91 prefix if present)\n        normalized_phone = phone.replace('+91', '') if phone.startswith('+91') else phone\n        \n        if self.fallback_mode:\n            user = self.users_data.get(normalized_phone) or self.users_data.get(phone)\n            print(f\"Getting user from fallback: {phone} (normalized: {normalized_phone}) -> {user is not None}\")\n            return user\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                # Check fallback\n                user = self.users_data.get(normalized_phone) or self.users_data.get(phone)\n                print(f\"Database unavailable, checking fallback: {phone} (normalized: {normalized_phone}) -> {user is not None}\")\n                return user\n                \n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            # Check both normalized and original format\n            cursor.execute(\"SELECT * FROM users WHERE phone = %s OR phone = %s\", (phone, normalized_phone))\n            user = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            result = dict(user) if user else None\n            print(f\"Getting user from database: {phone} (normalized: {normalized_phone}) -> {result is not None}\")\n            return result\n        except Exception as e:\n            print(f\"Get user error: {e}\")\n            # Check fallback\n            user = self.users_data.get(normalized_phone) or self.users_data.get(phone)\n            print(f\"Database error, checking fallback: {phone} (normalized: {normalized_phone}) -> {user is not None}\")\n            return user\n    \n    def get_user_coins(self, user_id: int) -> int:\n        \"\"\"Get user's current coin balance\"\"\"\n        if self.fallback_mode:\n            for user in self.users_data.values():\n                if user.get('id') == user_id:\n                    return user.get('coins', 0)\n            return 0\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return 0\n                \n            cursor = conn.cursor()\n            cursor.execute(\"SELECT coins FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else 0\n        except Exception as e:\n            print(f\"Get user coins error: {e}\")\n            return 0\n    \n    def add_user_coins(self, user_id: int, coins: int) -> bool:\n        \"\"\"Add coins to user account\"\"\"\n        if self.fallback_mode:\n            for user in self.users_data.values():\n                if user.get('id') == user_id:\n                    user['coins'] = user.get('coins', 0) + coins\n                    return True\n            return False\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return False\n                \n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET coins = coins + %s WHERE id = %s\", (coins, user_id))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Add user coins error: {e}\")\n            return False\n    \n    def is_premium_user(self, user_id: int) -> bool:\n        \"\"\"Check if user is premium\"\"\"\n        if self.fallback_mode:\n            for user in self.users_data.values():\n                if user.get('id') == user_id:\n                    return user.get('is_premium', False)\n            return False\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return False\n                \n            cursor = conn.cursor()\n            cursor.execute(\"SELECT is_premium FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else False\n        except Exception as e:\n            print(f\"Is premium user error: {e}\")\n            return False\n    \n    def get_subjects_by_class(self, class_level: str) -> list:\n        \"\"\"Get subjects for a specific class\"\"\"\n        if self.fallback_mode:\n            return [s for s in self.subjects_data if s['class'] == class_level]\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return []\n                \n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM subjects WHERE class = %s\", (class_level,))\n            subjects = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(subject) for subject in subjects]\n        except Exception as e:\n            print(f\"Get subjects error: {e}\")\n            return []\n    \n    def get_today_live_classes(self, user_id: int) -> list:\n        \"\"\"Get today's live classes for user's class\"\"\"\n        # Return empty list for demo\n        return []\n    \n    def get_user_courses(self, user_id: int) -> list:\n        \"\"\"Get user's enrolled courses\"\"\"\n        # Return empty list for demo\n        return []\n    \n    def add_notification(self, user_id: int, title: str, message: str, notification_type: str = 'info') -> bool:\n        \"\"\"Add notification for user\"\"\"\n        return True  # Demo mode\n    \n    def get_user_notifications(self, user_id: int) -> list:\n        \"\"\"Get user's notifications\"\"\"\n        return []  # Demo mode","size_bytes":15912},"utils/database_backup.py":{"content":"import os\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\nfrom datetime import datetime, date\nimport json\n\nclass DatabaseManager:\n    \"\"\"Manage database operations for the Sharpy Education app\"\"\"\n    \n    def __init__(self):\n        self.connection_string = os.getenv('DATABASE_URL')\n        self.init_database()\n    \n    def get_connection(self):\n        \"\"\"Get database connection\"\"\"\n        try:\n            return psycopg2.connect(self.connection_string)\n        except Exception as e:\n            print(f\"Database connection error: {e}\")\n            return None\n    \n    def init_database(self):\n        \"\"\"Initialize database tables\"\"\"\n        try:\n            conn = self.get_connection()\n            if not conn:\n                print(\"Database connection failed. Using fallback mode.\")\n                return\n            cursor = conn.cursor()\n            \n            # Users table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    phone VARCHAR(20) UNIQUE NOT NULL,\n                    email VARCHAR(255),\n                    school VARCHAR(255),\n                    class VARCHAR(50),\n                    address TEXT,\n                    password VARCHAR(255) NOT NULL,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    coins INTEGER DEFAULT 0,\n                    max_devices INTEGER DEFAULT 2,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Courses table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS courses (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    description TEXT,\n                    class VARCHAR(50) NOT NULL,\n                    price DECIMAL(10,2) DEFAULT 0,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    thumbnail_url TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Subjects table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS subjects (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    class VARCHAR(50) NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    questions INTEGER DEFAULT 50,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # User enrollments table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS user_enrollments (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    course_id INTEGER REFERENCES courses(id),\n                    progress INTEGER DEFAULT 0,\n                    enrolled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Live classes table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS live_classes (\n                    id SERIAL PRIMARY KEY,\n                    subject VARCHAR(255) NOT NULL,\n                    topic VARCHAR(255) NOT NULL,\n                    teacher VARCHAR(255) NOT NULL,\n                    class_date DATE NOT NULL,\n                    class_time TIME NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    class VARCHAR(50) NOT NULL,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # User activities table (for coins tracking)\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS user_activities (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    activity_type VARCHAR(50) NOT NULL,\n                    coins_earned INTEGER DEFAULT 0,\n                    description TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Test results table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS test_results (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    subject_id INTEGER REFERENCES subjects(id),\n                    score INTEGER NOT NULL,\n                    total_questions INTEGER NOT NULL,\n                    time_taken INTEGER,\n                    coins_earned INTEGER DEFAULT 0,\n                    taken_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Notifications table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS notifications (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    title VARCHAR(255) NOT NULL,\n                    message TEXT NOT NULL,\n                    type VARCHAR(50) DEFAULT 'info',\n                    is_read BOOLEAN DEFAULT FALSE,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n            # Insert sample data\n            self.insert_sample_data()\n            \n        except Exception as e:\n            print(f\"Database initialization error: {e}\")\n    \n    def insert_sample_data(self):\n        \"\"\"Insert sample data for testing\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            \n            # Sample subjects\n            sample_subjects = [\n                ('Mathematics', 'Class 10', 90, 60),\n                ('Physics', 'Class 10', 90, 60),\n                ('Chemistry', 'Class 10', 90, 60),\n                ('Biology', 'Class 10', 90, 60),\n                ('Mathematics', 'Class 12', 120, 80),\n                ('Physics', 'Class 12', 120, 80),\n                ('Chemistry', 'Class 12', 120, 80),\n                ('Biology', 'Class 12', 120, 80),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM subjects\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO subjects (name, class, duration, questions) VALUES (%s, %s, %s, %s)\",\n                    sample_subjects\n                )\n            \n            # Sample courses\n            sample_courses = [\n                ('Complete Mathematics Course', 'Comprehensive math course for Class 10', 'Class 10', 5000.00, True),\n                ('Physics Mastery', 'Master physics concepts for Class 10', 'Class 10', 4500.00, True),\n                ('Chemistry Fundamentals', 'Essential chemistry for Class 10', 'Class 10', 4000.00, True),\n                ('Biology Basics', 'Complete biology course for Class 10', 'Class 10', 3500.00, True),\n                ('Advanced Mathematics', 'Advanced math for Class 12', 'Class 12', 8000.00, True),\n                ('Physics for JEE', 'Physics preparation for JEE', 'Class 12', 7500.00, True),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM courses\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO courses (name, description, class, price, is_premium) VALUES (%s, %s, %s, %s, %s)\",\n                    sample_courses\n                )\n            \n            # Sample live classes for today\n            today = date.today()\n            sample_classes = [\n                ('Mathematics', 'Quadratic Equations', 'Dr. Sharma', today, '10:00:00', 60, 'Class 10'),\n                ('Physics', 'Light and Reflection', 'Prof. Patel', today, '14:00:00', 60, 'Class 10'),\n                ('Chemistry', 'Acids and Bases', 'Dr. Singh', today, '16:00:00', 60, 'Class 10'),\n            ]\n            \n            cursor.execute(\"DELETE FROM live_classes WHERE class_date = %s\", (today,))\n            cursor.executemany(\n                \"INSERT INTO live_classes (subject, topic, teacher, class_date, class_time, duration, class) VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n                sample_classes\n            )\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n        except Exception as e:\n            print(f\"Sample data insertion error: {e}\")\n    \n    def user_exists(self, phone: str) -> bool:\n        \"\"\"Check if user exists by phone number\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id FROM users WHERE phone = %s\", (phone,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result is not None\n        except Exception as e:\n            print(f\"User exists check error: {e}\")\n            return False\n    \n    def create_user(self, user_data: dict) -> bool:\n        \"\"\"Create a new user\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO users (name, phone, email, school, class, address, password, is_premium, coins, max_devices)\n                VALUES (%(name)s, %(phone)s, %(email)s, %(school)s, %(class)s, %(address)s, %(password)s, %(is_premium)s, %(coins)s, %(max_devices)s)\n            \"\"\", user_data)\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Create user error: {e}\")\n            return False\n    \n    def get_user_by_phone(self, phone: str) -> dict:\n        \"\"\"Get user data by phone number\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM users WHERE phone = %s\", (phone,))\n            user = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return dict(user) if user else None\n        except Exception as e:\n            print(f\"Get user error: {e}\")\n            return None\n    \n    def get_user_coins(self, user_id: int) -> int:\n        \"\"\"Get user's current coin balance\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT coins FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else 0\n        except Exception as e:\n            print(f\"Get user coins error: {e}\")\n            return 0\n    \n    def add_user_coins(self, user_id: int, coins: int) -> bool:\n        \"\"\"Add coins to user account\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET coins = coins + %s WHERE id = %s\", (coins, user_id))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Add user coins error: {e}\")\n            return False\n    \n    def is_premium_user(self, user_id: int) -> bool:\n        \"\"\"Check if user is premium\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT is_premium FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else False\n        except Exception as e:\n            print(f\"Is premium user error: {e}\")\n            return False\n    \n    def get_subjects_by_class(self, class_level: str) -> list:\n        \"\"\"Get subjects for a specific class\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM subjects WHERE class = %s\", (class_level,))\n            subjects = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(subject) for subject in subjects]\n        except Exception as e:\n            print(f\"Get subjects error: {e}\")\n            return []\n    \n    def get_today_live_classes(self, user_id: int) -> list:\n        \"\"\"Get today's live classes for user's class\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            \n            # Get user's class first\n            cursor.execute(\"SELECT class FROM users WHERE id = %s\", (user_id,))\n            user_class = cursor.fetchone()\n            if not user_class:\n                return []\n            \n            today = date.today()\n            cursor.execute(\"\"\"\n                SELECT * FROM live_classes \n                WHERE class_date = %s AND class = %s\n                ORDER BY class_time\n            \"\"\", (today, user_class['class']))\n            \n            classes = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(cls) for cls in classes]\n        except Exception as e:\n            print(f\"Get live classes error: {e}\")\n            return []\n    \n    def get_user_courses(self, user_id: int) -> list:\n        \"\"\"Get user's enrolled courses\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"\"\"\n                SELECT c.id, c.name, c.description, ue.progress\n                FROM courses c\n                JOIN user_enrollments ue ON c.id = ue.course_id\n                WHERE ue.user_id = %s\n            \"\"\", (user_id,))\n            courses = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(course) for course in courses]\n        except Exception as e:\n            print(f\"Get user courses error: {e}\")\n            return []\n    \n    def add_notification(self, user_id: int, title: str, message: str, notification_type: str = 'info') -> bool:\n        \"\"\"Add notification for user\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO notifications (user_id, title, message, type)\n                VALUES (%s, %s, %s, %s)\n            \"\"\", (user_id, title, message, notification_type))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Add notification error: {e}\")\n            return False\n    \n    def get_user_notifications(self, user_id: int) -> list:\n        \"\"\"Get user's notifications\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"\"\"\n                SELECT * FROM notifications \n                WHERE user_id = %s \n                ORDER BY created_at DESC\n                LIMIT 50\n            \"\"\", (user_id,))\n            notifications = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(notif) for notif in notifications]\n        except Exception as e:\n            print(f\"Get notifications error: {e}\")\n            return []","size_bytes":15539},"utils/otp_manager.py":{"content":"import os\nimport random\nimport string\nfrom datetime import datetime, timedelta\nimport streamlit as st\nfrom twilio.rest import Client\n\nclass OTPManager:\n    \"\"\"Handle OTP generation and verification with Twilio\"\"\"\n    \n    def __init__(self):\n        self.twilio_account_sid = os.getenv('TWILIO_ACCOUNT_SID')\n        self.twilio_auth_token = os.getenv('TWILIO_AUTH_TOKEN') \n        self.twilio_phone_number = os.getenv('TWILIO_PHONE_NUMBER')\n        \n        # Initialize Twilio client if credentials are available\n        if self.twilio_account_sid and self.twilio_auth_token:\n            self.client = Client(self.twilio_account_sid, self.twilio_auth_token)\n        else:\n            self.client = None\n    \n    def generate_otp(self, length: int = 6) -> str:\n        \"\"\"Generate random OTP\"\"\"\n        return ''.join(random.choices(string.digits, k=length))\n    \n    def send_otp(self, phone_number: str, otp: str) -> bool:\n        \"\"\"Send OTP via SMS using Twilio\"\"\"\n        if not self.client:\n            # Fallback: store OTP in session for demo purposes\n            st.session_state.demo_otp = otp\n            st.session_state.demo_phone = phone_number\n            st.info(f\"Demo Mode: Your OTP is {otp} (This would normally be sent via SMS)\")\n            return True\n        \n        try:\n            message = self.client.messages.create(\n                body=f\"Your Sharpy Education verification code is: {otp}. Valid for 5 minutes.\",\n                from_=self.twilio_phone_number,\n                to=phone_number\n            )\n            return True\n        except Exception as e:\n            print(f\"SMS sending error: {e}\")\n            return False\n    \n    def store_otp(self, phone_number: str, otp: str) -> None:\n        \"\"\"Store OTP with expiry time\"\"\"\n        expiry_time = datetime.now() + timedelta(minutes=5)\n        \n        # Store in session state (in production, use Redis or database)\n        if 'otp_data' not in st.session_state:\n            st.session_state.otp_data = {}\n        \n        st.session_state.otp_data[phone_number] = {\n            'otp': otp,\n            'expiry': expiry_time,\n            'attempts': 0\n        }\n    \n    def verify_otp(self, phone_number: str, entered_otp: str) -> tuple[bool, str]:\n        \"\"\"Verify OTP and return status with message\"\"\"\n        \n        # Check demo mode first\n        if hasattr(st.session_state, 'demo_otp') and hasattr(st.session_state, 'demo_phone'):\n            if st.session_state.demo_phone == phone_number and st.session_state.demo_otp == entered_otp:\n                # Clear demo OTP after successful verification\n                delattr(st.session_state, 'demo_otp')\n                delattr(st.session_state, 'demo_phone')\n                return True, \"OTP verified successfully!\"\n            else:\n                return False, \"Invalid OTP. Please try again.\"\n        \n        # Check if OTP data exists\n        if 'otp_data' not in st.session_state or phone_number not in st.session_state.otp_data:\n            return False, \"No OTP found. Please request a new OTP.\"\n        \n        otp_info = st.session_state.otp_data[phone_number]\n        \n        # Check if OTP has expired\n        if datetime.now() > otp_info['expiry']:\n            del st.session_state.otp_data[phone_number]\n            return False, \"OTP has expired. Please request a new one.\"\n        \n        # Check attempt limit\n        if otp_info['attempts'] >= 3:\n            del st.session_state.otp_data[phone_number]\n            return False, \"Too many failed attempts. Please request a new OTP.\"\n        \n        # Verify OTP\n        if otp_info['otp'] == entered_otp:\n            del st.session_state.otp_data[phone_number]\n            return True, \"OTP verified successfully!\"\n        else:\n            # Increment attempts\n            st.session_state.otp_data[phone_number]['attempts'] += 1\n            remaining_attempts = 3 - st.session_state.otp_data[phone_number]['attempts']\n            return False, f\"Invalid OTP. {remaining_attempts} attempts remaining.\"\n    \n    def resend_otp(self, phone_number: str) -> tuple[bool, str]:\n        \"\"\"Resend OTP to phone number\"\"\"\n        # Generate new OTP\n        new_otp = self.generate_otp()\n        \n        # Send OTP\n        if self.send_otp(phone_number, new_otp):\n            self.store_otp(phone_number, new_otp)\n            return True, \"New OTP sent successfully!\"\n        else:\n            return False, \"Failed to send OTP. Please try again.\"\n    \n    def is_valid_phone_number(self, phone_number: str) -> bool:\n        \"\"\"Validate phone number format\"\"\"\n        # Basic validation for Indian phone numbers\n        if not phone_number.startswith('+91'):\n            return False\n        \n        # Remove country code and check if remaining digits are valid\n        number_part = phone_number[3:]\n        if len(number_part) != 10 or not number_part.isdigit():\n            return False\n        \n        return True\n    \n    def format_phone_number(self, phone_number: str) -> str:\n        \"\"\"Format phone number to standard format\"\"\"\n        # Remove any spaces or special characters\n        cleaned_number = ''.join(filter(str.isdigit, phone_number))\n        \n        # Add country code if missing\n        if len(cleaned_number) == 10:\n            return f\"+91{cleaned_number}\"\n        elif len(cleaned_number) == 12 and cleaned_number.startswith('91'):\n            return f\"+{cleaned_number}\"\n        else:\n            return phone_number\n    \n    def cleanup_expired_otps(self) -> None:\n        \"\"\"Clean up expired OTPs from session\"\"\"\n        if 'otp_data' not in st.session_state:\n            return\n        \n        current_time = datetime.now()\n        expired_phones = []\n        \n        for phone, otp_info in st.session_state.otp_data.items():\n            if current_time > otp_info['expiry']:\n                expired_phones.append(phone)\n        \n        for phone in expired_phones:\n            del st.session_state.otp_data[phone]","size_bytes":5971},"deploy_package/pages/1_Courses.py":{"content":"import streamlit as st\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Courses\", page_icon=\"📚\", layout=\"wide\")\n\ndef show_courses_page():\n    \"\"\"Show courses page with class-specific and other classes courses\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to access courses.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"📚 Courses\")\n    st.markdown(\"Explore our comprehensive course offerings\")\n    \n    # Tabs for current class and other classes\n    tab1, tab2, tab3 = st.tabs([\"My Class Courses\", \"Other Classes\", \"Enrolled Courses\"])\n    \n    with tab1:\n        st.subheader(f\"Courses for {user_data['class']}\")\n        show_class_courses(user_data['class'], db_manager, user_data['id'])\n    \n    with tab2:\n        st.subheader(\"Explore Other Classes\")\n        \n        # Class selector\n        all_classes = [\n            \"Class 6\", \"Class 7\", \"Class 8\", \"Class 9\", \"Class 10\", \n            \"Class 11\", \"Class 12\", \"Engineering Entrance\", \"Medical Entrance\"\n        ]\n        \n        other_classes = [cls for cls in all_classes if cls != user_data['class']]\n        selected_class = st.selectbox(\"Select Class:\", other_classes)\n        \n        if selected_class:\n            show_class_courses(selected_class, db_manager, user_data['id'])\n    \n    with tab3:\n        st.subheader(\"Your Enrolled Courses\")\n        show_enrolled_courses(db_manager, user_data['id'])\n\ndef show_class_courses(class_level: str, db_manager: DatabaseManager, user_id: int):\n    \"\"\"Display courses for a specific class\"\"\"\n    try:\n        conn = db_manager.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            SELECT c.*, \n                   CASE WHEN ue.user_id IS NOT NULL THEN TRUE ELSE FALSE END as is_enrolled\n            FROM courses c\n            LEFT JOIN user_enrollments ue ON c.id = ue.course_id AND ue.user_id = %s\n            WHERE c.class = %s\n            ORDER BY c.name\n        \"\"\", (user_id, class_level))\n        \n        courses = cursor.fetchall()\n        cursor.close()\n        conn.close()\n        \n        if not courses:\n            st.info(f\"No courses available for {class_level} yet.\")\n            return\n        \n        # Display courses in grid\n        cols = st.columns(2)\n        for i, course in enumerate(courses):\n            with cols[i % 2]:\n                with st.container():\n                    st.markdown(\"\"\"\n                    <div style=\"border: 1px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 10px 0; background: white;\">\n                    \"\"\", unsafe_allow_html=True)\n                    \n                    st.subheader(course[1])  # course name\n                    st.write(course[2])  # description\n                    \n                    col1, col2 = st.columns([1, 1])\n                    with col1:\n                        st.write(f\"**Class:** {course[3]}\")\n                        st.write(f\"**Price:** ₹{course[4]:,.2f}\")\n                    \n                    with col2:\n                        if course[5]:  # is_premium\n                            st.markdown(\"🌟 **Premium Course**\")\n                        else:\n                            st.markdown(\"🆓 **Free Course**\")\n                    \n                    # Enrollment button\n                    if course[7]:  # is_enrolled\n                        st.success(\"✅ Already Enrolled\")\n                        if st.button(\"Continue Learning\", key=f\"continue_{course[0]}\"):\n                            st.success(f\"Opening {course[1]}...\")\n                    else:\n                        if st.button(f\"Enroll Now\", key=f\"enroll_{course[0]}\", type=\"primary\"):\n                            if enroll_user_in_course(db_manager, user_id, course[0]):\n                                st.success(\"Successfully enrolled! Refreshing page...\")\n                                st.rerun()\n                            else:\n                                st.error(\"Enrollment failed. Please try again.\")\n                    \n                    st.markdown(\"</div>\", unsafe_allow_html=True)\n                    \n    except Exception as e:\n        st.error(f\"Error loading courses: {e}\")\n\ndef show_enrolled_courses(db_manager: DatabaseManager, user_id: int):\n    \"\"\"Display user's enrolled courses with progress\"\"\"\n    courses = db_manager.get_user_courses(user_id)\n    \n    if not courses:\n        st.info(\"You haven't enrolled in any courses yet. Check out our course offerings!\")\n        return\n    \n    for course in courses:\n        with st.container():\n            st.markdown(\"\"\"\n            <div style=\"border: 1px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 10px 0; background: white;\">\n            \"\"\", unsafe_allow_html=True)\n            \n            col1, col2, col3 = st.columns([2, 1, 1])\n            \n            with col1:\n                st.subheader(course['name'])\n                st.write(course['description'])\n            \n            with col2:\n                st.write(f\"**Progress: {course['progress']}%**\")\n                # Progress bar\n                progress_html = f\"\"\"\n                <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%;\">\n                    <div style=\"background: #4CAF50; height: 100%; width: {course['progress']}%; border-radius: 10px;\"></div>\n                </div>\n                \"\"\"\n                st.markdown(progress_html, unsafe_allow_html=True)\n            \n            with col3:\n                if st.button(\"Continue\", key=f\"continue_enrolled_{course['id']}\"):\n                    show_course_content(course)\n            \n            st.markdown(\"</div>\", unsafe_allow_html=True)\n\ndef enroll_user_in_course(db_manager: DatabaseManager, user_id: int, course_id: int) -> bool:\n    \"\"\"Enroll user in a course\"\"\"\n    try:\n        conn = db_manager.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            INSERT INTO user_enrollments (user_id, course_id, progress)\n            VALUES (%s, %s, 0)\n        \"\"\", (user_id, course_id))\n        conn.commit()\n        cursor.close()\n        conn.close()\n        \n        # Add notification\n        db_manager.add_notification(\n            user_id, \n            \"Course Enrollment\", \n            \"Successfully enrolled in new course!\", \n            \"success\"\n        )\n        \n        return True\n    except Exception as e:\n        print(f\"Enrollment error: {e}\")\n        return False\n\ndef show_course_content(course: dict):\n    \"\"\"Show course content structure\"\"\"\n    st.subheader(f\"📖 {course['name']}\")\n    \n    # Sample course structure\n    chapters = [\n        {\n            \"name\": \"Introduction to Concepts\",\n            \"lectures\": [\n                {\"name\": \"Getting Started\", \"duration\": \"15:30\", \"completed\": True},\n                {\"name\": \"Basic Principles\", \"duration\": \"22:45\", \"completed\": True},\n                {\"name\": \"Practice Problems\", \"duration\": \"18:20\", \"completed\": False},\n            ]\n        },\n        {\n            \"name\": \"Advanced Topics\",\n            \"lectures\": [\n                {\"name\": \"Complex Theories\", \"duration\": \"25:10\", \"completed\": False},\n                {\"name\": \"Real-world Applications\", \"duration\": \"20:35\", \"completed\": False},\n                {\"name\": \"Case Studies\", \"duration\": \"30:15\", \"completed\": False},\n            ]\n        },\n        {\n            \"name\": \"Assessment and Practice\",\n            \"lectures\": [\n                {\"name\": \"Practice Test 1\", \"duration\": \"60:00\", \"completed\": False},\n                {\"name\": \"Mock Exam\", \"duration\": \"120:00\", \"completed\": False},\n            ]\n        }\n    ]\n    \n    for chapter in chapters:\n        with st.expander(f\"📚 {chapter['name']}\"):\n            for lecture in chapter['lectures']:\n                col1, col2, col3 = st.columns([3, 1, 1])\n                \n                with col1:\n                    if lecture['completed']:\n                        st.write(f\"✅ {lecture['name']}\")\n                    else:\n                        st.write(f\"📹 {lecture['name']}\")\n                \n                with col2:\n                    st.write(f\"⏱️ {lecture['duration']}\")\n                \n                with col3:\n                    if lecture['completed']:\n                        if st.button(\"Review\", key=f\"review_{lecture['name']}\"):\n                            st.success(f\"Reviewing: {lecture['name']}\")\n                    else:\n                        if st.button(\"Start\", key=f\"start_{lecture['name']}\", type=\"primary\"):\n                            st.success(f\"Starting: {lecture['name']}\")\n                            # Award coins for watching\n                            db_manager = DatabaseManager()\n                            db_manager.add_user_coins(st.session_state.user_data['id'], 6)\n\nif __name__ == \"__main__\":\n    show_courses_page()","size_bytes":8962},"deploy_package/pages/2_Journey.py":{"content":"import streamlit as st\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime, timedelta\nimport pandas as pd\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"My Journey\", page_icon=\"🎯\", layout=\"wide\")\n\ndef show_journey_page():\n    \"\"\"Show user's learning journey and analytics\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to view your learning journey.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🎯 My Learning Journey\")\n    st.markdown(f\"Track your progress and achievements, {user_data['name']}!\")\n    \n    # User stats overview\n    col1, col2, col3, col4 = st.columns(4)\n    \n    with col1:\n        coins = db_manager.get_user_coins(user_data['id'])\n        st.metric(\"Total Coins Earned\", f\"🪙 {coins}\")\n    \n    with col2:\n        # Mock data for videos watched\n        videos_watched = 45  # In real app, this would come from database\n        st.metric(\"Videos Watched\", f\"📹 {videos_watched}\")\n    \n    with col3:\n        # Mock data for tests taken\n        tests_taken = 12  # In real app, this would come from database\n        st.metric(\"Tests Completed\", f\"📝 {tests_taken}\")\n    \n    with col4:\n        # Mock data for study time\n        study_hours = 78  # In real app, this would come from database\n        st.metric(\"Study Hours\", f\"⏰ {study_hours}h\")\n    \n    st.markdown(\"---\")\n    \n    # Journey sections\n    tab1, tab2, tab3, tab4 = st.tabs([\"📊 Analytics\", \"🏆 Achievements\", \"📈 Progress\", \"🎯 Goals\"])\n    \n    with tab1:\n        show_analytics_section(user_data, db_manager)\n    \n    with tab2:\n        show_achievements_section(user_data, db_manager)\n    \n    with tab3:\n        show_progress_section(user_data, db_manager)\n    \n    with tab4:\n        show_goals_section(user_data, db_manager)\n\ndef show_analytics_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show detailed analytics\"\"\"\n    st.subheader(\"📊 Your Learning Analytics\")\n    \n    # Daily activity chart\n    st.write(\"### Daily Activity (Last 30 Days)\")\n    \n    # Generate mock daily activity data\n    dates = pd.date_range(end=datetime.now(), periods=30, freq='D')\n    activity_data = {\n        'Date': dates,\n        'Videos Watched': [max(0, int(5 * (0.5 + 0.5 * abs(hash(str(date)) % 100) / 100))) for date in dates],\n        'Tests Taken': [max(0, int(2 * (0.3 + 0.7 * abs(hash(str(date) + 'test') % 100) / 100))) for date in dates],\n        'Study Hours': [max(0, int(8 * (0.4 + 0.6 * abs(hash(str(date) + 'hours') % 100) / 100))) for date in dates]\n    }\n    \n    df_activity = pd.DataFrame(activity_data)\n    \n    # Activity line chart\n    fig_activity = go.Figure()\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Videos Watched'],\n        mode='lines+markers',\n        name='Videos Watched',\n        line=dict(color='#FF6B6B')\n    ))\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Tests Taken'],\n        mode='lines+markers',\n        name='Tests Taken',\n        line=dict(color='#4ECDC4')\n    ))\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Study Hours'],\n        mode='lines+markers',\n        name='Study Hours',\n        line=dict(color='#45B7D1')\n    ))\n    \n    fig_activity.update_layout(\n        title=\"Daily Learning Activity\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Count\",\n        hovermode='x unified'\n    )\n    \n    st.plotly_chart(fig_activity, use_container_width=True)\n    \n    # Subject performance\n    st.write(\"### Subject-wise Performance\")\n    \n    subjects_data = {\n        'Subject': ['Mathematics', 'Physics', 'Chemistry', 'Biology'],\n        'Average Score': [78, 82, 75, 85],\n        'Tests Taken': [4, 3, 2, 3]\n    }\n    \n    df_subjects = pd.DataFrame(subjects_data)\n    \n    fig_subjects = px.bar(\n        df_subjects, \n        x='Subject', \n        y='Average Score',\n        color='Average Score',\n        title=\"Average Scores by Subject\",\n        color_continuous_scale='Blues'\n    )\n    \n    st.plotly_chart(fig_subjects, use_container_width=True)\n    \n    # Weekly pattern\n    st.write(\"### Weekly Study Pattern\")\n    \n    weekly_data = {\n        'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n        'Study Hours': [6, 5, 7, 6, 4, 8, 5]\n    }\n    \n    fig_weekly = px.bar(\n        x=weekly_data['Day'],\n        y=weekly_data['Study Hours'],\n        title=\"Study Hours by Day of Week\",\n        color=weekly_data['Study Hours'],\n        color_continuous_scale='Greens'\n    )\n    \n    st.plotly_chart(fig_weekly, use_container_width=True)\n\ndef show_achievements_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show user achievements and badges\"\"\"\n    st.subheader(\"🏆 Your Achievements\")\n    \n    # Achievement badges\n    achievements = [\n        {\n            \"title\": \"First Steps\",\n            \"description\": \"Completed your first video lesson\",\n            \"icon\": \"🌟\",\n            \"earned\": True,\n            \"date\": \"2024-01-15\"\n        },\n        {\n            \"title\": \"Test Taker\",\n            \"description\": \"Completed your first test\",\n            \"icon\": \"📝\",\n            \"earned\": True,\n            \"date\": \"2024-01-18\"\n        },\n        {\n            \"title\": \"Consistent Learner\",\n            \"description\": \"Studied for 7 consecutive days\",\n            \"icon\": \"🔥\",\n            \"earned\": True,\n            \"date\": \"2024-01-25\"\n        },\n        {\n            \"title\": \"High Scorer\",\n            \"description\": \"Scored above 90% in a test\",\n            \"icon\": \"🎯\",\n            \"earned\": False,\n            \"date\": None\n        },\n        {\n            \"title\": \"Video Master\",\n            \"description\": \"Watched 50 video lessons\",\n            \"icon\": \"📺\",\n            \"earned\": True,\n            \"date\": \"2024-02-10\"\n        },\n        {\n            \"title\": \"Coin Collector\",\n            \"description\": \"Earned 100 coins\",\n            \"icon\": \"🪙\",\n            \"earned\": True,\n            \"date\": \"2024-02-05\"\n        }\n    ]\n    \n    # Display achievements in grid\n    cols = st.columns(3)\n    for i, achievement in enumerate(achievements):\n        with cols[i % 3]:\n            if achievement['earned']:\n                st.markdown(f\"\"\"\n                <div style=\"\n                    border: 2px solid #4CAF50;\n                    border-radius: 15px;\n                    padding: 20px;\n                    margin: 10px 0;\n                    background: linear-gradient(135deg, #e8f5e8 0%, #ffffff 100%);\n                    text-align: center;\n                \">\n                    <div style=\"font-size: 3rem;\">{achievement['icon']}</div>\n                    <h4 style=\"color: #4CAF50;\">{achievement['title']}</h4>\n                    <p>{achievement['description']}</p>\n                    <small style=\"color: #666;\">Earned on {achievement['date']}</small>\n                </div>\n                \"\"\", unsafe_allow_html=True)\n            else:\n                st.markdown(f\"\"\"\n                <div style=\"\n                    border: 2px solid #ddd;\n                    border-radius: 15px;\n                    padding: 20px;\n                    margin: 10px 0;\n                    background: #f9f9f9;\n                    text-align: center;\n                    opacity: 0.6;\n                \">\n                    <div style=\"font-size: 3rem; filter: grayscale(100%);\">{achievement['icon']}</div>\n                    <h4 style=\"color: #999;\">{achievement['title']}</h4>\n                    <p>{achievement['description']}</p>\n                    <small style=\"color: #999;\">Not earned yet</small>\n                </div>\n                \"\"\", unsafe_allow_html=True)\n    \n    # Achievement progress\n    earned_count = sum(1 for a in achievements if a['earned'])\n    total_count = len(achievements)\n    \n    st.markdown(f\"\"\"\n    <div style=\"text-align: center; margin: 30px 0;\">\n        <h3>Achievement Progress: {earned_count}/{total_count}</h3>\n        <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%; margin: 10px 0;\">\n            <div style=\"background: #4CAF50; height: 100%; width: {(earned_count/total_count)*100}%; border-radius: 10px;\"></div>\n        </div>\n        <p>You've earned {earned_count} out of {total_count} achievements!</p>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n\ndef show_progress_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show learning progress\"\"\"\n    st.subheader(\"📈 Learning Progress\")\n    \n    # Course progress\n    courses = db_manager.get_user_courses(user_data['id'])\n    \n    if courses:\n        st.write(\"### Course Progress\")\n        for course in courses:\n            st.write(f\"**{course['name']}**\")\n            progress = course['progress']\n            \n            # Progress bar with animation effect\n            progress_html = f\"\"\"\n            <div style=\"background: #e0e0e0; border-radius: 10px; height: 25px; width: 100%; margin: 10px 0; position: relative;\">\n                <div style=\"\n                    background: linear-gradient(90deg, #4CAF50 0%, #45a049 100%);\n                    height: 100%;\n                    width: {progress}%;\n                    border-radius: 10px;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    color: white;\n                    font-weight: bold;\n                    transition: width 1s ease-in-out;\n                \">\n                    {progress}%\n                </div>\n            </div>\n            \"\"\"\n            st.markdown(progress_html, unsafe_allow_html=True)\n    \n    # Test performance over time\n    st.write(\"### Test Performance Over Time\")\n    \n    test_dates = pd.date_range(end=datetime.now(), periods=10, freq='W')\n    test_scores = [65, 72, 78, 75, 82, 85, 88, 84, 90, 87]\n    \n    fig_progress = go.Figure()\n    \n    fig_progress.add_trace(go.Scatter(\n        x=test_dates,\n        y=test_scores,\n        mode='lines+markers+text',\n        text=test_scores,\n        textposition=\"top center\",\n        line=dict(color='#FF6B6B', width=3),\n        marker=dict(size=8, color='#FF6B6B'),\n        name='Test Scores'\n    ))\n    \n    fig_progress.update_layout(\n        title=\"Test Score Improvement\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Score (%)\",\n        yaxis=dict(range=[0, 100]),\n        showlegend=False\n    )\n    \n    st.plotly_chart(fig_progress, use_container_width=True)\n    \n    # Study streak\n    st.write(\"### Study Streak\")\n    current_streak = 15  # Mock data\n    best_streak = 23  # Mock data\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        st.metric(\"Current Streak\", f\"🔥 {current_streak} days\")\n    with col2:\n        st.metric(\"Best Streak\", f\"🏆 {best_streak} days\")\n\ndef show_goals_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show and manage learning goals\"\"\"\n    st.subheader(\"🎯 Learning Goals\")\n    \n    # Current goals\n    goals = [\n        {\n            \"title\": \"Study 2 hours daily\",\n            \"current\": 1.5,\n            \"target\": 2.0,\n            \"unit\": \"hours\"\n        },\n        {\n            \"title\": \"Complete 3 tests per week\",\n            \"current\": 2,\n            \"target\": 3,\n            \"unit\": \"tests\"\n        },\n        {\n            \"title\": \"Maintain 85% average score\",\n            \"current\": 82,\n            \"target\": 85,\n            \"unit\": \"%\"\n        }\n    ]\n    \n    for goal in goals:\n        progress = min(100, (goal['current'] / goal['target']) * 100)\n        \n        st.write(f\"**{goal['title']}**\")\n        st.write(f\"Progress: {goal['current']}{goal['unit']} / {goal['target']}{goal['unit']}\")\n        \n        color = \"#4CAF50\" if progress >= 100 else \"#FF9800\" if progress >= 75 else \"#FF6B6B\"\n        \n        progress_html = f\"\"\"\n        <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%; margin: 10px 0;\">\n            <div style=\"background: {color}; height: 100%; width: {progress}%; border-radius: 10px;\"></div>\n        </div>\n        \"\"\"\n        st.markdown(progress_html, unsafe_allow_html=True)\n        st.markdown(\"---\")\n    \n    # Add new goal\n    st.write(\"### Set New Goal\")\n    with st.form(\"new_goal\"):\n        goal_title = st.text_input(\"Goal Description\")\n        target_value = st.number_input(\"Target Value\", min_value=1)\n        goal_unit = st.selectbox(\"Unit\", [\"hours\", \"tests\", \"videos\", \"days\", \"%\"])\n        \n        if st.form_submit_button(\"Add Goal\", type=\"primary\"):\n            st.success(f\"Goal added: {goal_title}\")\n            st.info(\"Goal tracking will be implemented in future updates.\")\n    \n    # Motivational message for non-premium users\n    if not db_manager.is_premium_user(user_data['id']):\n        st.markdown(\"\"\"\n        <div style=\"\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 30px;\n            border-radius: 15px;\n            text-align: center;\n            margin: 30px 0;\n        \">\n            <h3>🚀 It's time for you to study with Sharpy & Excel in your Life!</h3>\n            <p>Unlock premium features to accelerate your learning journey</p>\n            <button style=\"\n                background: white;\n                color: #667eea;\n                border: none;\n                padding: 10px 20px;\n                border-radius: 5px;\n                font-weight: bold;\n                cursor: pointer;\n            \">Upgrade to Premium</button>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\nif __name__ == \"__main__\":\n    show_journey_page()","size_bytes":13788},"deploy_package/pages/3_Notifications.py":{"content":"import streamlit as st\nfrom datetime import datetime\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Notifications\", page_icon=\"🔔\", layout=\"wide\")\n\ndef show_notifications_page():\n    \"\"\"Show user notifications and messaging\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to view notifications.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🔔 Notifications\")\n    \n    # Notification tabs\n    tab1, tab2, tab3 = st.tabs([\"📬 All Notifications\", \"🎥 Live Classes\", \"📢 Announcements\"])\n    \n    with tab1:\n        show_all_notifications(user_data, db_manager)\n    \n    with tab2:\n        show_live_class_notifications(user_data, db_manager)\n    \n    with tab3:\n        show_announcements(user_data, db_manager)\n\ndef show_all_notifications(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show all user notifications\"\"\"\n    st.subheader(\"📬 Your Notifications\")\n    \n    notifications = db_manager.get_user_notifications(user_data['id'])\n    \n    if not notifications:\n        st.info(\"No notifications yet. We'll notify you about important updates!\")\n        return\n    \n    # Mark all as read button\n    col1, col2 = st.columns([1, 4])\n    with col1:\n        if st.button(\"Mark All Read\", type=\"secondary\"):\n            st.success(\"All notifications marked as read!\")\n    \n    # Display notifications\n    for notification in notifications:\n        # Notification card styling based on type and read status\n        card_style = get_notification_card_style(notification['type'], notification['is_read'])\n        \n        st.markdown(f\"\"\"\n        <div style=\"{card_style}\">\n            <div style=\"display: flex; justify-content: space-between; align-items: flex-start;\">\n                <div style=\"flex: 1;\">\n                    <h4 style=\"margin: 0 0 10px 0; color: #333;\">{get_notification_icon(notification['type'])} {notification['title']}</h4>\n                    <p style=\"margin: 0 0 10px 0; color: #666;\">{notification['message']}</p>\n                    <small style=\"color: #999;\">{format_notification_time(notification['created_at'])}</small>\n                </div>\n                <div>\n                    {get_notification_badge(notification['type'])}\n                </div>\n            </div>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\ndef show_live_class_notifications(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show live class notifications and reminders\"\"\"\n    st.subheader(\"🎥 Live Class Updates\")\n    \n    # Today's live classes\n    live_classes = db_manager.get_today_live_classes(user_data['id'])\n    \n    if live_classes:\n        st.write(\"### Today's Schedule\")\n        for class_info in live_classes:\n            st.markdown(f\"\"\"\n            <div style=\"\n                border-left: 4px solid #FF6B6B;\n                background: #fff5f5;\n                padding: 15px;\n                margin: 10px 0;\n                border-radius: 5px;\n            \">\n                <h4 style=\"margin: 0; color: #FF6B6B;\">🎥 {class_info['subject']} - {class_info['topic']}</h4>\n                <p style=\"margin: 5px 0;\">👨‍🏫 Teacher: {class_info['teacher']}</p>\n                <p style=\"margin: 5px 0;\">⏰ Time: {class_info['time']}</p>\n                <p style=\"margin: 5px 0;\">📚 Duration: {class_info['duration']} minutes</p>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            col1, col2 = st.columns([1, 3])\n            with col1:\n                if st.button(f\"Join Now\", key=f\"join_{class_info['id']}\", type=\"primary\"):\n                    st.success(\"Joining live class...\")\n                    # Award coins for attending live class\n                    db_manager.add_user_coins(user_data['id'], 10)\n                    st.info(\"You earned 10 coins for attending the live class!\")\n    else:\n        st.info(\"No live classes scheduled for today.\")\n    \n    # Notification preferences\n    st.markdown(\"---\")\n    st.write(\"### Notification Preferences\")\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        live_class_reminder = st.checkbox(\"Live Class Reminders\", value=True)\n        new_content_alert = st.checkbox(\"New Content Alerts\", value=True)\n    \n    with col2:\n        test_reminder = st.checkbox(\"Test Reminders\", value=True)\n        achievement_notification = st.checkbox(\"Achievement Notifications\", value=True)\n    \n    if st.button(\"Save Preferences\"):\n        st.success(\"Notification preferences saved!\")\n\ndef show_announcements(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show important announcements\"\"\"\n    st.subheader(\"📢 Important Announcements\")\n    \n    # Sample announcements\n    announcements = [\n        {\n            \"title\": \"New Course Launch: Advanced Mathematics\",\n            \"content\": \"We're excited to announce the launch of our Advanced Mathematics course for Class 12 students. Enroll now to get early bird discount!\",\n            \"date\": \"2024-07-20\",\n            \"type\": \"course\",\n            \"priority\": \"high\"\n        },\n        {\n            \"title\": \"System Maintenance Scheduled\",\n            \"content\": \"Scheduled maintenance on July 25th from 2:00 AM to 4:00 AM IST. The platform will be temporarily unavailable.\",\n            \"date\": \"2024-07-18\",\n            \"type\": \"system\",\n            \"priority\": \"medium\"\n        },\n        {\n            \"title\": \"New Achievement Badges Available\",\n            \"content\": \"Check out the new achievement badges in your journey section. Complete challenges to earn exclusive rewards!\",\n            \"date\": \"2024-07-15\",\n            \"type\": \"feature\",\n            \"priority\": \"low\"\n        },\n        {\n            \"title\": \"Live Doubt Clearing Session\",\n            \"content\": \"Join our special doubt clearing session this weekend. Get your questions answered by expert teachers.\",\n            \"date\": \"2024-07-22\",\n            \"type\": \"event\",\n            \"priority\": \"high\"\n        }\n    ]\n    \n    for announcement in announcements:\n        priority_color = {\n            \"high\": \"#FF6B6B\",\n            \"medium\": \"#FFB366\", \n            \"low\": \"#4ECDC4\"\n        }\n        \n        st.markdown(f\"\"\"\n        <div style=\"\n            border: 1px solid {priority_color[announcement['priority']]};\n            border-left: 5px solid {priority_color[announcement['priority']]};\n            background: white;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        \">\n            <div style=\"display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;\">\n                <h4 style=\"margin: 0; color: {priority_color[announcement['priority']]};\">\n                    {get_announcement_icon(announcement['type'])} {announcement['title']}\n                </h4>\n                <span style=\"\n                    background: {priority_color[announcement['priority']]};\n                    color: white;\n                    padding: 2px 8px;\n                    border-radius: 12px;\n                    font-size: 12px;\n                    font-weight: bold;\n                \">\n                    {announcement['priority'].upper()}\n                </span>\n            </div>\n            <p style=\"color: #666; margin: 10px 0;\">{announcement['content']}</p>\n            <small style=\"color: #999;\">📅 {announcement['date']}</small>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    # Subscribe to announcements\n    st.markdown(\"---\")\n    st.write(\"### Stay Updated\")\n    \n    col1, col2 = st.columns([2, 1])\n    with col1:\n        email_notifications = st.checkbox(\"Email Notifications\", value=True)\n        sms_notifications = st.checkbox(\"SMS Notifications\", value=False)\n    \n    with col2:\n        if st.button(\"Update Subscription\", type=\"primary\"):\n            st.success(\"Subscription preferences updated!\")\n\ndef get_notification_card_style(notification_type: str, is_read: bool) -> str:\n    \"\"\"Get CSS style for notification card\"\"\"\n    opacity = \"0.7\" if is_read else \"1.0\"\n    border_color = {\n        \"info\": \"#4ECDC4\",\n        \"success\": \"#4CAF50\",\n        \"warning\": \"#FFB366\",\n        \"error\": \"#FF6B6B\"\n    }.get(notification_type, \"#ddd\")\n    \n    return f\"\"\"\n        border: 1px solid {border_color};\n        border-left: 4px solid {border_color};\n        background: white;\n        padding: 15px;\n        margin: 10px 0;\n        border-radius: 5px;\n        opacity: {opacity};\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    \"\"\"\n\ndef get_notification_icon(notification_type: str) -> str:\n    \"\"\"Get icon for notification type\"\"\"\n    icons = {\n        \"info\": \"ℹ️\",\n        \"success\": \"✅\",\n        \"warning\": \"⚠️\",\n        \"error\": \"❌\",\n        \"course\": \"📚\",\n        \"test\": \"📝\",\n        \"achievement\": \"🏆\"\n    }\n    return icons.get(notification_type, \"📢\")\n\ndef get_notification_badge(notification_type: str) -> str:\n    \"\"\"Get badge for notification type\"\"\"\n    colors = {\n        \"info\": \"#4ECDC4\",\n        \"success\": \"#4CAF50\",\n        \"warning\": \"#FFB366\",\n        \"error\": \"#FF6B6B\"\n    }\n    \n    color = colors.get(notification_type, \"#ddd\")\n    return f\"\"\"\n    <span style=\"\n        background: {color};\n        color: white;\n        padding: 2px 6px;\n        border-radius: 10px;\n        font-size: 10px;\n        font-weight: bold;\n    \">\n        {notification_type.upper()}\n    </span>\n    \"\"\"\n\ndef get_announcement_icon(announcement_type: str) -> str:\n    \"\"\"Get icon for announcement type\"\"\"\n    icons = {\n        \"course\": \"📚\",\n        \"system\": \"⚙️\",\n        \"feature\": \"✨\",\n        \"event\": \"🎯\"\n    }\n    return icons.get(announcement_type, \"📢\")\n\ndef format_notification_time(timestamp) -> str:\n    \"\"\"Format notification timestamp\"\"\"\n    # In a real app, this would properly parse the timestamp\n    return \"2 hours ago\"  # Placeholder\n\nif __name__ == \"__main__\":\n    show_notifications_page()","size_bytes":10034},"deploy_package/pages/4_Shorts.py":{"content":"import streamlit as st\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Educational Shorts\", page_icon=\"🎬\", layout=\"wide\")\n\ndef show_shorts_page():\n    \"\"\"Show educational shorts/videos page\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to access educational shorts.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🎬 Educational Shorts\")\n    st.markdown(\"Quick learning videos to boost your knowledge!\")\n    \n    # Filter options\n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        subject_filter = st.selectbox(\"Subject\", \n            [\"All\", \"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\", \"English\"])\n    \n    with col2:\n        duration_filter = st.selectbox(\"Duration\", \n            [\"All\", \"Under 2 min\", \"2-5 min\", \"5-10 min\"])\n    \n    with col3:\n        difficulty_filter = st.selectbox(\"Difficulty\", \n            [\"All\", \"Beginner\", \"Intermediate\", \"Advanced\"])\n    \n    st.markdown(\"---\")\n    \n    # Educational shorts content\n    show_shorts_grid(user_data, db_manager, subject_filter, duration_filter, difficulty_filter)\n\ndef show_shorts_grid(user_data: dict, db_manager: DatabaseManager, subject: str, duration: str, difficulty: str):\n    \"\"\"Display shorts in a grid format\"\"\"\n    \n    # Sample educational shorts data\n    shorts = [\n        {\n            \"id\": 1,\n            \"title\": \"Quadratic Formula in 60 Seconds\",\n            \"subject\": \"Mathematics\",\n            \"duration\": \"1:00\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"📊\",\n            \"views\": \"12.5K\",\n            \"likes\": \"1.2K\",\n            \"description\": \"Master the quadratic formula quickly with this short explanation!\",\n            \"coins_reward\": 8\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Newton's Laws Explained\",\n            \"subject\": \"Physics\",\n            \"duration\": \"2:30\",\n            \"difficulty\": \"Beginner\",\n            \"thumbnail\": \"🔬\",\n            \"views\": \"25.3K\",\n            \"likes\": \"2.8K\",\n            \"description\": \"Understanding Newton's three laws of motion in simple terms.\",\n            \"coins_reward\": 10\n        },\n        {\n            \"id\": 3,\n            \"title\": \"Periodic Table Tricks\",\n            \"subject\": \"Chemistry\",\n            \"duration\": \"1:45\",\n            \"difficulty\": \"Beginner\",\n            \"thumbnail\": \"⚗️\",\n            \"views\": \"18.7K\",\n            \"likes\": \"1.9K\",\n            \"description\": \"Memory tricks to remember the periodic table easily!\",\n            \"coins_reward\": 9\n        },\n        {\n            \"id\": 4,\n            \"title\": \"DNA Structure Quick Review\",\n            \"subject\": \"Biology\",\n            \"duration\": \"2:15\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"🧬\",\n            \"views\": \"15.2K\",\n            \"likes\": \"1.5K\",\n            \"description\": \"Quick overview of DNA structure and its components.\",\n            \"coins_reward\": 11\n        },\n        {\n            \"id\": 5,\n            \"title\": \"Calculus Limits Simplified\",\n            \"subject\": \"Mathematics\",\n            \"duration\": \"3:20\",\n            \"difficulty\": \"Advanced\",\n            \"thumbnail\": \"📈\",\n            \"views\": \"8.9K\",\n            \"likes\": \"934\",\n            \"description\": \"Understanding limits in calculus with simple examples.\",\n            \"coins_reward\": 15\n        },\n        {\n            \"id\": 6,\n            \"title\": \"Electromagnetic Waves Basics\",\n            \"subject\": \"Physics\",\n            \"duration\": \"2:45\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"📡\",\n            \"views\": \"11.4K\",\n            \"likes\": \"1.1K\",\n            \"description\": \"Introduction to electromagnetic spectrum and properties.\",\n            \"coins_reward\": 12\n        }\n    ]\n    \n    # Filter shorts based on selection\n    filtered_shorts = filter_shorts(shorts, subject, duration, difficulty)\n    \n    if not filtered_shorts:\n        st.info(\"No shorts match your current filters. Try adjusting your selection!\")\n        return\n    \n    # Display shorts in responsive grid\n    cols_per_row = 2\n    rows = len(filtered_shorts) // cols_per_row + (1 if len(filtered_shorts) % cols_per_row else 0)\n    \n    for row in range(rows):\n        cols = st.columns(cols_per_row)\n        for col_idx in range(cols_per_row):\n            short_idx = row * cols_per_row + col_idx\n            if short_idx < len(filtered_shorts):\n                short = filtered_shorts[short_idx]\n                with cols[col_idx]:\n                    show_short_card(short, user_data, db_manager)\n\ndef show_short_card(short: dict, user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Display individual short card\"\"\"\n    \n    # Short card with custom styling\n    st.markdown(f\"\"\"\n    <div style=\"\n        border: 1px solid #e0e0e0;\n        border-radius: 15px;\n        padding: 0;\n        margin: 15px 0;\n        background: white;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        overflow: hidden;\n        transition: transform 0.2s;\n    \">\n        <!-- Video thumbnail area -->\n        <div style=\"\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            height: 200px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            position: relative;\n        \">\n            <div style=\"font-size: 4rem; color: white;\">{short['thumbnail']}</div>\n            <div style=\"\n                position: absolute;\n                top: 10px;\n                right: 10px;\n                background: rgba(0,0,0,0.7);\n                color: white;\n                padding: 5px 10px;\n                border-radius: 15px;\n                font-size: 12px;\n                font-weight: bold;\n            \">\n                {short['duration']}\n            </div>\n            <div style=\"\n                position: absolute;\n                bottom: 10px;\n                right: 10px;\n                background: #FFD700;\n                color: #333;\n                padding: 3px 8px;\n                border-radius: 12px;\n                font-size: 11px;\n                font-weight: bold;\n            \">\n                +{short['coins_reward']} coins\n            </div>\n        </div>\n        \n        <!-- Content area -->\n        <div style=\"padding: 15px;\">\n            <h4 style=\"margin: 0 0 10px 0; color: #333; font-size: 16px;\">{short['title']}</h4>\n            <p style=\"margin: 0 0 10px 0; color: #666; font-size: 13px; line-height: 1.4;\">\n                {short['description']}\n            </p>\n            \n            <!-- Stats -->\n            <div style=\"display: flex; justify-content: space-between; margin: 10px 0; font-size: 12px; color: #999;\">\n                <span>👀 {short['views']} views</span>\n                <span>👍 {short['likes']} likes</span>\n                <span>📚 {short['subject']}</span>\n            </div>\n            \n            <!-- Difficulty badge -->\n            <div style=\"margin: 10px 0;\">\n                <span style=\"\n                    background: {get_difficulty_color(short['difficulty'])};\n                    color: white;\n                    padding: 2px 8px;\n                    border-radius: 12px;\n                    font-size: 11px;\n                    font-weight: bold;\n                \">\n                    {short['difficulty']}\n                </span>\n            </div>\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Watch button\n    if st.button(f\"▶️ Watch Now\", key=f\"watch_{short['id']}\", type=\"primary\"):\n        show_video_player(short, user_data, db_manager)\n\ndef show_video_player(short: dict, user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show video player interface\"\"\"\n    \n    st.markdown(\"---\")\n    \n    # Video player area\n    st.subheader(f\"🎬 {short['title']}\")\n    \n    # Mock video player\n    st.markdown(f\"\"\"\n    <div style=\"\n        background: #000;\n        height: 400px;\n        border-radius: 10px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin: 20px 0;\n        position: relative;\n    \">\n        <div style=\"text-align: center; color: white;\">\n            <div style=\"font-size: 6rem;\">{short['thumbnail']}</div>\n            <h3>Now Playing: {short['title']}</h3>\n            <p>Duration: {short['duration']} • Subject: {short['subject']}</p>\n        </div>\n        \n        <!-- Play controls -->\n        <div style=\"\n            position: absolute;\n            bottom: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: rgba(255,255,255,0.2);\n            padding: 10px 20px;\n            border-radius: 30px;\n            backdrop-filter: blur(10px);\n        \">\n            <span style=\"color: white; font-size: 14px;\">▶️ Playing • 🔊 Audio On • ⚡ {short['coins_reward']} coins to earn</span>\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Video completion actions\n    col1, col2, col3 = st.columns([1, 1, 1])\n    \n    with col1:\n        if st.button(\"👍 Like\", key=f\"like_{short['id']}\"):\n            st.success(\"Liked!\")\n    \n    with col2:\n        if st.button(\"💾 Save\", key=f\"save_{short['id']}\"):\n            st.success(\"Saved to your collection!\")\n    \n    with col3:\n        if st.button(\"✅ Mark Complete\", key=f\"complete_{short['id']}\", type=\"primary\"):\n            # Award coins for completing video\n            db_manager.add_user_coins(user_data['id'], short['coins_reward'])\n            st.success(f\"Great! You earned {short['coins_reward']} coins! 🪙\")\n            \n            # Add achievement notification\n            db_manager.add_notification(\n                user_data['id'],\n                \"Video Completed!\",\n                f\"You completed '{short['title']}' and earned {short['coins_reward']} coins!\",\n                \"success\"\n            )\n    \n    # Related shorts\n    st.markdown(\"---\")\n    st.subheader(\"📚 Related Shorts\")\n    \n    related_subjects = [\"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\"]\n    related_subject = short['subject']\n    \n    col1, col2, col3 = st.columns(3)\n    cols = [col1, col2, col3]\n    \n    for i in range(3):\n        with cols[i]:\n            st.markdown(f\"\"\"\n            <div style=\"\n                border: 1px solid #e0e0e0;\n                border-radius: 10px;\n                padding: 10px;\n                text-align: center;\n                background: white;\n            \">\n                <div style=\"font-size: 2rem;\">🎬</div>\n                <h5>Related {related_subject} Short {i+1}</h5>\n                <small>Duration: 2:{15+i*10}</small>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Watch\", key=f\"related_{i}\"):\n                st.info(f\"Loading related video {i+1}...\")\n\ndef filter_shorts(shorts: list, subject: str, duration: str, difficulty: str) -> list:\n    \"\"\"Filter shorts based on user selection\"\"\"\n    filtered = shorts.copy()\n    \n    if subject != \"All\":\n        filtered = [s for s in filtered if s['subject'] == subject]\n    \n    if duration != \"All\":\n        # In a real app, you'd properly parse duration and filter\n        pass\n    \n    if difficulty != \"All\":\n        filtered = [s for s in filtered if s['difficulty'] == difficulty]\n    \n    return filtered\n\ndef get_difficulty_color(difficulty: str) -> str:\n    \"\"\"Get color for difficulty level\"\"\"\n    colors = {\n        \"Beginner\": \"#4CAF50\",\n        \"Intermediate\": \"#FF9800\",\n        \"Advanced\": \"#F44336\"\n    }\n    return colors.get(difficulty, \"#666\")\n\nif __name__ == \"__main__\":\n    show_shorts_page()","size_bytes":11723},"deploy_package/utils/auth.py":{"content":"import hashlib\nimport os\nfrom utils.database import DatabaseManager\n\nclass AuthManager:\n    \"\"\"Handle user authentication and registration\"\"\"\n    \n    def __init__(self):\n        self.db = DatabaseManager()\n    \n    def hash_password(self, password: str) -> str:\n        \"\"\"Hash password using SHA-256\"\"\"\n        return hashlib.sha256(password.encode()).hexdigest()\n    \n    def register_user(self, name: str, phone: str, email: str, school: str, class_level: str, address: str, password: str) -> bool:\n        \"\"\"Register a new user\"\"\"\n        try:\n            # Check if phone number already exists\n            if self.db.user_exists(phone):\n                return False\n            \n            hashed_password = self.hash_password(password)\n            \n            # Insert user into database\n            user_data = {\n                'name': name,\n                'phone': phone,\n                'email': email,\n                'school': school,\n                'class': class_level,\n                'address': address,\n                'password': hashed_password,\n                'is_premium': False,\n                'coins': 0,\n                'max_devices': 2  # Default maximum login devices\n            }\n            \n            return self.db.create_user(user_data)\n            \n        except Exception as e:\n            print(f\"Registration error: {e}\")\n            return False\n    \n    def login_user(self, phone: str, password: str) -> bool:\n        \"\"\"Authenticate user login\"\"\"\n        try:\n            user = self.db.get_user_by_phone(phone)\n            if not user:\n                return False\n            \n            hashed_password = self.hash_password(password)\n            return user['password'] == hashed_password\n            \n        except Exception as e:\n            print(f\"Login error: {e}\")\n            return False\n    \n    def get_user_data(self, phone: str) -> dict:\n        \"\"\"Get user data by phone number\"\"\"\n        return self.db.get_user_by_phone(phone)\n    \n    def send_otp(self, phone: str) -> bool:\n        \"\"\"Send OTP to phone number (placeholder for Twilio integration)\"\"\"\n        # This would integrate with Twilio API\n        # For now, return True as placeholder\n        return True\n    \n    def verify_otp(self, phone: str, otp: str) -> bool:\n        \"\"\"Verify OTP (placeholder for Twilio integration)\"\"\"\n        # This would integrate with Twilio API\n        # For now, return True as placeholder\n        return True","size_bytes":2471},"deploy_package/utils/database.py":{"content":"import os\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\nfrom datetime import datetime, date\nimport json\n\nclass DatabaseManager:\n    \"\"\"Manage database operations for the Sharpy Education app\"\"\"\n    \n    def __init__(self):\n        # Use environment variable for production, fallback for development\n        self.connection_string = os.getenv('DATABASE_URL') or \"postgresql://frudent_db_user:AXNmaumb01w93rfozH5oXEPxVxFKgLhm@dpg-d2hmfaemcj7s73br3hmg-a.oregon-postgres.render.com/frudent_db\"\n        self.fallback_mode = False\n        self.users_data = {}  # Fallback storage\n        self.init_database()\n    \n    def get_connection(self):\n        \"\"\"Get database connection\"\"\"\n        try:\n            if self.connection_string:\n                return psycopg2.connect(self.connection_string)\n            else:\n                return None\n        except Exception as e:\n            print(f\"Database connection error: {e}\")\n            self.fallback_mode = True\n            return None\n    \n    def init_database(self):\n        \"\"\"Initialize database tables\"\"\"\n        try:\n            conn = self.get_connection()\n            if not conn:\n                print(\"Database connection failed. Using fallback mode.\")\n                self.fallback_mode = True\n                self._init_fallback_data()\n                return\n            \n            cursor = conn.cursor()\n            \n            # Users table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    phone VARCHAR(20) UNIQUE NOT NULL,\n                    email VARCHAR(255),\n                    school VARCHAR(255),\n                    class VARCHAR(50),\n                    address TEXT,\n                    password VARCHAR(255) NOT NULL,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    coins INTEGER DEFAULT 0,\n                    max_devices INTEGER DEFAULT 2,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Courses table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS courses (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    description TEXT,\n                    class VARCHAR(50) NOT NULL,\n                    price DECIMAL(10,2) DEFAULT 0,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    thumbnail_url TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Subjects table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS subjects (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    class VARCHAR(50) NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    questions INTEGER DEFAULT 50,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # User enrollments table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS user_enrollments (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    course_id INTEGER REFERENCES courses(id),\n                    progress INTEGER DEFAULT 0,\n                    enrolled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Live classes table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS live_classes (\n                    id SERIAL PRIMARY KEY,\n                    subject VARCHAR(255) NOT NULL,\n                    topic VARCHAR(255) NOT NULL,\n                    teacher VARCHAR(255) NOT NULL,\n                    class_date DATE NOT NULL,\n                    class_time TIME NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    class VARCHAR(50) NOT NULL,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Notifications table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS notifications (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    title VARCHAR(255) NOT NULL,\n                    message TEXT NOT NULL,\n                    type VARCHAR(50) DEFAULT 'info',\n                    is_read BOOLEAN DEFAULT FALSE,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n            # Insert sample data\n            self.insert_sample_data()\n            \n        except Exception as e:\n            print(f\"Database initialization error: {e}\")\n            self.fallback_mode = True\n            self._init_fallback_data()\n    \n    def _init_fallback_data(self):\n        \"\"\"Initialize fallback data when database is not available\"\"\"\n        self.users_data = {}\n        self.subjects_data = [\n            {'id': 1, 'name': 'Mathematics', 'class': 'Class 10', 'duration': 90, 'questions': 60},\n            {'id': 2, 'name': 'Physics', 'class': 'Class 10', 'duration': 90, 'questions': 60},\n            {'id': 3, 'name': 'Chemistry', 'class': 'Class 10', 'duration': 90, 'questions': 60},\n            {'id': 4, 'name': 'Biology', 'class': 'Class 10', 'duration': 90, 'questions': 60},\n        ]\n        self.courses_data = [\n            {'id': 1, 'name': 'Complete Mathematics Course', 'class': 'Class 10', 'price': 5000.00, 'is_premium': True},\n            {'id': 2, 'name': 'Physics Mastery', 'class': 'Class 10', 'price': 4500.00, 'is_premium': True},\n        ]\n    \n    def insert_sample_data(self):\n        \"\"\"Insert sample data for testing\"\"\"\n        if self.fallback_mode:\n            return\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return\n                \n            cursor = conn.cursor()\n            \n            # Sample subjects\n            sample_subjects = [\n                ('Mathematics', 'Class 10', 90, 60),\n                ('Physics', 'Class 10', 90, 60),\n                ('Chemistry', 'Class 10', 90, 60),\n                ('Biology', 'Class 10', 90, 60),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM subjects\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO subjects (name, class, duration, questions) VALUES (%s, %s, %s, %s)\",\n                    sample_subjects\n                )\n            \n            # Sample courses\n            sample_courses = [\n                ('Complete Mathematics Course', 'Comprehensive math course for Class 10', 'Class 10', 5000.00, True),\n                ('Physics Mastery', 'Master physics concepts for Class 10', 'Class 10', 4500.00, True),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM courses\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO courses (name, description, class, price, is_premium) VALUES (%s, %s, %s, %s, %s)\",\n                    sample_courses\n                )\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n        except Exception as e:\n            print(f\"Sample data insertion error: {e}\")\n    \n    def user_exists(self, phone: str) -> bool:\n        \"\"\"Check if user exists by phone number\"\"\"\n        if self.fallback_mode:\n            return phone in self.users_data\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return False\n                \n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id FROM users WHERE phone = %s\", (phone,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result is not None\n        except Exception as e:\n            print(f\"User exists check error: {e}\")\n            return False\n    \n    def create_user(self, user_data: dict) -> bool:\n        \"\"\"Create a new user\"\"\"\n        if self.fallback_mode:\n            # Store in fallback\n            user_id = len(self.users_data) + 1\n            user_data['id'] = user_id\n            self.users_data[user_data['phone']] = user_data\n            return True\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return False\n                \n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO users (name, phone, email, school, class, address, password, is_premium, coins, max_devices)\n                VALUES (%(name)s, %(phone)s, %(email)s, %(school)s, %(class)s, %(address)s, %(password)s, %(is_premium)s, %(coins)s, %(max_devices)s)\n            \"\"\", user_data)\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Create user error: {e}\")\n            return False\n    \n    def get_user_by_phone(self, phone: str) -> dict:\n        \"\"\"Get user data by phone number\"\"\"\n        if self.fallback_mode:\n            return self.users_data.get(phone)\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return None\n                \n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM users WHERE phone = %s\", (phone,))\n            user = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return dict(user) if user else None\n        except Exception as e:\n            print(f\"Get user error: {e}\")\n            return None\n    \n    def get_user_coins(self, user_id: int) -> int:\n        \"\"\"Get user's current coin balance\"\"\"\n        if self.fallback_mode:\n            for user in self.users_data.values():\n                if user.get('id') == user_id:\n                    return user.get('coins', 0)\n            return 0\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return 0\n                \n            cursor = conn.cursor()\n            cursor.execute(\"SELECT coins FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else 0\n        except Exception as e:\n            print(f\"Get user coins error: {e}\")\n            return 0\n    \n    def add_user_coins(self, user_id: int, coins: int) -> bool:\n        \"\"\"Add coins to user account\"\"\"\n        if self.fallback_mode:\n            for user in self.users_data.values():\n                if user.get('id') == user_id:\n                    user['coins'] = user.get('coins', 0) + coins\n                    return True\n            return False\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return False\n                \n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET coins = coins + %s WHERE id = %s\", (coins, user_id))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Add user coins error: {e}\")\n            return False\n    \n    def is_premium_user(self, user_id: int) -> bool:\n        \"\"\"Check if user is premium\"\"\"\n        if self.fallback_mode:\n            for user in self.users_data.values():\n                if user.get('id') == user_id:\n                    return user.get('is_premium', False)\n            return False\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return False\n                \n            cursor = conn.cursor()\n            cursor.execute(\"SELECT is_premium FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else False\n        except Exception as e:\n            print(f\"Is premium user error: {e}\")\n            return False\n    \n    def get_subjects_by_class(self, class_level: str) -> list:\n        \"\"\"Get subjects for a specific class\"\"\"\n        if self.fallback_mode:\n            return [s for s in self.subjects_data if s['class'] == class_level]\n        \n        try:\n            conn = self.get_connection()\n            if not conn:\n                return []\n                \n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM subjects WHERE class = %s\", (class_level,))\n            subjects = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(subject) for subject in subjects]\n        except Exception as e:\n            print(f\"Get subjects error: {e}\")\n            return []\n    \n    def get_today_live_classes(self, user_id: int) -> list:\n        \"\"\"Get today's live classes for user's class\"\"\"\n        # Return empty list for demo\n        return []\n    \n    def get_user_courses(self, user_id: int) -> list:\n        \"\"\"Get user's enrolled courses\"\"\"\n        # Return empty list for demo\n        return []\n    \n    def add_notification(self, user_id: int, title: str, message: str, notification_type: str = 'info') -> bool:\n        \"\"\"Add notification for user\"\"\"\n        return True  # Demo mode\n    \n    def get_user_notifications(self, user_id: int) -> list:\n        \"\"\"Get user's notifications\"\"\"\n        return []  # Demo mode","size_bytes":13915},"deploy_package/utils/database_backup.py":{"content":"import os\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\nfrom datetime import datetime, date\nimport json\n\nclass DatabaseManager:\n    \"\"\"Manage database operations for the Sharpy Education app\"\"\"\n    \n    def __init__(self):\n        self.connection_string = os.getenv('DATABASE_URL')\n        self.init_database()\n    \n    def get_connection(self):\n        \"\"\"Get database connection\"\"\"\n        try:\n            return psycopg2.connect(self.connection_string)\n        except Exception as e:\n            print(f\"Database connection error: {e}\")\n            return None\n    \n    def init_database(self):\n        \"\"\"Initialize database tables\"\"\"\n        try:\n            conn = self.get_connection()\n            if not conn:\n                print(\"Database connection failed. Using fallback mode.\")\n                return\n            cursor = conn.cursor()\n            \n            # Users table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    phone VARCHAR(20) UNIQUE NOT NULL,\n                    email VARCHAR(255),\n                    school VARCHAR(255),\n                    class VARCHAR(50),\n                    address TEXT,\n                    password VARCHAR(255) NOT NULL,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    coins INTEGER DEFAULT 0,\n                    max_devices INTEGER DEFAULT 2,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Courses table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS courses (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    description TEXT,\n                    class VARCHAR(50) NOT NULL,\n                    price DECIMAL(10,2) DEFAULT 0,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    thumbnail_url TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Subjects table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS subjects (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    class VARCHAR(50) NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    questions INTEGER DEFAULT 50,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # User enrollments table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS user_enrollments (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    course_id INTEGER REFERENCES courses(id),\n                    progress INTEGER DEFAULT 0,\n                    enrolled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Live classes table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS live_classes (\n                    id SERIAL PRIMARY KEY,\n                    subject VARCHAR(255) NOT NULL,\n                    topic VARCHAR(255) NOT NULL,\n                    teacher VARCHAR(255) NOT NULL,\n                    class_date DATE NOT NULL,\n                    class_time TIME NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    class VARCHAR(50) NOT NULL,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # User activities table (for coins tracking)\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS user_activities (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    activity_type VARCHAR(50) NOT NULL,\n                    coins_earned INTEGER DEFAULT 0,\n                    description TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Test results table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS test_results (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    subject_id INTEGER REFERENCES subjects(id),\n                    score INTEGER NOT NULL,\n                    total_questions INTEGER NOT NULL,\n                    time_taken INTEGER,\n                    coins_earned INTEGER DEFAULT 0,\n                    taken_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Notifications table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS notifications (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    title VARCHAR(255) NOT NULL,\n                    message TEXT NOT NULL,\n                    type VARCHAR(50) DEFAULT 'info',\n                    is_read BOOLEAN DEFAULT FALSE,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n            # Insert sample data\n            self.insert_sample_data()\n            \n        except Exception as e:\n            print(f\"Database initialization error: {e}\")\n    \n    def insert_sample_data(self):\n        \"\"\"Insert sample data for testing\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            \n            # Sample subjects\n            sample_subjects = [\n                ('Mathematics', 'Class 10', 90, 60),\n                ('Physics', 'Class 10', 90, 60),\n                ('Chemistry', 'Class 10', 90, 60),\n                ('Biology', 'Class 10', 90, 60),\n                ('Mathematics', 'Class 12', 120, 80),\n                ('Physics', 'Class 12', 120, 80),\n                ('Chemistry', 'Class 12', 120, 80),\n                ('Biology', 'Class 12', 120, 80),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM subjects\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO subjects (name, class, duration, questions) VALUES (%s, %s, %s, %s)\",\n                    sample_subjects\n                )\n            \n            # Sample courses\n            sample_courses = [\n                ('Complete Mathematics Course', 'Comprehensive math course for Class 10', 'Class 10', 5000.00, True),\n                ('Physics Mastery', 'Master physics concepts for Class 10', 'Class 10', 4500.00, True),\n                ('Chemistry Fundamentals', 'Essential chemistry for Class 10', 'Class 10', 4000.00, True),\n                ('Biology Basics', 'Complete biology course for Class 10', 'Class 10', 3500.00, True),\n                ('Advanced Mathematics', 'Advanced math for Class 12', 'Class 12', 8000.00, True),\n                ('Physics for JEE', 'Physics preparation for JEE', 'Class 12', 7500.00, True),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM courses\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO courses (name, description, class, price, is_premium) VALUES (%s, %s, %s, %s, %s)\",\n                    sample_courses\n                )\n            \n            # Sample live classes for today\n            today = date.today()\n            sample_classes = [\n                ('Mathematics', 'Quadratic Equations', 'Dr. Sharma', today, '10:00:00', 60, 'Class 10'),\n                ('Physics', 'Light and Reflection', 'Prof. Patel', today, '14:00:00', 60, 'Class 10'),\n                ('Chemistry', 'Acids and Bases', 'Dr. Singh', today, '16:00:00', 60, 'Class 10'),\n            ]\n            \n            cursor.execute(\"DELETE FROM live_classes WHERE class_date = %s\", (today,))\n            cursor.executemany(\n                \"INSERT INTO live_classes (subject, topic, teacher, class_date, class_time, duration, class) VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n                sample_classes\n            )\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n        except Exception as e:\n            print(f\"Sample data insertion error: {e}\")\n    \n    def user_exists(self, phone: str) -> bool:\n        \"\"\"Check if user exists by phone number\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id FROM users WHERE phone = %s\", (phone,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result is not None\n        except Exception as e:\n            print(f\"User exists check error: {e}\")\n            return False\n    \n    def create_user(self, user_data: dict) -> bool:\n        \"\"\"Create a new user\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO users (name, phone, email, school, class, address, password, is_premium, coins, max_devices)\n                VALUES (%(name)s, %(phone)s, %(email)s, %(school)s, %(class)s, %(address)s, %(password)s, %(is_premium)s, %(coins)s, %(max_devices)s)\n            \"\"\", user_data)\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Create user error: {e}\")\n            return False\n    \n    def get_user_by_phone(self, phone: str) -> dict:\n        \"\"\"Get user data by phone number\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM users WHERE phone = %s\", (phone,))\n            user = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return dict(user) if user else None\n        except Exception as e:\n            print(f\"Get user error: {e}\")\n            return None\n    \n    def get_user_coins(self, user_id: int) -> int:\n        \"\"\"Get user's current coin balance\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT coins FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else 0\n        except Exception as e:\n            print(f\"Get user coins error: {e}\")\n            return 0\n    \n    def add_user_coins(self, user_id: int, coins: int) -> bool:\n        \"\"\"Add coins to user account\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET coins = coins + %s WHERE id = %s\", (coins, user_id))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Add user coins error: {e}\")\n            return False\n    \n    def is_premium_user(self, user_id: int) -> bool:\n        \"\"\"Check if user is premium\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT is_premium FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else False\n        except Exception as e:\n            print(f\"Is premium user error: {e}\")\n            return False\n    \n    def get_subjects_by_class(self, class_level: str) -> list:\n        \"\"\"Get subjects for a specific class\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM subjects WHERE class = %s\", (class_level,))\n            subjects = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(subject) for subject in subjects]\n        except Exception as e:\n            print(f\"Get subjects error: {e}\")\n            return []\n    \n    def get_today_live_classes(self, user_id: int) -> list:\n        \"\"\"Get today's live classes for user's class\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            \n            # Get user's class first\n            cursor.execute(\"SELECT class FROM users WHERE id = %s\", (user_id,))\n            user_class = cursor.fetchone()\n            if not user_class:\n                return []\n            \n            today = date.today()\n            cursor.execute(\"\"\"\n                SELECT * FROM live_classes \n                WHERE class_date = %s AND class = %s\n                ORDER BY class_time\n            \"\"\", (today, user_class['class']))\n            \n            classes = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(cls) for cls in classes]\n        except Exception as e:\n            print(f\"Get live classes error: {e}\")\n            return []\n    \n    def get_user_courses(self, user_id: int) -> list:\n        \"\"\"Get user's enrolled courses\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"\"\"\n                SELECT c.id, c.name, c.description, ue.progress\n                FROM courses c\n                JOIN user_enrollments ue ON c.id = ue.course_id\n                WHERE ue.user_id = %s\n            \"\"\", (user_id,))\n            courses = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(course) for course in courses]\n        except Exception as e:\n            print(f\"Get user courses error: {e}\")\n            return []\n    \n    def add_notification(self, user_id: int, title: str, message: str, notification_type: str = 'info') -> bool:\n        \"\"\"Add notification for user\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO notifications (user_id, title, message, type)\n                VALUES (%s, %s, %s, %s)\n            \"\"\", (user_id, title, message, notification_type))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Add notification error: {e}\")\n            return False\n    \n    def get_user_notifications(self, user_id: int) -> list:\n        \"\"\"Get user's notifications\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"\"\"\n                SELECT * FROM notifications \n                WHERE user_id = %s \n                ORDER BY created_at DESC\n                LIMIT 50\n            \"\"\", (user_id,))\n            notifications = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(notif) for notif in notifications]\n        except Exception as e:\n            print(f\"Get notifications error: {e}\")\n            return []","size_bytes":15539},"deploy_package/utils/otp_manager.py":{"content":"import os\nimport random\nimport string\nfrom datetime import datetime, timedelta\nimport streamlit as st\nfrom twilio.rest import Client\n\nclass OTPManager:\n    \"\"\"Handle OTP generation and verification with Twilio\"\"\"\n    \n    def __init__(self):\n        self.twilio_account_sid = os.getenv('TWILIO_ACCOUNT_SID')\n        self.twilio_auth_token = os.getenv('TWILIO_AUTH_TOKEN') \n        self.twilio_phone_number = os.getenv('TWILIO_PHONE_NUMBER')\n        \n        # Initialize Twilio client if credentials are available\n        if self.twilio_account_sid and self.twilio_auth_token:\n            self.client = Client(self.twilio_account_sid, self.twilio_auth_token)\n        else:\n            self.client = None\n    \n    def generate_otp(self, length: int = 6) -> str:\n        \"\"\"Generate random OTP\"\"\"\n        return ''.join(random.choices(string.digits, k=length))\n    \n    def send_otp(self, phone_number: str, otp: str) -> bool:\n        \"\"\"Send OTP via SMS using Twilio\"\"\"\n        if not self.client:\n            # Fallback: store OTP in session for demo purposes\n            st.session_state.demo_otp = otp\n            st.session_state.demo_phone = phone_number\n            st.info(f\"Demo Mode: Your OTP is {otp} (This would normally be sent via SMS)\")\n            return True\n        \n        try:\n            message = self.client.messages.create(\n                body=f\"Your Sharpy Education verification code is: {otp}. Valid for 5 minutes.\",\n                from_=self.twilio_phone_number,\n                to=phone_number\n            )\n            return True\n        except Exception as e:\n            print(f\"SMS sending error: {e}\")\n            return False\n    \n    def store_otp(self, phone_number: str, otp: str) -> None:\n        \"\"\"Store OTP with expiry time\"\"\"\n        expiry_time = datetime.now() + timedelta(minutes=5)\n        \n        # Store in session state (in production, use Redis or database)\n        if 'otp_data' not in st.session_state:\n            st.session_state.otp_data = {}\n        \n        st.session_state.otp_data[phone_number] = {\n            'otp': otp,\n            'expiry': expiry_time,\n            'attempts': 0\n        }\n    \n    def verify_otp(self, phone_number: str, entered_otp: str) -> tuple[bool, str]:\n        \"\"\"Verify OTP and return status with message\"\"\"\n        \n        # Check demo mode first\n        if hasattr(st.session_state, 'demo_otp') and hasattr(st.session_state, 'demo_phone'):\n            if st.session_state.demo_phone == phone_number and st.session_state.demo_otp == entered_otp:\n                # Clear demo OTP after successful verification\n                delattr(st.session_state, 'demo_otp')\n                delattr(st.session_state, 'demo_phone')\n                return True, \"OTP verified successfully!\"\n            else:\n                return False, \"Invalid OTP. Please try again.\"\n        \n        # Check if OTP data exists\n        if 'otp_data' not in st.session_state or phone_number not in st.session_state.otp_data:\n            return False, \"No OTP found. Please request a new OTP.\"\n        \n        otp_info = st.session_state.otp_data[phone_number]\n        \n        # Check if OTP has expired\n        if datetime.now() > otp_info['expiry']:\n            del st.session_state.otp_data[phone_number]\n            return False, \"OTP has expired. Please request a new one.\"\n        \n        # Check attempt limit\n        if otp_info['attempts'] >= 3:\n            del st.session_state.otp_data[phone_number]\n            return False, \"Too many failed attempts. Please request a new OTP.\"\n        \n        # Verify OTP\n        if otp_info['otp'] == entered_otp:\n            del st.session_state.otp_data[phone_number]\n            return True, \"OTP verified successfully!\"\n        else:\n            # Increment attempts\n            st.session_state.otp_data[phone_number]['attempts'] += 1\n            remaining_attempts = 3 - st.session_state.otp_data[phone_number]['attempts']\n            return False, f\"Invalid OTP. {remaining_attempts} attempts remaining.\"\n    \n    def resend_otp(self, phone_number: str) -> tuple[bool, str]:\n        \"\"\"Resend OTP to phone number\"\"\"\n        # Generate new OTP\n        new_otp = self.generate_otp()\n        \n        # Send OTP\n        if self.send_otp(phone_number, new_otp):\n            self.store_otp(phone_number, new_otp)\n            return True, \"New OTP sent successfully!\"\n        else:\n            return False, \"Failed to send OTP. Please try again.\"\n    \n    def is_valid_phone_number(self, phone_number: str) -> bool:\n        \"\"\"Validate phone number format\"\"\"\n        # Basic validation for Indian phone numbers\n        if not phone_number.startswith('+91'):\n            return False\n        \n        # Remove country code and check if remaining digits are valid\n        number_part = phone_number[3:]\n        if len(number_part) != 10 or not number_part.isdigit():\n            return False\n        \n        return True\n    \n    def format_phone_number(self, phone_number: str) -> str:\n        \"\"\"Format phone number to standard format\"\"\"\n        # Remove any spaces or special characters\n        cleaned_number = ''.join(filter(str.isdigit, phone_number))\n        \n        # Add country code if missing\n        if len(cleaned_number) == 10:\n            return f\"+91{cleaned_number}\"\n        elif len(cleaned_number) == 12 and cleaned_number.startswith('91'):\n            return f\"+{cleaned_number}\"\n        else:\n            return phone_number\n    \n    def cleanup_expired_otps(self) -> None:\n        \"\"\"Clean up expired OTPs from session\"\"\"\n        if 'otp_data' not in st.session_state:\n            return\n        \n        current_time = datetime.now()\n        expired_phones = []\n        \n        for phone, otp_info in st.session_state.otp_data.items():\n            if current_time > otp_info['expiry']:\n                expired_phones.append(phone)\n        \n        for phone in expired_phones:\n            del st.session_state.otp_data[phone]","size_bytes":5971},"sharpy-educational-app-download/pages/1_Courses.py":{"content":"import streamlit as st\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Courses\", page_icon=\"📚\", layout=\"wide\")\n\ndef show_courses_page():\n    \"\"\"Show courses page with class-specific and other classes courses\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to access courses.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"📚 Courses\")\n    st.markdown(\"Explore our comprehensive course offerings\")\n    \n    # Tabs for current class and other classes\n    tab1, tab2, tab3 = st.tabs([\"My Class Courses\", \"Other Classes\", \"Enrolled Courses\"])\n    \n    with tab1:\n        st.subheader(f\"Courses for {user_data['class']}\")\n        show_class_courses(user_data['class'], db_manager, user_data['id'])\n    \n    with tab2:\n        st.subheader(\"Explore Other Classes\")\n        \n        # Class selector\n        all_classes = [\n            \"Class 6\", \"Class 7\", \"Class 8\", \"Class 9\", \"Class 10\", \n            \"Class 11\", \"Class 12\", \"Engineering Entrance\", \"Medical Entrance\"\n        ]\n        \n        other_classes = [cls for cls in all_classes if cls != user_data['class']]\n        selected_class = st.selectbox(\"Select Class:\", other_classes)\n        \n        if selected_class:\n            show_class_courses(selected_class, db_manager, user_data['id'])\n    \n    with tab3:\n        st.subheader(\"Your Enrolled Courses\")\n        show_enrolled_courses(db_manager, user_data['id'])\n\ndef show_class_courses(class_level: str, db_manager: DatabaseManager, user_id: int):\n    \"\"\"Display courses for a specific class\"\"\"\n    try:\n        conn = db_manager.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            SELECT c.*, \n                   CASE WHEN ue.user_id IS NOT NULL THEN TRUE ELSE FALSE END as is_enrolled\n            FROM courses c\n            LEFT JOIN user_enrollments ue ON c.id = ue.course_id AND ue.user_id = %s\n            WHERE c.class = %s\n            ORDER BY c.name\n        \"\"\", (user_id, class_level))\n        \n        courses = cursor.fetchall()\n        cursor.close()\n        conn.close()\n        \n        if not courses:\n            st.info(f\"No courses available for {class_level} yet.\")\n            return\n        \n        # Display courses in grid\n        cols = st.columns(2)\n        for i, course in enumerate(courses):\n            with cols[i % 2]:\n                with st.container():\n                    st.markdown(\"\"\"\n                    <div style=\"border: 1px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 10px 0; background: white;\">\n                    \"\"\", unsafe_allow_html=True)\n                    \n                    st.subheader(course[1])  # course name\n                    st.write(course[2])  # description\n                    \n                    col1, col2 = st.columns([1, 1])\n                    with col1:\n                        st.write(f\"**Class:** {course[3]}\")\n                        st.write(f\"**Price:** ₹{course[4]:,.2f}\")\n                    \n                    with col2:\n                        if course[5]:  # is_premium\n                            st.markdown(\"🌟 **Premium Course**\")\n                        else:\n                            st.markdown(\"🆓 **Free Course**\")\n                    \n                    # Enrollment button\n                    if course[7]:  # is_enrolled\n                        st.success(\"✅ Already Enrolled\")\n                        if st.button(\"Continue Learning\", key=f\"continue_{course[0]}\"):\n                            st.success(f\"Opening {course[1]}...\")\n                    else:\n                        if st.button(f\"Enroll Now\", key=f\"enroll_{course[0]}\", type=\"primary\"):\n                            if enroll_user_in_course(db_manager, user_id, course[0]):\n                                st.success(\"Successfully enrolled! Refreshing page...\")\n                                st.rerun()\n                            else:\n                                st.error(\"Enrollment failed. Please try again.\")\n                    \n                    st.markdown(\"</div>\", unsafe_allow_html=True)\n                    \n    except Exception as e:\n        st.error(f\"Error loading courses: {e}\")\n\ndef show_enrolled_courses(db_manager: DatabaseManager, user_id: int):\n    \"\"\"Display user's enrolled courses with progress\"\"\"\n    courses = db_manager.get_user_courses(user_id)\n    \n    if not courses:\n        st.info(\"You haven't enrolled in any courses yet. Check out our course offerings!\")\n        return\n    \n    for course in courses:\n        with st.container():\n            st.markdown(\"\"\"\n            <div style=\"border: 1px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 10px 0; background: white;\">\n            \"\"\", unsafe_allow_html=True)\n            \n            col1, col2, col3 = st.columns([2, 1, 1])\n            \n            with col1:\n                st.subheader(course['name'])\n                st.write(course['description'])\n            \n            with col2:\n                st.write(f\"**Progress: {course['progress']}%**\")\n                # Progress bar\n                progress_html = f\"\"\"\n                <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%;\">\n                    <div style=\"background: #4CAF50; height: 100%; width: {course['progress']}%; border-radius: 10px;\"></div>\n                </div>\n                \"\"\"\n                st.markdown(progress_html, unsafe_allow_html=True)\n            \n            with col3:\n                if st.button(\"Continue\", key=f\"continue_enrolled_{course['id']}\"):\n                    show_course_content(course)\n            \n            st.markdown(\"</div>\", unsafe_allow_html=True)\n\ndef enroll_user_in_course(db_manager: DatabaseManager, user_id: int, course_id: int) -> bool:\n    \"\"\"Enroll user in a course\"\"\"\n    try:\n        conn = db_manager.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            INSERT INTO user_enrollments (user_id, course_id, progress)\n            VALUES (%s, %s, 0)\n        \"\"\", (user_id, course_id))\n        conn.commit()\n        cursor.close()\n        conn.close()\n        \n        # Add notification\n        db_manager.add_notification(\n            user_id, \n            \"Course Enrollment\", \n            \"Successfully enrolled in new course!\", \n            \"success\"\n        )\n        \n        return True\n    except Exception as e:\n        print(f\"Enrollment error: {e}\")\n        return False\n\ndef show_course_content(course: dict):\n    \"\"\"Show course content structure\"\"\"\n    st.subheader(f\"📖 {course['name']}\")\n    \n    # Sample course structure\n    chapters = [\n        {\n            \"name\": \"Introduction to Concepts\",\n            \"lectures\": [\n                {\"name\": \"Getting Started\", \"duration\": \"15:30\", \"completed\": True},\n                {\"name\": \"Basic Principles\", \"duration\": \"22:45\", \"completed\": True},\n                {\"name\": \"Practice Problems\", \"duration\": \"18:20\", \"completed\": False},\n            ]\n        },\n        {\n            \"name\": \"Advanced Topics\",\n            \"lectures\": [\n                {\"name\": \"Complex Theories\", \"duration\": \"25:10\", \"completed\": False},\n                {\"name\": \"Real-world Applications\", \"duration\": \"20:35\", \"completed\": False},\n                {\"name\": \"Case Studies\", \"duration\": \"30:15\", \"completed\": False},\n            ]\n        },\n        {\n            \"name\": \"Assessment and Practice\",\n            \"lectures\": [\n                {\"name\": \"Practice Test 1\", \"duration\": \"60:00\", \"completed\": False},\n                {\"name\": \"Mock Exam\", \"duration\": \"120:00\", \"completed\": False},\n            ]\n        }\n    ]\n    \n    for chapter in chapters:\n        with st.expander(f\"📚 {chapter['name']}\"):\n            for lecture in chapter['lectures']:\n                col1, col2, col3 = st.columns([3, 1, 1])\n                \n                with col1:\n                    if lecture['completed']:\n                        st.write(f\"✅ {lecture['name']}\")\n                    else:\n                        st.write(f\"📹 {lecture['name']}\")\n                \n                with col2:\n                    st.write(f\"⏱️ {lecture['duration']}\")\n                \n                with col3:\n                    if lecture['completed']:\n                        if st.button(\"Review\", key=f\"review_{lecture['name']}\"):\n                            st.success(f\"Reviewing: {lecture['name']}\")\n                    else:\n                        if st.button(\"Start\", key=f\"start_{lecture['name']}\", type=\"primary\"):\n                            st.success(f\"Starting: {lecture['name']}\")\n                            # Award coins for watching\n                            db_manager = DatabaseManager()\n                            db_manager.add_user_coins(st.session_state.user_data['id'], 6)\n\nif __name__ == \"__main__\":\n    show_courses_page()","size_bytes":8962},"sharpy-educational-app-download/pages/2_Journey.py":{"content":"import streamlit as st\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime, timedelta\nimport pandas as pd\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"My Journey\", page_icon=\"🎯\", layout=\"wide\")\n\ndef show_journey_page():\n    \"\"\"Show user's learning journey and analytics\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to view your learning journey.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🎯 My Learning Journey\")\n    st.markdown(f\"Track your progress and achievements, {user_data['name']}!\")\n    \n    # User stats overview\n    col1, col2, col3, col4 = st.columns(4)\n    \n    with col1:\n        coins = db_manager.get_user_coins(user_data['id'])\n        st.metric(\"Total Coins Earned\", f\"🪙 {coins}\")\n    \n    with col2:\n        # Mock data for videos watched\n        videos_watched = 45  # In real app, this would come from database\n        st.metric(\"Videos Watched\", f\"📹 {videos_watched}\")\n    \n    with col3:\n        # Mock data for tests taken\n        tests_taken = 12  # In real app, this would come from database\n        st.metric(\"Tests Completed\", f\"📝 {tests_taken}\")\n    \n    with col4:\n        # Mock data for study time\n        study_hours = 78  # In real app, this would come from database\n        st.metric(\"Study Hours\", f\"⏰ {study_hours}h\")\n    \n    st.markdown(\"---\")\n    \n    # Journey sections\n    tab1, tab2, tab3, tab4 = st.tabs([\"📊 Analytics\", \"🏆 Achievements\", \"📈 Progress\", \"🎯 Goals\"])\n    \n    with tab1:\n        show_analytics_section(user_data, db_manager)\n    \n    with tab2:\n        show_achievements_section(user_data, db_manager)\n    \n    with tab3:\n        show_progress_section(user_data, db_manager)\n    \n    with tab4:\n        show_goals_section(user_data, db_manager)\n\ndef show_analytics_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show detailed analytics\"\"\"\n    st.subheader(\"📊 Your Learning Analytics\")\n    \n    # Daily activity chart\n    st.write(\"### Daily Activity (Last 30 Days)\")\n    \n    # Generate mock daily activity data\n    dates = pd.date_range(end=datetime.now(), periods=30, freq='D')\n    activity_data = {\n        'Date': dates,\n        'Videos Watched': [max(0, int(5 * (0.5 + 0.5 * abs(hash(str(date)) % 100) / 100))) for date in dates],\n        'Tests Taken': [max(0, int(2 * (0.3 + 0.7 * abs(hash(str(date) + 'test') % 100) / 100))) for date in dates],\n        'Study Hours': [max(0, int(8 * (0.4 + 0.6 * abs(hash(str(date) + 'hours') % 100) / 100))) for date in dates]\n    }\n    \n    df_activity = pd.DataFrame(activity_data)\n    \n    # Activity line chart\n    fig_activity = go.Figure()\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Videos Watched'],\n        mode='lines+markers',\n        name='Videos Watched',\n        line=dict(color='#FF6B6B')\n    ))\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Tests Taken'],\n        mode='lines+markers',\n        name='Tests Taken',\n        line=dict(color='#4ECDC4')\n    ))\n    \n    fig_activity.add_trace(go.Scatter(\n        x=df_activity['Date'], \n        y=df_activity['Study Hours'],\n        mode='lines+markers',\n        name='Study Hours',\n        line=dict(color='#45B7D1')\n    ))\n    \n    fig_activity.update_layout(\n        title=\"Daily Learning Activity\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Count\",\n        hovermode='x unified'\n    )\n    \n    st.plotly_chart(fig_activity, use_container_width=True)\n    \n    # Subject performance\n    st.write(\"### Subject-wise Performance\")\n    \n    subjects_data = {\n        'Subject': ['Mathematics', 'Physics', 'Chemistry', 'Biology'],\n        'Average Score': [78, 82, 75, 85],\n        'Tests Taken': [4, 3, 2, 3]\n    }\n    \n    df_subjects = pd.DataFrame(subjects_data)\n    \n    fig_subjects = px.bar(\n        df_subjects, \n        x='Subject', \n        y='Average Score',\n        color='Average Score',\n        title=\"Average Scores by Subject\",\n        color_continuous_scale='Blues'\n    )\n    \n    st.plotly_chart(fig_subjects, use_container_width=True)\n    \n    # Weekly pattern\n    st.write(\"### Weekly Study Pattern\")\n    \n    weekly_data = {\n        'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n        'Study Hours': [6, 5, 7, 6, 4, 8, 5]\n    }\n    \n    fig_weekly = px.bar(\n        x=weekly_data['Day'],\n        y=weekly_data['Study Hours'],\n        title=\"Study Hours by Day of Week\",\n        color=weekly_data['Study Hours'],\n        color_continuous_scale='Greens'\n    )\n    \n    st.plotly_chart(fig_weekly, use_container_width=True)\n\ndef show_achievements_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show user achievements and badges\"\"\"\n    st.subheader(\"🏆 Your Achievements\")\n    \n    # Achievement badges\n    achievements = [\n        {\n            \"title\": \"First Steps\",\n            \"description\": \"Completed your first video lesson\",\n            \"icon\": \"🌟\",\n            \"earned\": True,\n            \"date\": \"2024-01-15\"\n        },\n        {\n            \"title\": \"Test Taker\",\n            \"description\": \"Completed your first test\",\n            \"icon\": \"📝\",\n            \"earned\": True,\n            \"date\": \"2024-01-18\"\n        },\n        {\n            \"title\": \"Consistent Learner\",\n            \"description\": \"Studied for 7 consecutive days\",\n            \"icon\": \"🔥\",\n            \"earned\": True,\n            \"date\": \"2024-01-25\"\n        },\n        {\n            \"title\": \"High Scorer\",\n            \"description\": \"Scored above 90% in a test\",\n            \"icon\": \"🎯\",\n            \"earned\": False,\n            \"date\": None\n        },\n        {\n            \"title\": \"Video Master\",\n            \"description\": \"Watched 50 video lessons\",\n            \"icon\": \"📺\",\n            \"earned\": True,\n            \"date\": \"2024-02-10\"\n        },\n        {\n            \"title\": \"Coin Collector\",\n            \"description\": \"Earned 100 coins\",\n            \"icon\": \"🪙\",\n            \"earned\": True,\n            \"date\": \"2024-02-05\"\n        }\n    ]\n    \n    # Display achievements in grid\n    cols = st.columns(3)\n    for i, achievement in enumerate(achievements):\n        with cols[i % 3]:\n            if achievement['earned']:\n                st.markdown(f\"\"\"\n                <div style=\"\n                    border: 2px solid #4CAF50;\n                    border-radius: 15px;\n                    padding: 20px;\n                    margin: 10px 0;\n                    background: linear-gradient(135deg, #e8f5e8 0%, #ffffff 100%);\n                    text-align: center;\n                \">\n                    <div style=\"font-size: 3rem;\">{achievement['icon']}</div>\n                    <h4 style=\"color: #4CAF50;\">{achievement['title']}</h4>\n                    <p>{achievement['description']}</p>\n                    <small style=\"color: #666;\">Earned on {achievement['date']}</small>\n                </div>\n                \"\"\", unsafe_allow_html=True)\n            else:\n                st.markdown(f\"\"\"\n                <div style=\"\n                    border: 2px solid #ddd;\n                    border-radius: 15px;\n                    padding: 20px;\n                    margin: 10px 0;\n                    background: #f9f9f9;\n                    text-align: center;\n                    opacity: 0.6;\n                \">\n                    <div style=\"font-size: 3rem; filter: grayscale(100%);\">{achievement['icon']}</div>\n                    <h4 style=\"color: #999;\">{achievement['title']}</h4>\n                    <p>{achievement['description']}</p>\n                    <small style=\"color: #999;\">Not earned yet</small>\n                </div>\n                \"\"\", unsafe_allow_html=True)\n    \n    # Achievement progress\n    earned_count = sum(1 for a in achievements if a['earned'])\n    total_count = len(achievements)\n    \n    st.markdown(f\"\"\"\n    <div style=\"text-align: center; margin: 30px 0;\">\n        <h3>Achievement Progress: {earned_count}/{total_count}</h3>\n        <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%; margin: 10px 0;\">\n            <div style=\"background: #4CAF50; height: 100%; width: {(earned_count/total_count)*100}%; border-radius: 10px;\"></div>\n        </div>\n        <p>You've earned {earned_count} out of {total_count} achievements!</p>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n\ndef show_progress_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show learning progress\"\"\"\n    st.subheader(\"📈 Learning Progress\")\n    \n    # Course progress\n    courses = db_manager.get_user_courses(user_data['id'])\n    \n    if courses:\n        st.write(\"### Course Progress\")\n        for course in courses:\n            st.write(f\"**{course['name']}**\")\n            progress = course['progress']\n            \n            # Progress bar with animation effect\n            progress_html = f\"\"\"\n            <div style=\"background: #e0e0e0; border-radius: 10px; height: 25px; width: 100%; margin: 10px 0; position: relative;\">\n                <div style=\"\n                    background: linear-gradient(90deg, #4CAF50 0%, #45a049 100%);\n                    height: 100%;\n                    width: {progress}%;\n                    border-radius: 10px;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    color: white;\n                    font-weight: bold;\n                    transition: width 1s ease-in-out;\n                \">\n                    {progress}%\n                </div>\n            </div>\n            \"\"\"\n            st.markdown(progress_html, unsafe_allow_html=True)\n    \n    # Test performance over time\n    st.write(\"### Test Performance Over Time\")\n    \n    test_dates = pd.date_range(end=datetime.now(), periods=10, freq='W')\n    test_scores = [65, 72, 78, 75, 82, 85, 88, 84, 90, 87]\n    \n    fig_progress = go.Figure()\n    \n    fig_progress.add_trace(go.Scatter(\n        x=test_dates,\n        y=test_scores,\n        mode='lines+markers+text',\n        text=test_scores,\n        textposition=\"top center\",\n        line=dict(color='#FF6B6B', width=3),\n        marker=dict(size=8, color='#FF6B6B'),\n        name='Test Scores'\n    ))\n    \n    fig_progress.update_layout(\n        title=\"Test Score Improvement\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Score (%)\",\n        yaxis=dict(range=[0, 100]),\n        showlegend=False\n    )\n    \n    st.plotly_chart(fig_progress, use_container_width=True)\n    \n    # Study streak\n    st.write(\"### Study Streak\")\n    current_streak = 15  # Mock data\n    best_streak = 23  # Mock data\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        st.metric(\"Current Streak\", f\"🔥 {current_streak} days\")\n    with col2:\n        st.metric(\"Best Streak\", f\"🏆 {best_streak} days\")\n\ndef show_goals_section(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show and manage learning goals\"\"\"\n    st.subheader(\"🎯 Learning Goals\")\n    \n    # Current goals\n    goals = [\n        {\n            \"title\": \"Study 2 hours daily\",\n            \"current\": 1.5,\n            \"target\": 2.0,\n            \"unit\": \"hours\"\n        },\n        {\n            \"title\": \"Complete 3 tests per week\",\n            \"current\": 2,\n            \"target\": 3,\n            \"unit\": \"tests\"\n        },\n        {\n            \"title\": \"Maintain 85% average score\",\n            \"current\": 82,\n            \"target\": 85,\n            \"unit\": \"%\"\n        }\n    ]\n    \n    for goal in goals:\n        progress = min(100, (goal['current'] / goal['target']) * 100)\n        \n        st.write(f\"**{goal['title']}**\")\n        st.write(f\"Progress: {goal['current']}{goal['unit']} / {goal['target']}{goal['unit']}\")\n        \n        color = \"#4CAF50\" if progress >= 100 else \"#FF9800\" if progress >= 75 else \"#FF6B6B\"\n        \n        progress_html = f\"\"\"\n        <div style=\"background: #e0e0e0; border-radius: 10px; height: 20px; width: 100%; margin: 10px 0;\">\n            <div style=\"background: {color}; height: 100%; width: {progress}%; border-radius: 10px;\"></div>\n        </div>\n        \"\"\"\n        st.markdown(progress_html, unsafe_allow_html=True)\n        st.markdown(\"---\")\n    \n    # Add new goal\n    st.write(\"### Set New Goal\")\n    with st.form(\"new_goal\"):\n        goal_title = st.text_input(\"Goal Description\")\n        target_value = st.number_input(\"Target Value\", min_value=1)\n        goal_unit = st.selectbox(\"Unit\", [\"hours\", \"tests\", \"videos\", \"days\", \"%\"])\n        \n        if st.form_submit_button(\"Add Goal\", type=\"primary\"):\n            st.success(f\"Goal added: {goal_title}\")\n            st.info(\"Goal tracking will be implemented in future updates.\")\n    \n    # Motivational message for non-premium users\n    if not db_manager.is_premium_user(user_data['id']):\n        st.markdown(\"\"\"\n        <div style=\"\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 30px;\n            border-radius: 15px;\n            text-align: center;\n            margin: 30px 0;\n        \">\n            <h3>🚀 It's time for you to study with Sharpy & Excel in your Life!</h3>\n            <p>Unlock premium features to accelerate your learning journey</p>\n            <button style=\"\n                background: white;\n                color: #667eea;\n                border: none;\n                padding: 10px 20px;\n                border-radius: 5px;\n                font-weight: bold;\n                cursor: pointer;\n            \">Upgrade to Premium</button>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\nif __name__ == \"__main__\":\n    show_journey_page()","size_bytes":13788},"sharpy-educational-app-download/pages/3_Notifications.py":{"content":"import streamlit as st\nfrom datetime import datetime\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Notifications\", page_icon=\"🔔\", layout=\"wide\")\n\ndef show_notifications_page():\n    \"\"\"Show user notifications and messaging\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to view notifications.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🔔 Notifications\")\n    \n    # Notification tabs\n    tab1, tab2, tab3 = st.tabs([\"📬 All Notifications\", \"🎥 Live Classes\", \"📢 Announcements\"])\n    \n    with tab1:\n        show_all_notifications(user_data, db_manager)\n    \n    with tab2:\n        show_live_class_notifications(user_data, db_manager)\n    \n    with tab3:\n        show_announcements(user_data, db_manager)\n\ndef show_all_notifications(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show all user notifications\"\"\"\n    st.subheader(\"📬 Your Notifications\")\n    \n    notifications = db_manager.get_user_notifications(user_data['id'])\n    \n    if not notifications:\n        st.info(\"No notifications yet. We'll notify you about important updates!\")\n        return\n    \n    # Mark all as read button\n    col1, col2 = st.columns([1, 4])\n    with col1:\n        if st.button(\"Mark All Read\", type=\"secondary\"):\n            st.success(\"All notifications marked as read!\")\n    \n    # Display notifications\n    for notification in notifications:\n        # Notification card styling based on type and read status\n        card_style = get_notification_card_style(notification['type'], notification['is_read'])\n        \n        st.markdown(f\"\"\"\n        <div style=\"{card_style}\">\n            <div style=\"display: flex; justify-content: space-between; align-items: flex-start;\">\n                <div style=\"flex: 1;\">\n                    <h4 style=\"margin: 0 0 10px 0; color: #333;\">{get_notification_icon(notification['type'])} {notification['title']}</h4>\n                    <p style=\"margin: 0 0 10px 0; color: #666;\">{notification['message']}</p>\n                    <small style=\"color: #999;\">{format_notification_time(notification['created_at'])}</small>\n                </div>\n                <div>\n                    {get_notification_badge(notification['type'])}\n                </div>\n            </div>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n\ndef show_live_class_notifications(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show live class notifications and reminders\"\"\"\n    st.subheader(\"🎥 Live Class Updates\")\n    \n    # Today's live classes\n    live_classes = db_manager.get_today_live_classes(user_data['id'])\n    \n    if live_classes:\n        st.write(\"### Today's Schedule\")\n        for class_info in live_classes:\n            st.markdown(f\"\"\"\n            <div style=\"\n                border-left: 4px solid #FF6B6B;\n                background: #fff5f5;\n                padding: 15px;\n                margin: 10px 0;\n                border-radius: 5px;\n            \">\n                <h4 style=\"margin: 0; color: #FF6B6B;\">🎥 {class_info['subject']} - {class_info['topic']}</h4>\n                <p style=\"margin: 5px 0;\">👨‍🏫 Teacher: {class_info['teacher']}</p>\n                <p style=\"margin: 5px 0;\">⏰ Time: {class_info['time']}</p>\n                <p style=\"margin: 5px 0;\">📚 Duration: {class_info['duration']} minutes</p>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            col1, col2 = st.columns([1, 3])\n            with col1:\n                if st.button(f\"Join Now\", key=f\"join_{class_info['id']}\", type=\"primary\"):\n                    st.success(\"Joining live class...\")\n                    # Award coins for attending live class\n                    db_manager.add_user_coins(user_data['id'], 10)\n                    st.info(\"You earned 10 coins for attending the live class!\")\n    else:\n        st.info(\"No live classes scheduled for today.\")\n    \n    # Notification preferences\n    st.markdown(\"---\")\n    st.write(\"### Notification Preferences\")\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        live_class_reminder = st.checkbox(\"Live Class Reminders\", value=True)\n        new_content_alert = st.checkbox(\"New Content Alerts\", value=True)\n    \n    with col2:\n        test_reminder = st.checkbox(\"Test Reminders\", value=True)\n        achievement_notification = st.checkbox(\"Achievement Notifications\", value=True)\n    \n    if st.button(\"Save Preferences\"):\n        st.success(\"Notification preferences saved!\")\n\ndef show_announcements(user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show important announcements\"\"\"\n    st.subheader(\"📢 Important Announcements\")\n    \n    # Sample announcements\n    announcements = [\n        {\n            \"title\": \"New Course Launch: Advanced Mathematics\",\n            \"content\": \"We're excited to announce the launch of our Advanced Mathematics course for Class 12 students. Enroll now to get early bird discount!\",\n            \"date\": \"2024-07-20\",\n            \"type\": \"course\",\n            \"priority\": \"high\"\n        },\n        {\n            \"title\": \"System Maintenance Scheduled\",\n            \"content\": \"Scheduled maintenance on July 25th from 2:00 AM to 4:00 AM IST. The platform will be temporarily unavailable.\",\n            \"date\": \"2024-07-18\",\n            \"type\": \"system\",\n            \"priority\": \"medium\"\n        },\n        {\n            \"title\": \"New Achievement Badges Available\",\n            \"content\": \"Check out the new achievement badges in your journey section. Complete challenges to earn exclusive rewards!\",\n            \"date\": \"2024-07-15\",\n            \"type\": \"feature\",\n            \"priority\": \"low\"\n        },\n        {\n            \"title\": \"Live Doubt Clearing Session\",\n            \"content\": \"Join our special doubt clearing session this weekend. Get your questions answered by expert teachers.\",\n            \"date\": \"2024-07-22\",\n            \"type\": \"event\",\n            \"priority\": \"high\"\n        }\n    ]\n    \n    for announcement in announcements:\n        priority_color = {\n            \"high\": \"#FF6B6B\",\n            \"medium\": \"#FFB366\", \n            \"low\": \"#4ECDC4\"\n        }\n        \n        st.markdown(f\"\"\"\n        <div style=\"\n            border: 1px solid {priority_color[announcement['priority']]};\n            border-left: 5px solid {priority_color[announcement['priority']]};\n            background: white;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        \">\n            <div style=\"display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;\">\n                <h4 style=\"margin: 0; color: {priority_color[announcement['priority']]};\">\n                    {get_announcement_icon(announcement['type'])} {announcement['title']}\n                </h4>\n                <span style=\"\n                    background: {priority_color[announcement['priority']]};\n                    color: white;\n                    padding: 2px 8px;\n                    border-radius: 12px;\n                    font-size: 12px;\n                    font-weight: bold;\n                \">\n                    {announcement['priority'].upper()}\n                </span>\n            </div>\n            <p style=\"color: #666; margin: 10px 0;\">{announcement['content']}</p>\n            <small style=\"color: #999;\">📅 {announcement['date']}</small>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    # Subscribe to announcements\n    st.markdown(\"---\")\n    st.write(\"### Stay Updated\")\n    \n    col1, col2 = st.columns([2, 1])\n    with col1:\n        email_notifications = st.checkbox(\"Email Notifications\", value=True)\n        sms_notifications = st.checkbox(\"SMS Notifications\", value=False)\n    \n    with col2:\n        if st.button(\"Update Subscription\", type=\"primary\"):\n            st.success(\"Subscription preferences updated!\")\n\ndef get_notification_card_style(notification_type: str, is_read: bool) -> str:\n    \"\"\"Get CSS style for notification card\"\"\"\n    opacity = \"0.7\" if is_read else \"1.0\"\n    border_color = {\n        \"info\": \"#4ECDC4\",\n        \"success\": \"#4CAF50\",\n        \"warning\": \"#FFB366\",\n        \"error\": \"#FF6B6B\"\n    }.get(notification_type, \"#ddd\")\n    \n    return f\"\"\"\n        border: 1px solid {border_color};\n        border-left: 4px solid {border_color};\n        background: white;\n        padding: 15px;\n        margin: 10px 0;\n        border-radius: 5px;\n        opacity: {opacity};\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    \"\"\"\n\ndef get_notification_icon(notification_type: str) -> str:\n    \"\"\"Get icon for notification type\"\"\"\n    icons = {\n        \"info\": \"ℹ️\",\n        \"success\": \"✅\",\n        \"warning\": \"⚠️\",\n        \"error\": \"❌\",\n        \"course\": \"📚\",\n        \"test\": \"📝\",\n        \"achievement\": \"🏆\"\n    }\n    return icons.get(notification_type, \"📢\")\n\ndef get_notification_badge(notification_type: str) -> str:\n    \"\"\"Get badge for notification type\"\"\"\n    colors = {\n        \"info\": \"#4ECDC4\",\n        \"success\": \"#4CAF50\",\n        \"warning\": \"#FFB366\",\n        \"error\": \"#FF6B6B\"\n    }\n    \n    color = colors.get(notification_type, \"#ddd\")\n    return f\"\"\"\n    <span style=\"\n        background: {color};\n        color: white;\n        padding: 2px 6px;\n        border-radius: 10px;\n        font-size: 10px;\n        font-weight: bold;\n    \">\n        {notification_type.upper()}\n    </span>\n    \"\"\"\n\ndef get_announcement_icon(announcement_type: str) -> str:\n    \"\"\"Get icon for announcement type\"\"\"\n    icons = {\n        \"course\": \"📚\",\n        \"system\": \"⚙️\",\n        \"feature\": \"✨\",\n        \"event\": \"🎯\"\n    }\n    return icons.get(announcement_type, \"📢\")\n\ndef format_notification_time(timestamp) -> str:\n    \"\"\"Format notification timestamp\"\"\"\n    # In a real app, this would properly parse the timestamp\n    return \"2 hours ago\"  # Placeholder\n\nif __name__ == \"__main__\":\n    show_notifications_page()","size_bytes":10034},"sharpy-educational-app-download/pages/4_Shorts.py":{"content":"import streamlit as st\nfrom utils.database import DatabaseManager\n\nst.set_page_config(page_title=\"Educational Shorts\", page_icon=\"🎬\", layout=\"wide\")\n\ndef show_shorts_page():\n    \"\"\"Show educational shorts/videos page\"\"\"\n    if not st.session_state.authenticated:\n        st.warning(\"Please login to access educational shorts.\")\n        return\n    \n    user_data = st.session_state.user_data\n    db_manager = DatabaseManager()\n    \n    st.title(\"🎬 Educational Shorts\")\n    st.markdown(\"Quick learning videos to boost your knowledge!\")\n    \n    # Filter options\n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        subject_filter = st.selectbox(\"Subject\", \n            [\"All\", \"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\", \"English\"])\n    \n    with col2:\n        duration_filter = st.selectbox(\"Duration\", \n            [\"All\", \"Under 2 min\", \"2-5 min\", \"5-10 min\"])\n    \n    with col3:\n        difficulty_filter = st.selectbox(\"Difficulty\", \n            [\"All\", \"Beginner\", \"Intermediate\", \"Advanced\"])\n    \n    st.markdown(\"---\")\n    \n    # Educational shorts content\n    show_shorts_grid(user_data, db_manager, subject_filter, duration_filter, difficulty_filter)\n\ndef show_shorts_grid(user_data: dict, db_manager: DatabaseManager, subject: str, duration: str, difficulty: str):\n    \"\"\"Display shorts in a grid format\"\"\"\n    \n    # Sample educational shorts data\n    shorts = [\n        {\n            \"id\": 1,\n            \"title\": \"Quadratic Formula in 60 Seconds\",\n            \"subject\": \"Mathematics\",\n            \"duration\": \"1:00\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"📊\",\n            \"views\": \"12.5K\",\n            \"likes\": \"1.2K\",\n            \"description\": \"Master the quadratic formula quickly with this short explanation!\",\n            \"coins_reward\": 8\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Newton's Laws Explained\",\n            \"subject\": \"Physics\",\n            \"duration\": \"2:30\",\n            \"difficulty\": \"Beginner\",\n            \"thumbnail\": \"🔬\",\n            \"views\": \"25.3K\",\n            \"likes\": \"2.8K\",\n            \"description\": \"Understanding Newton's three laws of motion in simple terms.\",\n            \"coins_reward\": 10\n        },\n        {\n            \"id\": 3,\n            \"title\": \"Periodic Table Tricks\",\n            \"subject\": \"Chemistry\",\n            \"duration\": \"1:45\",\n            \"difficulty\": \"Beginner\",\n            \"thumbnail\": \"⚗️\",\n            \"views\": \"18.7K\",\n            \"likes\": \"1.9K\",\n            \"description\": \"Memory tricks to remember the periodic table easily!\",\n            \"coins_reward\": 9\n        },\n        {\n            \"id\": 4,\n            \"title\": \"DNA Structure Quick Review\",\n            \"subject\": \"Biology\",\n            \"duration\": \"2:15\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"🧬\",\n            \"views\": \"15.2K\",\n            \"likes\": \"1.5K\",\n            \"description\": \"Quick overview of DNA structure and its components.\",\n            \"coins_reward\": 11\n        },\n        {\n            \"id\": 5,\n            \"title\": \"Calculus Limits Simplified\",\n            \"subject\": \"Mathematics\",\n            \"duration\": \"3:20\",\n            \"difficulty\": \"Advanced\",\n            \"thumbnail\": \"📈\",\n            \"views\": \"8.9K\",\n            \"likes\": \"934\",\n            \"description\": \"Understanding limits in calculus with simple examples.\",\n            \"coins_reward\": 15\n        },\n        {\n            \"id\": 6,\n            \"title\": \"Electromagnetic Waves Basics\",\n            \"subject\": \"Physics\",\n            \"duration\": \"2:45\",\n            \"difficulty\": \"Intermediate\",\n            \"thumbnail\": \"📡\",\n            \"views\": \"11.4K\",\n            \"likes\": \"1.1K\",\n            \"description\": \"Introduction to electromagnetic spectrum and properties.\",\n            \"coins_reward\": 12\n        }\n    ]\n    \n    # Filter shorts based on selection\n    filtered_shorts = filter_shorts(shorts, subject, duration, difficulty)\n    \n    if not filtered_shorts:\n        st.info(\"No shorts match your current filters. Try adjusting your selection!\")\n        return\n    \n    # Display shorts in responsive grid\n    cols_per_row = 2\n    rows = len(filtered_shorts) // cols_per_row + (1 if len(filtered_shorts) % cols_per_row else 0)\n    \n    for row in range(rows):\n        cols = st.columns(cols_per_row)\n        for col_idx in range(cols_per_row):\n            short_idx = row * cols_per_row + col_idx\n            if short_idx < len(filtered_shorts):\n                short = filtered_shorts[short_idx]\n                with cols[col_idx]:\n                    show_short_card(short, user_data, db_manager)\n\ndef show_short_card(short: dict, user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Display individual short card\"\"\"\n    \n    # Short card with custom styling\n    st.markdown(f\"\"\"\n    <div style=\"\n        border: 1px solid #e0e0e0;\n        border-radius: 15px;\n        padding: 0;\n        margin: 15px 0;\n        background: white;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        overflow: hidden;\n        transition: transform 0.2s;\n    \">\n        <!-- Video thumbnail area -->\n        <div style=\"\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            height: 200px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            position: relative;\n        \">\n            <div style=\"font-size: 4rem; color: white;\">{short['thumbnail']}</div>\n            <div style=\"\n                position: absolute;\n                top: 10px;\n                right: 10px;\n                background: rgba(0,0,0,0.7);\n                color: white;\n                padding: 5px 10px;\n                border-radius: 15px;\n                font-size: 12px;\n                font-weight: bold;\n            \">\n                {short['duration']}\n            </div>\n            <div style=\"\n                position: absolute;\n                bottom: 10px;\n                right: 10px;\n                background: #FFD700;\n                color: #333;\n                padding: 3px 8px;\n                border-radius: 12px;\n                font-size: 11px;\n                font-weight: bold;\n            \">\n                +{short['coins_reward']} coins\n            </div>\n        </div>\n        \n        <!-- Content area -->\n        <div style=\"padding: 15px;\">\n            <h4 style=\"margin: 0 0 10px 0; color: #333; font-size: 16px;\">{short['title']}</h4>\n            <p style=\"margin: 0 0 10px 0; color: #666; font-size: 13px; line-height: 1.4;\">\n                {short['description']}\n            </p>\n            \n            <!-- Stats -->\n            <div style=\"display: flex; justify-content: space-between; margin: 10px 0; font-size: 12px; color: #999;\">\n                <span>👀 {short['views']} views</span>\n                <span>👍 {short['likes']} likes</span>\n                <span>📚 {short['subject']}</span>\n            </div>\n            \n            <!-- Difficulty badge -->\n            <div style=\"margin: 10px 0;\">\n                <span style=\"\n                    background: {get_difficulty_color(short['difficulty'])};\n                    color: white;\n                    padding: 2px 8px;\n                    border-radius: 12px;\n                    font-size: 11px;\n                    font-weight: bold;\n                \">\n                    {short['difficulty']}\n                </span>\n            </div>\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Watch button\n    if st.button(f\"▶️ Watch Now\", key=f\"watch_{short['id']}\", type=\"primary\"):\n        show_video_player(short, user_data, db_manager)\n\ndef show_video_player(short: dict, user_data: dict, db_manager: DatabaseManager):\n    \"\"\"Show video player interface\"\"\"\n    \n    st.markdown(\"---\")\n    \n    # Video player area\n    st.subheader(f\"🎬 {short['title']}\")\n    \n    # Mock video player\n    st.markdown(f\"\"\"\n    <div style=\"\n        background: #000;\n        height: 400px;\n        border-radius: 10px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin: 20px 0;\n        position: relative;\n    \">\n        <div style=\"text-align: center; color: white;\">\n            <div style=\"font-size: 6rem;\">{short['thumbnail']}</div>\n            <h3>Now Playing: {short['title']}</h3>\n            <p>Duration: {short['duration']} • Subject: {short['subject']}</p>\n        </div>\n        \n        <!-- Play controls -->\n        <div style=\"\n            position: absolute;\n            bottom: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: rgba(255,255,255,0.2);\n            padding: 10px 20px;\n            border-radius: 30px;\n            backdrop-filter: blur(10px);\n        \">\n            <span style=\"color: white; font-size: 14px;\">▶️ Playing • 🔊 Audio On • ⚡ {short['coins_reward']} coins to earn</span>\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Video completion actions\n    col1, col2, col3 = st.columns([1, 1, 1])\n    \n    with col1:\n        if st.button(\"👍 Like\", key=f\"like_{short['id']}\"):\n            st.success(\"Liked!\")\n    \n    with col2:\n        if st.button(\"💾 Save\", key=f\"save_{short['id']}\"):\n            st.success(\"Saved to your collection!\")\n    \n    with col3:\n        if st.button(\"✅ Mark Complete\", key=f\"complete_{short['id']}\", type=\"primary\"):\n            # Award coins for completing video\n            db_manager.add_user_coins(user_data['id'], short['coins_reward'])\n            st.success(f\"Great! You earned {short['coins_reward']} coins! 🪙\")\n            \n            # Add achievement notification\n            db_manager.add_notification(\n                user_data['id'],\n                \"Video Completed!\",\n                f\"You completed '{short['title']}' and earned {short['coins_reward']} coins!\",\n                \"success\"\n            )\n    \n    # Related shorts\n    st.markdown(\"---\")\n    st.subheader(\"📚 Related Shorts\")\n    \n    related_subjects = [\"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\"]\n    related_subject = short['subject']\n    \n    col1, col2, col3 = st.columns(3)\n    cols = [col1, col2, col3]\n    \n    for i in range(3):\n        with cols[i]:\n            st.markdown(f\"\"\"\n            <div style=\"\n                border: 1px solid #e0e0e0;\n                border-radius: 10px;\n                padding: 10px;\n                text-align: center;\n                background: white;\n            \">\n                <div style=\"font-size: 2rem;\">🎬</div>\n                <h5>Related {related_subject} Short {i+1}</h5>\n                <small>Duration: 2:{15+i*10}</small>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if st.button(f\"Watch\", key=f\"related_{i}\"):\n                st.info(f\"Loading related video {i+1}...\")\n\ndef filter_shorts(shorts: list, subject: str, duration: str, difficulty: str) -> list:\n    \"\"\"Filter shorts based on user selection\"\"\"\n    filtered = shorts.copy()\n    \n    if subject != \"All\":\n        filtered = [s for s in filtered if s['subject'] == subject]\n    \n    if duration != \"All\":\n        # In a real app, you'd properly parse duration and filter\n        pass\n    \n    if difficulty != \"All\":\n        filtered = [s for s in filtered if s['difficulty'] == difficulty]\n    \n    return filtered\n\ndef get_difficulty_color(difficulty: str) -> str:\n    \"\"\"Get color for difficulty level\"\"\"\n    colors = {\n        \"Beginner\": \"#4CAF50\",\n        \"Intermediate\": \"#FF9800\",\n        \"Advanced\": \"#F44336\"\n    }\n    return colors.get(difficulty, \"#666\")\n\nif __name__ == \"__main__\":\n    show_shorts_page()","size_bytes":11723},"sharpy-educational-app-download/utils/auth.py":{"content":"import hashlib\nimport os\nfrom utils.database import DatabaseManager\n\nclass AuthManager:\n    \"\"\"Handle user authentication and registration\"\"\"\n    \n    def __init__(self):\n        self.db = DatabaseManager()\n    \n    def hash_password(self, password: str) -> str:\n        \"\"\"Hash password using SHA-256\"\"\"\n        return hashlib.sha256(password.encode()).hexdigest()\n    \n    def register_user(self, name: str, phone: str, email: str, school: str, class_level: str, address: str, password: str) -> bool:\n        \"\"\"Register a new user\"\"\"\n        try:\n            # Check if phone number already exists\n            if self.db.user_exists(phone):\n                return False\n            \n            hashed_password = self.hash_password(password)\n            \n            # Insert user into database\n            user_data = {\n                'name': name,\n                'phone': phone,\n                'email': email,\n                'school': school,\n                'class': class_level,\n                'address': address,\n                'password': hashed_password,\n                'is_premium': False,\n                'coins': 0,\n                'max_devices': 2  # Default maximum login devices\n            }\n            \n            return self.db.create_user(user_data)\n            \n        except Exception as e:\n            print(f\"Registration error: {e}\")\n            return False\n    \n    def login_user(self, phone: str, password: str) -> bool:\n        \"\"\"Authenticate user login\"\"\"\n        try:\n            user = self.db.get_user_by_phone(phone)\n            if not user:\n                return False\n            \n            hashed_password = self.hash_password(password)\n            return user['password'] == hashed_password\n            \n        except Exception as e:\n            print(f\"Login error: {e}\")\n            return False\n    \n    def get_user_data(self, phone: str) -> dict:\n        \"\"\"Get user data by phone number\"\"\"\n        return self.db.get_user_by_phone(phone)\n    \n    def send_otp(self, phone: str) -> bool:\n        \"\"\"Send OTP to phone number (placeholder for Twilio integration)\"\"\"\n        # This would integrate with Twilio API\n        # For now, return True as placeholder\n        return True\n    \n    def verify_otp(self, phone: str, otp: str) -> bool:\n        \"\"\"Verify OTP (placeholder for Twilio integration)\"\"\"\n        # This would integrate with Twilio API\n        # For now, return True as placeholder\n        return True","size_bytes":2471},"sharpy-educational-app-download/utils/database.py":{"content":"import os\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\nfrom datetime import datetime, date\nimport json\n\nclass DatabaseManager:\n    \"\"\"Manage database operations for the Sharpy Education app\"\"\"\n    \n    def __init__(self):\n        self.connection_string = os.getenv('DATABASE_URL')\n        self.init_database()\n    \n    def get_connection(self):\n        \"\"\"Get database connection\"\"\"\n        return psycopg2.connect(self.connection_string)\n    \n    def init_database(self):\n        \"\"\"Initialize database tables\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            \n            # Users table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    phone VARCHAR(20) UNIQUE NOT NULL,\n                    email VARCHAR(255),\n                    school VARCHAR(255),\n                    class VARCHAR(50),\n                    address TEXT,\n                    password VARCHAR(255) NOT NULL,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    coins INTEGER DEFAULT 0,\n                    max_devices INTEGER DEFAULT 2,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Courses table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS courses (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    description TEXT,\n                    class VARCHAR(50) NOT NULL,\n                    price DECIMAL(10,2) DEFAULT 0,\n                    is_premium BOOLEAN DEFAULT FALSE,\n                    thumbnail_url TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Subjects table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS subjects (\n                    id SERIAL PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    class VARCHAR(50) NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    questions INTEGER DEFAULT 50,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # User enrollments table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS user_enrollments (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    course_id INTEGER REFERENCES courses(id),\n                    progress INTEGER DEFAULT 0,\n                    enrolled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Live classes table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS live_classes (\n                    id SERIAL PRIMARY KEY,\n                    subject VARCHAR(255) NOT NULL,\n                    topic VARCHAR(255) NOT NULL,\n                    teacher VARCHAR(255) NOT NULL,\n                    class_date DATE NOT NULL,\n                    class_time TIME NOT NULL,\n                    duration INTEGER DEFAULT 60,\n                    class VARCHAR(50) NOT NULL,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # User activities table (for coins tracking)\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS user_activities (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    activity_type VARCHAR(50) NOT NULL,\n                    coins_earned INTEGER DEFAULT 0,\n                    description TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Test results table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS test_results (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    subject_id INTEGER REFERENCES subjects(id),\n                    score INTEGER NOT NULL,\n                    total_questions INTEGER NOT NULL,\n                    time_taken INTEGER,\n                    coins_earned INTEGER DEFAULT 0,\n                    taken_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            # Notifications table\n            cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS notifications (\n                    id SERIAL PRIMARY KEY,\n                    user_id INTEGER REFERENCES users(id),\n                    title VARCHAR(255) NOT NULL,\n                    message TEXT NOT NULL,\n                    type VARCHAR(50) DEFAULT 'info',\n                    is_read BOOLEAN DEFAULT FALSE,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\")\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n            # Insert sample data\n            self.insert_sample_data()\n            \n        except Exception as e:\n            print(f\"Database initialization error: {e}\")\n    \n    def insert_sample_data(self):\n        \"\"\"Insert sample data for testing\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            \n            # Sample subjects\n            sample_subjects = [\n                ('Mathematics', 'Class 10', 90, 60),\n                ('Physics', 'Class 10', 90, 60),\n                ('Chemistry', 'Class 10', 90, 60),\n                ('Biology', 'Class 10', 90, 60),\n                ('Mathematics', 'Class 12', 120, 80),\n                ('Physics', 'Class 12', 120, 80),\n                ('Chemistry', 'Class 12', 120, 80),\n                ('Biology', 'Class 12', 120, 80),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM subjects\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO subjects (name, class, duration, questions) VALUES (%s, %s, %s, %s)\",\n                    sample_subjects\n                )\n            \n            # Sample courses\n            sample_courses = [\n                ('Complete Mathematics Course', 'Comprehensive math course for Class 10', 'Class 10', 5000.00, True),\n                ('Physics Mastery', 'Master physics concepts for Class 10', 'Class 10', 4500.00, True),\n                ('Chemistry Fundamentals', 'Essential chemistry for Class 10', 'Class 10', 4000.00, True),\n                ('Biology Basics', 'Complete biology course for Class 10', 'Class 10', 3500.00, True),\n                ('Advanced Mathematics', 'Advanced math for Class 12', 'Class 12', 8000.00, True),\n                ('Physics for JEE', 'Physics preparation for JEE', 'Class 12', 7500.00, True),\n            ]\n            \n            cursor.execute(\"SELECT COUNT(*) FROM courses\")\n            if cursor.fetchone()[0] == 0:\n                cursor.executemany(\n                    \"INSERT INTO courses (name, description, class, price, is_premium) VALUES (%s, %s, %s, %s, %s)\",\n                    sample_courses\n                )\n            \n            # Sample live classes for today\n            today = date.today()\n            sample_classes = [\n                ('Mathematics', 'Quadratic Equations', 'Dr. Sharma', today, '10:00:00', 60, 'Class 10'),\n                ('Physics', 'Light and Reflection', 'Prof. Patel', today, '14:00:00', 60, 'Class 10'),\n                ('Chemistry', 'Acids and Bases', 'Dr. Singh', today, '16:00:00', 60, 'Class 10'),\n            ]\n            \n            cursor.execute(\"DELETE FROM live_classes WHERE class_date = %s\", (today,))\n            cursor.executemany(\n                \"INSERT INTO live_classes (subject, topic, teacher, class_date, class_time, duration, class) VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n                sample_classes\n            )\n            \n            conn.commit()\n            cursor.close()\n            conn.close()\n            \n        except Exception as e:\n            print(f\"Sample data insertion error: {e}\")\n    \n    def user_exists(self, phone: str) -> bool:\n        \"\"\"Check if user exists by phone number\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id FROM users WHERE phone = %s\", (phone,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result is not None\n        except Exception as e:\n            print(f\"User exists check error: {e}\")\n            return False\n    \n    def create_user(self, user_data: dict) -> bool:\n        \"\"\"Create a new user\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO users (name, phone, email, school, class, address, password, is_premium, coins, max_devices)\n                VALUES (%(name)s, %(phone)s, %(email)s, %(school)s, %(class)s, %(address)s, %(password)s, %(is_premium)s, %(coins)s, %(max_devices)s)\n            \"\"\", user_data)\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Create user error: {e}\")\n            return False\n    \n    def get_user_by_phone(self, phone: str) -> dict:\n        \"\"\"Get user data by phone number\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM users WHERE phone = %s\", (phone,))\n            user = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return dict(user) if user else None\n        except Exception as e:\n            print(f\"Get user error: {e}\")\n            return None\n    \n    def get_user_coins(self, user_id: int) -> int:\n        \"\"\"Get user's current coin balance\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT coins FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else 0\n        except Exception as e:\n            print(f\"Get user coins error: {e}\")\n            return 0\n    \n    def add_user_coins(self, user_id: int, coins: int) -> bool:\n        \"\"\"Add coins to user account\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET coins = coins + %s WHERE id = %s\", (coins, user_id))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Add user coins error: {e}\")\n            return False\n    \n    def is_premium_user(self, user_id: int) -> bool:\n        \"\"\"Check if user is premium\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT is_premium FROM users WHERE id = %s\", (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return result[0] if result else False\n        except Exception as e:\n            print(f\"Is premium user error: {e}\")\n            return False\n    \n    def get_subjects_by_class(self, class_level: str) -> list:\n        \"\"\"Get subjects for a specific class\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"SELECT * FROM subjects WHERE class = %s\", (class_level,))\n            subjects = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(subject) for subject in subjects]\n        except Exception as e:\n            print(f\"Get subjects error: {e}\")\n            return []\n    \n    def get_today_live_classes(self, user_id: int) -> list:\n        \"\"\"Get today's live classes for user's class\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            \n            # Get user's class first\n            cursor.execute(\"SELECT class FROM users WHERE id = %s\", (user_id,))\n            user_class = cursor.fetchone()\n            if not user_class:\n                return []\n            \n            today = date.today()\n            cursor.execute(\"\"\"\n                SELECT * FROM live_classes \n                WHERE class_date = %s AND class = %s\n                ORDER BY class_time\n            \"\"\", (today, user_class['class']))\n            \n            classes = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(cls) for cls in classes]\n        except Exception as e:\n            print(f\"Get live classes error: {e}\")\n            return []\n    \n    def get_user_courses(self, user_id: int) -> list:\n        \"\"\"Get user's enrolled courses\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"\"\"\n                SELECT c.id, c.name, c.description, ue.progress\n                FROM courses c\n                JOIN user_enrollments ue ON c.id = ue.course_id\n                WHERE ue.user_id = %s\n            \"\"\", (user_id,))\n            courses = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(course) for course in courses]\n        except Exception as e:\n            print(f\"Get user courses error: {e}\")\n            return []\n    \n    def add_notification(self, user_id: int, title: str, message: str, notification_type: str = 'info') -> bool:\n        \"\"\"Add notification for user\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO notifications (user_id, title, message, type)\n                VALUES (%s, %s, %s, %s)\n            \"\"\", (user_id, title, message, notification_type))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Add notification error: {e}\")\n            return False\n    \n    def get_user_notifications(self, user_id: int) -> list:\n        \"\"\"Get user's notifications\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(\"\"\"\n                SELECT * FROM notifications \n                WHERE user_id = %s \n                ORDER BY created_at DESC\n                LIMIT 50\n            \"\"\", (user_id,))\n            notifications = cursor.fetchall()\n            cursor.close()\n            conn.close()\n            return [dict(notif) for notif in notifications]\n        except Exception as e:\n            print(f\"Get notifications error: {e}\")\n            return []","size_bytes":15292},"sharpy-educational-app-download/utils/otp_manager.py":{"content":"import os\nimport random\nimport string\nfrom datetime import datetime, timedelta\nimport streamlit as st\nfrom twilio.rest import Client\n\nclass OTPManager:\n    \"\"\"Handle OTP generation and verification with Twilio\"\"\"\n    \n    def __init__(self):\n        self.twilio_account_sid = os.getenv('TWILIO_ACCOUNT_SID')\n        self.twilio_auth_token = os.getenv('TWILIO_AUTH_TOKEN') \n        self.twilio_phone_number = os.getenv('TWILIO_PHONE_NUMBER')\n        \n        # Initialize Twilio client if credentials are available\n        if self.twilio_account_sid and self.twilio_auth_token:\n            self.client = Client(self.twilio_account_sid, self.twilio_auth_token)\n        else:\n            self.client = None\n    \n    def generate_otp(self, length: int = 6) -> str:\n        \"\"\"Generate random OTP\"\"\"\n        return ''.join(random.choices(string.digits, k=length))\n    \n    def send_otp(self, phone_number: str, otp: str) -> bool:\n        \"\"\"Send OTP via SMS using Twilio\"\"\"\n        if not self.client:\n            # Fallback: store OTP in session for demo purposes\n            st.session_state.demo_otp = otp\n            st.session_state.demo_phone = phone_number\n            st.info(f\"Demo Mode: Your OTP is {otp} (This would normally be sent via SMS)\")\n            return True\n        \n        try:\n            message = self.client.messages.create(\n                body=f\"Your Sharpy Education verification code is: {otp}. Valid for 5 minutes.\",\n                from_=self.twilio_phone_number,\n                to=phone_number\n            )\n            return True\n        except Exception as e:\n            print(f\"SMS sending error: {e}\")\n            return False\n    \n    def store_otp(self, phone_number: str, otp: str) -> None:\n        \"\"\"Store OTP with expiry time\"\"\"\n        expiry_time = datetime.now() + timedelta(minutes=5)\n        \n        # Store in session state (in production, use Redis or database)\n        if 'otp_data' not in st.session_state:\n            st.session_state.otp_data = {}\n        \n        st.session_state.otp_data[phone_number] = {\n            'otp': otp,\n            'expiry': expiry_time,\n            'attempts': 0\n        }\n    \n    def verify_otp(self, phone_number: str, entered_otp: str) -> tuple[bool, str]:\n        \"\"\"Verify OTP and return status with message\"\"\"\n        \n        # Check demo mode first\n        if hasattr(st.session_state, 'demo_otp') and hasattr(st.session_state, 'demo_phone'):\n            if st.session_state.demo_phone == phone_number and st.session_state.demo_otp == entered_otp:\n                # Clear demo OTP after successful verification\n                delattr(st.session_state, 'demo_otp')\n                delattr(st.session_state, 'demo_phone')\n                return True, \"OTP verified successfully!\"\n            else:\n                return False, \"Invalid OTP. Please try again.\"\n        \n        # Check if OTP data exists\n        if 'otp_data' not in st.session_state or phone_number not in st.session_state.otp_data:\n            return False, \"No OTP found. Please request a new OTP.\"\n        \n        otp_info = st.session_state.otp_data[phone_number]\n        \n        # Check if OTP has expired\n        if datetime.now() > otp_info['expiry']:\n            del st.session_state.otp_data[phone_number]\n            return False, \"OTP has expired. Please request a new one.\"\n        \n        # Check attempt limit\n        if otp_info['attempts'] >= 3:\n            del st.session_state.otp_data[phone_number]\n            return False, \"Too many failed attempts. Please request a new OTP.\"\n        \n        # Verify OTP\n        if otp_info['otp'] == entered_otp:\n            del st.session_state.otp_data[phone_number]\n            return True, \"OTP verified successfully!\"\n        else:\n            # Increment attempts\n            st.session_state.otp_data[phone_number]['attempts'] += 1\n            remaining_attempts = 3 - st.session_state.otp_data[phone_number]['attempts']\n            return False, f\"Invalid OTP. {remaining_attempts} attempts remaining.\"\n    \n    def resend_otp(self, phone_number: str) -> tuple[bool, str]:\n        \"\"\"Resend OTP to phone number\"\"\"\n        # Generate new OTP\n        new_otp = self.generate_otp()\n        \n        # Send OTP\n        if self.send_otp(phone_number, new_otp):\n            self.store_otp(phone_number, new_otp)\n            return True, \"New OTP sent successfully!\"\n        else:\n            return False, \"Failed to send OTP. Please try again.\"\n    \n    def is_valid_phone_number(self, phone_number: str) -> bool:\n        \"\"\"Validate phone number format\"\"\"\n        # Basic validation for Indian phone numbers\n        if not phone_number.startswith('+91'):\n            return False\n        \n        # Remove country code and check if remaining digits are valid\n        number_part = phone_number[3:]\n        if len(number_part) != 10 or not number_part.isdigit():\n            return False\n        \n        return True\n    \n    def format_phone_number(self, phone_number: str) -> str:\n        \"\"\"Format phone number to standard format\"\"\"\n        # Remove any spaces or special characters\n        cleaned_number = ''.join(filter(str.isdigit, phone_number))\n        \n        # Add country code if missing\n        if len(cleaned_number) == 10:\n            return f\"+91{cleaned_number}\"\n        elif len(cleaned_number) == 12 and cleaned_number.startswith('91'):\n            return f\"+{cleaned_number}\"\n        else:\n            return phone_number\n    \n    def cleanup_expired_otps(self) -> None:\n        \"\"\"Clean up expired OTPs from session\"\"\"\n        if 'otp_data' not in st.session_state:\n            return\n        \n        current_time = datetime.now()\n        expired_phones = []\n        \n        for phone, otp_info in st.session_state.otp_data.items():\n            if current_time > otp_info['expiry']:\n                expired_phones.append(phone)\n        \n        for phone in expired_phones:\n            del st.session_state.otp_data[phone]","size_bytes":5971}}}